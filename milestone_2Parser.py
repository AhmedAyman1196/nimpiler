# Generated from milestone_2.g4 by ANTLR 4.5.3
# encoding: utf-8
from antlr4 import *
from io import StringIO

def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\3\u009a")
        buf.write("\u0668\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4")
        buf.write("z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080")
        buf.write("\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084")
        buf.write("\t\u0084\3\2\3\2\3\3\3\3\5\3\u010d\n\3\3\4\3\4\5\4\u0111")
        buf.write("\n\4\3\5\3\5\5\5\u0115\n\5\3\6\3\6\5\6\u0119\n\6\3\7\3")
        buf.write("\7\3\b\3\b\3\t\5\t\u0120\n\t\3\t\5\t\u0123\n\t\3\n\5\n")
        buf.write("\u0126\n\n\3\13\3\13\3\13\3\13\3\13\7\13\u012d\n\13\f")
        buf.write("\13\16\13\u0130\13\13\3\13\5\13\u0133\n\13\3\f\3\f\3\f")
        buf.write("\3\f\3\f\7\f\u013a\n\f\f\f\16\f\u013d\13\f\3\r\3\r\3\r")
        buf.write("\3\r\3\r\7\r\u0144\n\r\f\r\16\r\u0147\13\r\3\16\3\16\3")
        buf.write("\16\3\16\3\16\7\16\u014e\n\16\f\16\16\16\u0151\13\16\3")
        buf.write("\17\3\17\3\17\3\17\3\17\7\17\u0158\n\17\f\17\16\17\u015b")
        buf.write("\13\17\3\20\3\20\3\20\3\20\3\20\7\20\u0162\n\20\f\20\16")
        buf.write("\20\u0165\13\20\3\21\3\21\3\21\3\21\3\21\7\21\u016c\n")
        buf.write("\21\f\21\16\21\u016f\13\21\3\22\3\22\3\22\3\22\3\22\7")
        buf.write("\22\u0176\n\22\f\22\16\22\u0179\13\22\3\23\3\23\3\23\3")
        buf.write("\23\3\23\7\23\u0180\n\23\f\23\16\23\u0183\13\23\3\24\3")
        buf.write("\24\3\24\3\24\3\24\7\24\u018a\n\24\f\24\16\24\u018d\13")
        buf.write("\24\3\25\3\25\3\25\3\25\3\25\7\25\u0194\n\25\f\25\16\25")
        buf.write("\u0197\13\25\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3")
        buf.write("\26\3\26\3\26\3\26\6\26\u01a5\n\26\r\26\16\26\u01a6\6")
        buf.write("\26\u01a9\n\26\r\26\16\26\u01aa\3\26\3\26\3\26\5\26\u01b0")
        buf.write("\n\26\3\27\3\27\3\27\3\27\5\27\u01b6\n\27\3\30\3\30\3")
        buf.write("\30\3\30\7\30\u01bc\n\30\f\30\16\30\u01bf\13\30\3\31\3")
        buf.write("\31\3\31\3\31\7\31\u01c5\n\31\f\31\16\31\u01c8\13\31\3")
        buf.write("\31\5\31\u01cb\n\31\3\32\3\32\3\32\3\32\3\32\3\32\3\32")
        buf.write("\3\32\5\32\u01d5\n\32\3\33\3\33\3\33\3\33\3\33\3\33\3")
        buf.write("\33\5\33\u01de\n\33\3\34\3\34\3\34\3\34\3\34\5\34\u01e5")
        buf.write("\n\34\3\35\3\35\3\35\3\35\7\35\u01eb\n\35\f\35\16\35\u01ee")
        buf.write("\13\35\3\35\5\35\u01f1\n\35\3\35\3\35\3\36\3\36\3\36\3")
        buf.write("\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\37\3\37")
        buf.write("\3 \3 \3 \3 \3 \7 \u0208\n \f \16 \u020b\13 \3 \3 \3 ")
        buf.write("\3 \7 \u0211\n \f \16 \u0214\13 \3 \3 \3 \3 \3 \3 \3 ")
        buf.write("\3 \7 \u021e\n \f \16 \u0221\13 \5 \u0223\n \3 \3 \3 ")
        buf.write("\3 \3 \3 \7 \u022b\n \f \16 \u022e\13 \5 \u0230\n \5 ")
        buf.write("\u0232\n \5 \u0234\n \3 \3 \3 \3!\3!\3\"\3\"\3#\3#\3#")
        buf.write("\3#\3#\3#\3#\5#\u0244\n#\3$\3$\3$\3$\5$\u024a\n$\7$\u024c")
        buf.write("\n$\f$\16$\u024f\13$\3$\3$\3$\3%\3%\3%\3%\5%\u0258\n%")
        buf.write("\7%\u025a\n%\f%\16%\u025d\13%\3%\3%\3%\3&\3&\3&\5&\u0265")
        buf.write("\n&\7&\u0267\n&\f&\16&\u026a\13&\3&\3&\5&\u026e\n&\3&")
        buf.write("\3&\3&\3&\3&\5&\u0275\n&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3")
        buf.write("&\3&\3&\3&\5&\u0284\n&\3\'\3\'\3(\3(\3)\3)\3*\3*\3+\3")
        buf.write("+\3,\3,\3-\3-\3.\3.\3/\3/\3\60\3\60\3\61\3\61\3\62\3\62")
        buf.write("\3\63\3\63\3\64\3\64\3\65\3\65\3\65\3\65\3\65\3\65\3\65")
        buf.write("\3\65\3\65\3\65\7\65\u02ac\n\65\f\65\16\65\u02af\13\65")
        buf.write("\3\65\3\65\3\65\3\65\3\66\3\66\3\66\3\67\3\67\3\67\38")
        buf.write("\38\38\38\58\u02bf\n8\78\u02c1\n8\f8\168\u02c4\138\38")
        buf.write("\38\38\39\39\59\u02cb\n9\3:\3:\3:\3:\3:\5:\u02d2\n:\3")
        buf.write(";\3;\5;\u02d6\n;\3<\3<\5<\u02da\n<\3=\3=\3=\3=\7=\u02e0")
        buf.write("\n=\f=\16=\u02e3\13=\3=\5=\u02e6\n=\3=\3=\3=\3=\5=\u02ec")
        buf.write("\n=\3=\3=\3=\3=\5=\u02f2\n=\3>\3>\3>\3>\7>\u02f8\n>\f")
        buf.write(">\16>\u02fb\13>\3>\5>\u02fe\n>\3>\3>\3>\3>\5>\u0304\n")
        buf.write(">\3>\3>\3>\3>\5>\u030a\n>\3?\3?\3?\3?\3?\3?\3?\5?\u0313")
        buf.write("\n?\7?\u0315\n?\f?\16?\u0318\13?\3?\3?\3?\3@\3@\5@\u031f")
        buf.write("\n@\3@\3@\3@\3@\7@\u0325\n@\f@\16@\u0328\13@\5@\u032a")
        buf.write("\n@\3A\3A\3B\3B\3B\3B\3B\3B\3B\3B\7B\u0336\nB\fB\16B\u0339")
        buf.write("\13B\5B\u033b\nB\3B\3B\3C\5C\u0340\nC\3C\3C\3C\3C\5C\u0346")
        buf.write("\nC\3D\5D\u0349\nD\3D\3D\3D\3D\5D\u034f\nD\3E\3E\3E\5")
        buf.write("E\u0354\nE\3E\3E\3E\3F\3F\3F\5F\u035c\nF\3F\3F\5F\u0360")
        buf.write("\nF\3F\5F\u0363\nF\3G\3G\3G\3G\3H\3H\3H\3H\3H\7H\u036e")
        buf.write("\nH\fH\16H\u0371\13H\3H\3H\3H\3H\3H\3I\3I\3J\3J\3J\3J")
        buf.write("\3J\3J\5J\u0380\nJ\3J\5J\u0383\nJ\3K\3K\3L\3L\3L\3L\7")
        buf.write("L\u038b\nL\fL\16L\u038e\13L\3L\3L\7L\u0392\nL\fL\16L\u0395")
        buf.write("\13L\3L\3L\5L\u0399\nL\3M\3M\3N\3N\3N\5N\u03a0\nN\3O\3")
        buf.write("O\5O\u03a4\nO\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3")
        buf.write("O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\7O\u03be\nO\fO\16O\u03c1")
        buf.write("\13O\3P\3P\3P\3P\3P\5P\u03c8\nP\3P\3P\3P\3P\7P\u03ce\n")
        buf.write("P\fP\16P\u03d1\13P\3P\3P\3P\5P\u03d6\nP\5P\u03d8\nP\3")
        buf.write("Q\3Q\3Q\3Q\3Q\3Q\7Q\u03e0\nQ\fQ\16Q\u03e3\13Q\3Q\3Q\3")
        buf.write("Q\3Q\3Q\3Q\7Q\u03eb\nQ\fQ\16Q\u03ee\13Q\5Q\u03f0\nQ\3")
        buf.write("R\3R\3R\3R\3R\3R\7R\u03f8\nR\fR\16R\u03fb\13R\3S\3S\3")
        buf.write("S\3S\3S\3S\3S\3S\7S\u0405\nS\fS\16S\u0408\13S\3T\3T\3")
        buf.write("T\5T\u040d\nT\3U\3U\3U\5U\u0412\nU\3V\3V\3V\5V\u0417\n")
        buf.write("V\3W\3W\3W\5W\u041c\nW\3X\3X\3X\5X\u0421\nX\3Y\3Y\3Y\5")
        buf.write("Y\u0426\nY\3Z\3Z\3Z\3Z\5Z\u042c\nZ\3Z\3Z\3Z\3Z\3Z\3Z\7")
        buf.write("Z\u0434\nZ\fZ\16Z\u0437\13Z\3Z\3Z\3Z\3Z\3Z\5Z\u043e\n")
        buf.write("Z\3[\3[\3[\3\\\3\\\3\\\3]\3]\3]\3]\3]\3^\3^\3^\3^\3^\3")
        buf.write("_\3_\3_\7_\u0453\n_\f_\16_\u0456\13_\3_\3_\3_\3_\3_\3")
        buf.write("_\7_\u045e\n_\f_\16_\u0461\13_\3_\3_\3_\3_\3_\5_\u0468")
        buf.write("\n_\3`\3`\3`\5`\u046d\n`\3`\5`\u0470\n`\3`\3`\3`\3`\3")
        buf.write("`\3`\5`\u0478\n`\3a\3a\3a\3a\5a\u047e\na\3a\3a\3a\3a\3")
        buf.write("a\7a\u0485\na\fa\16a\u0488\13a\3a\5a\u048b\na\3a\3a\3")
        buf.write("a\3a\5a\u0491\na\3b\3b\3b\3b\3b\3b\3b\3b\3b\7b\u049c\n")
        buf.write("b\fb\16b\u049f\13b\3b\3b\3b\3b\3b\5b\u04a6\nb\3c\3c\3")
        buf.write("c\3c\3d\3d\5d\u04ae\nd\3d\3d\3d\3e\3e\5e\u04b5\ne\3e\3")
        buf.write("e\3e\3f\3f\3f\3f\3g\3g\3g\3g\3h\3h\5h\u04c4\nh\3h\3h\3")
        buf.write("i\3i\3i\3i\7i\u04cc\ni\fi\16i\u04cf\13i\3i\3i\3i\5i\u04d4")
        buf.write("\ni\3i\3i\3i\3i\5i\u04da\ni\3j\3j\3j\3j\3j\5j\u04e1\n")
        buf.write("j\3j\3j\7j\u04e5\nj\fj\16j\u04e8\13j\5j\u04ea\nj\3j\3")
        buf.write("j\3j\3k\3k\3k\3k\3l\3l\5l\u04f5\nl\3l\5l\u04f8\nl\5l\u04fa")
        buf.write("\nl\3m\3m\3m\5m\u04ff\nm\3m\5m\u0502\nm\3m\3m\5m\u0506")
        buf.write("\nm\3m\3m\5m\u050a\nm\3m\5m\u050d\nm\3m\3m\3n\3n\3o\5")
        buf.write("o\u0514\no\3o\3o\3o\3o\5o\u051a\no\3o\3o\3o\5o\u051f\n")
        buf.write("o\7o\u0521\no\fo\16o\u0524\13o\3o\5o\u0527\no\3p\3p\3")
        buf.write("p\3p\5p\u052d\np\3p\3p\3p\3p\3p\3q\3q\3q\3q\3q\3q\3q\3")
        buf.write("q\5q\u053c\nq\5q\u053e\nq\3q\5q\u0541\nq\6q\u0543\nq\r")
        buf.write("q\16q\u0544\3r\3r\3r\3r\3r\5r\u054c\nr\3r\3r\3r\3r\3r")
        buf.write("\5r\u0553\nr\7r\u0555\nr\fr\16r\u0558\13r\3r\3r\3r\3r")
        buf.write("\5r\u055e\nr\5r\u0560\nr\3s\3s\3s\3s\3s\3t\3t\3t\7t\u056a")
        buf.write("\nt\ft\16t\u056d\13t\3t\3t\3t\3t\3t\3t\7t\u0575\nt\ft")
        buf.write("\16t\u0578\13t\3t\3t\3t\3t\3t\5t\u057f\nt\3u\3u\3u\3u")
        buf.write("\3u\5u\u0586\nu\3u\5u\u0589\nu\3u\3u\3u\3u\3u\3u\5u\u0591")
        buf.write("\nu\3v\3v\3v\3v\7v\u0597\nv\fv\16v\u059a\13v\3v\3v\3v")
        buf.write("\3v\3v\3v\3v\5v\u05a3\nv\3w\3w\5w\u05a7\nw\3w\3w\5w\u05ab")
        buf.write("\nw\3w\5w\u05ae\nw\3w\3w\3x\5x\u05b3\nx\3x\3x\3y\3y\3")
        buf.write("y\7y\u05ba\ny\fy\16y\u05bd\13y\5y\u05bf\ny\3y\5y\u05c2")
        buf.write("\ny\3y\3y\3y\3y\7y\u05c8\ny\fy\16y\u05cb\13y\5y\u05cd")
        buf.write("\ny\5y\u05cf\ny\3y\5y\u05d2\ny\3z\3z\5z\u05d6\nz\3z\3")
        buf.write("z\3z\3z\5z\u05dc\nz\3{\3{\3{\3{\3{\3{\7{\u05e4\n{\f{\16")
        buf.write("{\u05e7\13{\3{\3{\3{\3{\3{\3{\3|\3|\3|\5|\u05f2\n|\3}")
        buf.write("\3}\5}\u05f6\n}\3}\5}\u05f9\n}\3}\3}\3~\3~\3~\3~\3~\3")
        buf.write("~\7~\u0603\n~\f~\16~\u0606\13~\3\177\3\177\3\177\3\177")
        buf.write("\3\177\3\177\7\177\u060e\n\177\f\177\16\177\u0611\13\177")
        buf.write("\3\u0080\3\u0080\3\u0080\5\u0080\u0616\n\u0080\3\u0080")
        buf.write("\5\u0080\u0619\n\u0080\3\u0081\3\u0081\3\u0081\3\u0081")
        buf.write("\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081")
        buf.write("\3\u0081\5\u0081\u0627\n\u0081\3\u0081\5\u0081\u062a\n")
        buf.write("\u0081\3\u0081\5\u0081\u062d\n\u0081\3\u0082\3\u0082\3")
        buf.write("\u0082\3\u0082\3\u0082\3\u0082\3\u0082\3\u0082\3\u0082")
        buf.write("\3\u0082\3\u0082\3\u0082\3\u0082\3\u0082\3\u0082\3\u0082")
        buf.write("\3\u0082\3\u0082\3\u0082\3\u0082\3\u0082\3\u0082\3\u0082")
        buf.write("\3\u0082\3\u0082\3\u0082\3\u0082\3\u0082\3\u0082\5\u0082")
        buf.write("\u064c\n\u0082\3\u0082\5\u0082\u064f\n\u0082\3\u0083\3")
        buf.write("\u0083\3\u0083\3\u0083\7\u0083\u0655\n\u0083\f\u0083\16")
        buf.write("\u0083\u0658\13\u0083\3\u0083\3\u0083\3\u0083\3\u0083")
        buf.write("\3\u0083\7\u0083\u065f\n\u0083\f\u0083\16\u0083\u0662")
        buf.write("\13\u0083\5\u0083\u0664\n\u0083\3\u0084\3\u0084\3\u0084")
        buf.write("\2\2\u0085\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$")
        buf.write("&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|")
        buf.write("~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090")
        buf.write("\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2")
        buf.write("\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4")
        buf.write("\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6")
        buf.write("\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8")
        buf.write("\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea")
        buf.write("\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc")
        buf.write("\u00fe\u0100\u0102\u0104\u0106\2\r\f\2\17\30??PP^^abh")
        buf.write("hjkmnuw\177\177\3\2\4\5\17\2@@EEGGJJNNVVXY\\\\__ddggy")
        buf.write("y}~\t\2 #ii\u0084\u0084\u008c\u0094\u0096\u0096\u0098")
        buf.write("\u0098\u009a\u009a\3\2$%\4\2\n\n99\13\2\f\f@@OOUUccll")
        buf.write("oqsszz\4\2 !##\4\2@@oo\5\2@@dd||\4\2\5\5==\u06e0\2\u0108")
        buf.write("\3\2\2\2\4\u010a\3\2\2\2\6\u010e\3\2\2\2\b\u0112\3\2\2")
        buf.write("\2\n\u0116\3\2\2\2\f\u011a\3\2\2\2\16\u011c\3\2\2\2\20")
        buf.write("\u011f\3\2\2\2\22\u0125\3\2\2\2\24\u0127\3\2\2\2\26\u0134")
        buf.write("\3\2\2\2\30\u013e\3\2\2\2\32\u0148\3\2\2\2\34\u0152\3")
        buf.write("\2\2\2\36\u015c\3\2\2\2 \u0166\3\2\2\2\"\u0170\3\2\2\2")
        buf.write("$\u017a\3\2\2\2&\u0184\3\2\2\2(\u018e\3\2\2\2*\u01af\3")
        buf.write("\2\2\2,\u01b1\3\2\2\2.\u01b7\3\2\2\2\60\u01c0\3\2\2\2")
        buf.write("\62\u01cc\3\2\2\2\64\u01d6\3\2\2\2\66\u01df\3\2\2\28\u01e6")
        buf.write("\3\2\2\2:\u01f4\3\2\2\2<\u0200\3\2\2\2>\u0202\3\2\2\2")
        buf.write("@\u0238\3\2\2\2B\u023a\3\2\2\2D\u0243\3\2\2\2F\u0245\3")
        buf.write("\2\2\2H\u0253\3\2\2\2J\u0283\3\2\2\2L\u0285\3\2\2\2N\u0287")
        buf.write("\3\2\2\2P\u0289\3\2\2\2R\u028b\3\2\2\2T\u028d\3\2\2\2")
        buf.write("V\u028f\3\2\2\2X\u0291\3\2\2\2Z\u0293\3\2\2\2\\\u0295")
        buf.write("\3\2\2\2^\u0297\3\2\2\2`\u0299\3\2\2\2b\u029b\3\2\2\2")
        buf.write("d\u029d\3\2\2\2f\u029f\3\2\2\2h\u02a1\3\2\2\2j\u02b4\3")
        buf.write("\2\2\2l\u02b7\3\2\2\2n\u02ba\3\2\2\2p\u02c8\3\2\2\2r\u02cc")
        buf.write("\3\2\2\2t\u02d3\3\2\2\2v\u02d7\3\2\2\2x\u02db\3\2\2\2")
        buf.write("z\u02f3\3\2\2\2|\u030b\3\2\2\2~\u031c\3\2\2\2\u0080\u032b")
        buf.write("\3\2\2\2\u0082\u032d\3\2\2\2\u0084\u033f\3\2\2\2\u0086")
        buf.write("\u0348\3\2\2\2\u0088\u0350\3\2\2\2\u008a\u0358\3\2\2\2")
        buf.write("\u008c\u0364\3\2\2\2\u008e\u0368\3\2\2\2\u0090\u0377\3")
        buf.write("\2\2\2\u0092\u0382\3\2\2\2\u0094\u0384\3\2\2\2\u0096\u0398")
        buf.write("\3\2\2\2\u0098\u039a\3\2\2\2\u009a\u039f\3\2\2\2\u009c")
        buf.write("\u03a1\3\2\2\2\u009e\u03c2\3\2\2\2\u00a0\u03d9\3\2\2\2")
        buf.write("\u00a2\u03f1\3\2\2\2\u00a4\u03fc\3\2\2\2\u00a6\u0409\3")
        buf.write("\2\2\2\u00a8\u040e\3\2\2\2\u00aa\u0413\3\2\2\2\u00ac\u0418")
        buf.write("\3\2\2\2\u00ae\u041d\3\2\2\2\u00b0\u0422\3\2\2\2\u00b2")
        buf.write("\u0427\3\2\2\2\u00b4\u043f\3\2\2\2\u00b6\u0442\3\2\2\2")
        buf.write("\u00b8\u0445\3\2\2\2\u00ba\u044a\3\2\2\2\u00bc\u044f\3")
        buf.write("\2\2\2\u00be\u0469\3\2\2\2\u00c0\u0479\3\2\2\2\u00c2\u0492")
        buf.write("\3\2\2\2\u00c4\u04a7\3\2\2\2\u00c6\u04ab\3\2\2\2\u00c8")
        buf.write("\u04b2\3\2\2\2\u00ca\u04b9\3\2\2\2\u00cc\u04bd\3\2\2\2")
        buf.write("\u00ce\u04c1\3\2\2\2\u00d0\u04c7\3\2\2\2\u00d2\u04db\3")
        buf.write("\2\2\2\u00d4\u04ee\3\2\2\2\u00d6\u04f9\3\2\2\2\u00d8\u04fb")
        buf.write("\3\2\2\2\u00da\u0510\3\2\2\2\u00dc\u0526\3\2\2\2\u00de")
        buf.write("\u0528\3\2\2\2\u00e0\u0533\3\2\2\2\u00e2\u0546\3\2\2\2")
        buf.write("\u00e4\u0561\3\2\2\2\u00e6\u0566\3\2\2\2\u00e8\u0580\3")
        buf.write("\2\2\2\u00ea\u05a2\3\2\2\2\u00ec\u05a4\3\2\2\2\u00ee\u05b2")
        buf.write("\3\2\2\2\u00f0\u05d1\3\2\2\2\u00f2\u05d3\3\2\2\2\u00f4")
        buf.write("\u05dd\3\2\2\2\u00f6\u05ee\3\2\2\2\u00f8\u05f5\3\2\2\2")
        buf.write("\u00fa\u05fc\3\2\2\2\u00fc\u0607\3\2\2\2\u00fe\u0612\3")
        buf.write("\2\2\2\u0100\u0629\3\2\2\2\u0102\u064e\3\2\2\2\u0104\u0663")
        buf.write("\3\2\2\2\u0106\u0665\3\2\2\2\u0108\u0109\5@!\2\u0109\3")
        buf.write("\3\2\2\2\u010a\u010c\7<\2\2\u010b\u010d\7\37\2\2\u010c")
        buf.write("\u010b\3\2\2\2\u010c\u010d\3\2\2\2\u010d\5\3\2\2\2\u010e")
        buf.write("\u0110\7=\2\2\u010f\u0111\7\37\2\2\u0110\u010f\3\2\2\2")
        buf.write("\u0110\u0111\3\2\2\2\u0111\7\3\2\2\2\u0112\u0114\7\65")
        buf.write("\2\2\u0113\u0115\7\37\2\2\u0114\u0113\3\2\2\2\u0114\u0115")
        buf.write("\3\2\2\2\u0115\t\3\2\2\2\u0116\u0118\7\65\2\2\u0117\u0119")
        buf.write("\7\37\2\2\u0118\u0117\3\2\2\2\u0118\u0119\3\2\2\2\u0119")
        buf.write("\13\3\2\2\2\u011a\u011b\t\2\2\2\u011b\r\3\2\2\2\u011c")
        buf.write("\u011d\5\f\7\2\u011d\17\3\2\2\2\u011e\u0120\7\37\2\2\u011f")
        buf.write("\u011e\3\2\2\2\u011f\u0120\3\2\2\2\u0120\u0122\3\2\2\2")
        buf.write("\u0121\u0123\7\3\2\2\u0122\u0121\3\2\2\2\u0122\u0123\3")
        buf.write("\2\2\2\u0123\21\3\2\2\2\u0124\u0126\t\3\2\2\u0125\u0124")
        buf.write("\3\2\2\2\u0125\u0126\3\2\2\2\u0126\23\3\2\2\2\u0127\u012e")
        buf.write("\5\26\f\2\u0128\u0129\7\30\2\2\u0129\u012a\5\20\t\2\u012a")
        buf.write("\u012b\5\26\f\2\u012b\u012d\3\2\2\2\u012c\u0128\3\2\2")
        buf.write("\2\u012d\u0130\3\2\2\2\u012e\u012c\3\2\2\2\u012e\u012f")
        buf.write("\3\2\2\2\u012f\u0132\3\2\2\2\u0130\u012e\3\2\2\2\u0131")
        buf.write("\u0133\5n8\2\u0132\u0131\3\2\2\2\u0132\u0133\3\2\2\2\u0133")
        buf.write("\25\3\2\2\2\u0134\u013b\5\30\r\2\u0135\u0136\7\27\2\2")
        buf.write("\u0136\u0137\5\20\t\2\u0137\u0138\5\30\r\2\u0138\u013a")
        buf.write("\3\2\2\2\u0139\u0135\3\2\2\2\u013a\u013d\3\2\2\2\u013b")
        buf.write("\u0139\3\2\2\2\u013b\u013c\3\2\2\2\u013c\27\3\2\2\2\u013d")
        buf.write("\u013b\3\2\2\2\u013e\u0145\5\32\16\2\u013f\u0140\7\26")
        buf.write("\2\2\u0140\u0141\5\20\t\2\u0141\u0142\5\32\16\2\u0142")
        buf.write("\u0144\3\2\2\2\u0143\u013f\3\2\2\2\u0144\u0147\3\2\2\2")
        buf.write("\u0145\u0143\3\2\2\2\u0145\u0146\3\2\2\2\u0146\31\3\2")
        buf.write("\2\2\u0147\u0145\3\2\2\2\u0148\u014f\5\34\17\2\u0149\u014a")
        buf.write("\7\25\2\2\u014a\u014b\5\20\t\2\u014b\u014c\5\34\17\2\u014c")
        buf.write("\u014e\3\2\2\2\u014d\u0149\3\2\2\2\u014e\u0151\3\2\2\2")
        buf.write("\u014f\u014d\3\2\2\2\u014f\u0150\3\2\2\2\u0150\33\3\2")
        buf.write("\2\2\u0151\u014f\3\2\2\2\u0152\u0159\5\36\20\2\u0153\u0154")
        buf.write("\7\24\2\2\u0154\u0155\5\20\t\2\u0155\u0156\5\36\20\2\u0156")
        buf.write("\u0158\3\2\2\2\u0157\u0153\3\2\2\2\u0158\u015b\3\2\2\2")
        buf.write("\u0159\u0157\3\2\2\2\u0159\u015a\3\2\2\2\u015a\35\3\2")
        buf.write("\2\2\u015b\u0159\3\2\2\2\u015c\u0163\5 \21\2\u015d\u015e")
        buf.write("\7\23\2\2\u015e\u015f\5\20\t\2\u015f\u0160\5 \21\2\u0160")
        buf.write("\u0162\3\2\2\2\u0161\u015d\3\2\2\2\u0162\u0165\3\2\2\2")
        buf.write("\u0163\u0161\3\2\2\2\u0163\u0164\3\2\2\2\u0164\37\3\2")
        buf.write("\2\2\u0165\u0163\3\2\2\2\u0166\u016d\5\"\22\2\u0167\u0168")
        buf.write("\7\22\2\2\u0168\u0169\5\20\t\2\u0169\u016a\5\"\22\2\u016a")
        buf.write("\u016c\3\2\2\2\u016b\u0167\3\2\2\2\u016c\u016f\3\2\2\2")
        buf.write("\u016d\u016b\3\2\2\2\u016d\u016e\3\2\2\2\u016e!\3\2\2")
        buf.write("\2\u016f\u016d\3\2\2\2\u0170\u0177\5$\23\2\u0171\u0172")
        buf.write("\7\21\2\2\u0172\u0173\5\20\t\2\u0173\u0174\5$\23\2\u0174")
        buf.write("\u0176\3\2\2\2\u0175\u0171\3\2\2\2\u0176\u0179\3\2\2\2")
        buf.write("\u0177\u0175\3\2\2\2\u0177\u0178\3\2\2\2\u0178#\3\2\2")
        buf.write("\2\u0179\u0177\3\2\2\2\u017a\u0181\5&\24\2\u017b\u017c")
        buf.write("\7\20\2\2\u017c\u017d\5\20\t\2\u017d\u017e\5&\24\2\u017e")
        buf.write("\u0180\3\2\2\2\u017f\u017b\3\2\2\2\u0180\u0183\3\2\2\2")
        buf.write("\u0181\u017f\3\2\2\2\u0181\u0182\3\2\2\2\u0182%\3\2\2")
        buf.write("\2\u0183\u0181\3\2\2\2\u0184\u018b\5(\25\2\u0185\u0186")
        buf.write("\7\17\2\2\u0186\u0187\5\20\t\2\u0187\u0188\5(\25\2\u0188")
        buf.write("\u018a\3\2\2\2\u0189\u0185\3\2\2\2\u018a\u018d\3\2\2\2")
        buf.write("\u018b\u0189\3\2\2\2\u018b\u018c\3\2\2\2\u018c\'\3\2\2")
        buf.write("\2\u018d\u018b\3\2\2\2\u018e\u0195\5\u0096L\2\u018f\u0190")
        buf.write("\7\16\2\2\u0190\u0191\5\20\t\2\u0191\u0192\5\u0096L\2")
        buf.write("\u0192\u0194\3\2\2\2\u0193\u018f\3\2\2\2\u0194\u0197\3")
        buf.write("\2\2\2\u0195\u0193\3\2\2\2\u0195\u0196\3\2\2\2\u0196)")
        buf.write("\3\2\2\2\u0197\u0195\3\2\2\2\u0198\u01a8\7\6\2\2\u0199")
        buf.write("\u01a9\7>\2\2\u019a\u01a9\7\31\2\2\u019b\u01a9\5@!\2\u019c")
        buf.write("\u01a5\5\f\7\2\u019d\u01a5\7\66\2\2\u019e\u01a5\7\67\2")
        buf.write("\2\u019f\u01a5\7:\2\2\u01a0\u01a5\7;\2\2\u01a1\u01a5\7")
        buf.write("8\2\2\u01a2\u01a5\79\2\2\u01a3\u01a5\7\7\2\2\u01a4\u019c")
        buf.write("\3\2\2\2\u01a4\u019d\3\2\2\2\u01a4\u019e\3\2\2\2\u01a4")
        buf.write("\u019f\3\2\2\2\u01a4\u01a0\3\2\2\2\u01a4\u01a1\3\2\2\2")
        buf.write("\u01a4\u01a2\3\2\2\2\u01a4\u01a3\3\2\2\2\u01a5\u01a6\3")
        buf.write("\2\2\2\u01a6\u01a4\3\2\2\2\u01a6\u01a7\3\2\2\2\u01a7\u01a9")
        buf.write("\3\2\2\2\u01a8\u0199\3\2\2\2\u01a8\u019a\3\2\2\2\u01a8")
        buf.write("\u019b\3\2\2\2\u01a8\u01a4\3\2\2\2\u01a9\u01aa\3\2\2\2")
        buf.write("\u01aa\u01a8\3\2\2\2\u01aa\u01ab\3\2\2\2\u01ab\u01ac\3")
        buf.write("\2\2\2\u01ac\u01b0\7\6\2\2\u01ad\u01b0\7\31\2\2\u01ae")
        buf.write("\u01b0\7>\2\2\u01af\u0198\3\2\2\2\u01af\u01ad\3\2\2\2")
        buf.write("\u01af\u01ae\3\2\2\2\u01b0+\3\2\2\2\u01b1\u01b5\5\u0092")
        buf.write("J\2\u01b2\u01b6\7\65\2\2\u01b3\u01b4\7\7\2\2\u01b4\u01b6")
        buf.write("\5\u0092J\2\u01b5\u01b2\3\2\2\2\u01b5\u01b3\3\2\2\2\u01b5")
        buf.write("\u01b6\3\2\2\2\u01b6-\3\2\2\2\u01b7\u01bd\5\u0092J\2\u01b8")
        buf.write("\u01b9\5\4\3\2\u01b9\u01ba\5\u0092J\2\u01ba\u01bc\3\2")
        buf.write("\2\2\u01bb\u01b8\3\2\2\2\u01bc\u01bf\3\2\2\2\u01bd\u01bb")
        buf.write("\3\2\2\2\u01bd\u01be\3\2\2\2\u01be/\3\2\2\2\u01bf\u01bd")
        buf.write("\3\2\2\2\u01c0\u01c6\5,\27\2\u01c1\u01c2\5\4\3\2\u01c2")
        buf.write("\u01c3\5,\27\2\u01c3\u01c5\3\2\2\2\u01c4\u01c1\3\2\2\2")
        buf.write("\u01c5\u01c8\3\2\2\2\u01c6\u01c4\3\2\2\2\u01c6\u01c7\3")
        buf.write("\2\2\2\u01c7\u01ca\3\2\2\2\u01c8\u01c6\3\2\2\2\u01c9\u01cb")
        buf.write("\5\4\3\2\u01ca\u01c9\3\2\2\2\u01ca\u01cb\3\2\2\2\u01cb")
        buf.write("\61\3\2\2\2\u01cc\u01cd\5\u0092J\2\u01cd\u01ce\7\64\2")
        buf.write("\2\u01ce\u01d4\5\20\t\2\u01cf\u01d5\5*\26\2\u01d0\u01d1")
        buf.write("\7\b\2\2\u01d1\u01d2\5.\30\2\u01d2\u01d3\7;\2\2\u01d3")
        buf.write("\u01d5\3\2\2\2\u01d4\u01cf\3\2\2\2\u01d4\u01d0\3\2\2\2")
        buf.write("\u01d5\63\3\2\2\2\u01d6\u01d7\7\b\2\2\u01d7\u01d8\5.\30")
        buf.write("\2\u01d8\u01dd\7;\2\2\u01d9\u01da\7\66\2\2\u01da\u01db")
        buf.write("\5,\27\2\u01db\u01dc\7\67\2\2\u01dc\u01de\3\2\2\2\u01dd")
        buf.write("\u01d9\3\2\2\2\u01dd\u01de\3\2\2\2\u01de\65\3\2\2\2\u01df")
        buf.write("\u01e4\5*\26\2\u01e0\u01e1\7\64\2\2\u01e1\u01e2\5\20\t")
        buf.write("\2\u01e2\u01e3\5*\26\2\u01e3\u01e5\3\2\2\2\u01e4\u01e0")
        buf.write("\3\2\2\2\u01e4\u01e5\3\2\2\2\u01e5\67\3\2\2\2\u01e6\u01f0")
        buf.write("\78\2\2\u01e7\u01e8\5,\27\2\u01e8\u01e9\5\4\3\2\u01e9")
        buf.write("\u01eb\3\2\2\2\u01ea\u01e7\3\2\2\2\u01eb\u01ee\3\2\2\2")
        buf.write("\u01ec\u01ea\3\2\2\2\u01ec\u01ed\3\2\2\2\u01ed\u01f1\3")
        buf.write("\2\2\2\u01ee\u01ec\3\2\2\2\u01ef\u01f1\7\65\2\2\u01f0")
        buf.write("\u01ec\3\2\2\2\u01f0\u01ef\3\2\2\2\u01f1\u01f2\3\2\2\2")
        buf.write("\u01f2\u01f3\79\2\2\u01f39\3\2\2\2\u01f4\u01f5\7H\2\2")
        buf.write("\u01f5\u01f6\7:\2\2\u01f6\u01f7\5\20\t\2\u01f7\u01f8\5")
        buf.write("\u0098M\2\u01f8\u01f9\5\22\n\2\u01f9\u01fa\7;\2\2\u01fa")
        buf.write("\u01fb\7\66\2\2\u01fb\u01fc\5\20\t\2\u01fc\u01fd\5\u0092")
        buf.write("J\2\u01fd\u01fe\5\22\n\2\u01fe\u01ff\7\67\2\2\u01ff;\3")
        buf.write("\2\2\2\u0200\u0201\t\4\2\2\u0201=\3\2\2\2\u0202\u0203")
        buf.write("\7\66\2\2\u0203\u0233\5\20\t\2\u0204\u0209\5\u0102\u0082")
        buf.write("\2\u0205\u0206\7=\2\2\u0206\u0208\5\u0102\u0082\2\u0207")
        buf.write("\u0205\3\2\2\2\u0208\u020b\3\2\2\2\u0209\u0207\3\2\2\2")
        buf.write("\u0209\u020a\3\2\2\2\u020a\u0234\3\2\2\2\u020b\u0209\3")
        buf.write("\2\2\2\u020c\u020d\7=\2\2\u020d\u0212\5\u0102\u0082\2")
        buf.write("\u020e\u020f\7=\2\2\u020f\u0211\5\u0102\u0082\2\u0210")
        buf.write("\u020e\3\2\2\2\u0211\u0214\3\2\2\2\u0212\u0210\3\2\2\2")
        buf.write("\u0212\u0213\3\2\2\2\u0213\u0234\3\2\2\2\u0214\u0212\3")
        buf.write("\2\2\2\u0215\u0234\5\u00fe\u0080\2\u0216\u0231\5\24\13")
        buf.write("\2\u0217\u0218\7\7\2\2\u0218\u0222\5\u0092J\2\u0219\u021a")
        buf.write("\7=\2\2\u021a\u021f\5\u0102\u0082\2\u021b\u021c\7=\2\2")
        buf.write("\u021c\u021e\5\u0102\u0082\2\u021d\u021b\3\2\2\2\u021e")
        buf.write("\u0221\3\2\2\2\u021f\u021d\3\2\2\2\u021f\u0220\3\2\2\2")
        buf.write("\u0220\u0223\3\2\2\2\u0221\u021f\3\2\2\2\u0222\u0219\3")
        buf.write("\2\2\2\u0222\u0223\3\2\2\2\u0223\u0232\3\2\2\2\u0224\u0225")
        buf.write("\7\65\2\2\u0225\u022f\5\u0092J\2\u0226\u0227\7<\2\2\u0227")
        buf.write("\u022c\5,\27\2\u0228\u0229\7<\2\2\u0229\u022b\5f\64\2")
        buf.write("\u022a\u0228\3\2\2\2\u022b\u022e\3\2\2\2\u022c\u022a\3")
        buf.write("\2\2\2\u022c\u022d\3\2\2\2\u022d\u0230\3\2\2\2\u022e\u022c")
        buf.write("\3\2\2\2\u022f\u0226\3\2\2\2\u022f\u0230\3\2\2\2\u0230")
        buf.write("\u0232\3\2\2\2\u0231\u0217\3\2\2\2\u0231\u0224\3\2\2\2")
        buf.write("\u0232\u0234\3\2\2\2\u0233\u0204\3\2\2\2\u0233\u020c\3")
        buf.write("\2\2\2\u0233\u0215\3\2\2\2\u0233\u0216\3\2\2\2\u0234\u0235")
        buf.write("\3\2\2\2\u0235\u0236\5\22\n\2\u0236\u0237\7\67\2\2\u0237")
        buf.write("?\3\2\2\2\u0238\u0239\t\5\2\2\u0239A\3\2\2\2\u023a\u023b")
        buf.write("\t\6\2\2\u023bC\3\2\2\2\u023c\u0244\5B\"\2\u023d\u0244")
        buf.write("\5*\26\2\u023e\u0244\5@!\2\u023f\u0244\5> \2\u0240\u0244")
        buf.write("\5H%\2\u0241\u0244\58\35\2\u0242\u0244\5:\36\2\u0243\u023c")
        buf.write("\3\2\2\2\u0243\u023d\3\2\2\2\u0243\u023e\3\2\2\2\u0243")
        buf.write("\u023f\3\2\2\2\u0243\u0240\3\2\2\2\u0243\u0241\3\2\2\2")
        buf.write("\u0243\u0242\3\2\2\2\u0244E\3\2\2\2\u0245\u0246\7\66\2")
        buf.write("\2\u0246\u024d\5\20\t\2\u0247\u0249\5,\27\2\u0248\u024a")
        buf.write("\5\4\3\2\u0249\u0248\3\2\2\2\u0249\u024a\3\2\2\2\u024a")
        buf.write("\u024c\3\2\2\2\u024b\u0247\3\2\2\2\u024c\u024f\3\2\2\2")
        buf.write("\u024d\u024b\3\2\2\2\u024d\u024e\3\2\2\2\u024e\u0250\3")
        buf.write("\2\2\2\u024f\u024d\3\2\2\2\u0250\u0251\5\22\n\2\u0251")
        buf.write("\u0252\7\67\2\2\u0252G\3\2\2\2\u0253\u0254\7:\2\2\u0254")
        buf.write("\u025b\5\20\t\2\u0255\u0257\5,\27\2\u0256\u0258\5\4\3")
        buf.write("\2\u0257\u0256\3\2\2\2\u0257\u0258\3\2\2\2\u0258\u025a")
        buf.write("\3\2\2\2\u0259\u0255\3\2\2\2\u025a\u025d\3\2\2\2\u025b")
        buf.write("\u0259\3\2\2\2\u025b\u025c\3\2\2\2\u025c\u025e\3\2\2\2")
        buf.write("\u025d\u025b\3\2\2\2\u025e\u025f\5\22\n\2\u025f\u0260")
        buf.write("\7;\2\2\u0260I\3\2\2\2\u0261\u0268\7\66\2\2\u0262\u0264")
        buf.write("\5,\27\2\u0263\u0265\5\4\3\2\u0264\u0263\3\2\2\2\u0264")
        buf.write("\u0265\3\2\2\2\u0265\u0267\3\2\2\2\u0266\u0262\3\2\2\2")
        buf.write("\u0267\u026a\3\2\2\2\u0268\u0266\3\2\2\2\u0268\u0269\3")
        buf.write("\2\2\2\u0269\u026b\3\2\2\2\u026a\u0268\3\2\2\2\u026b\u026d")
        buf.write("\7\67\2\2\u026c\u026e\5b\62\2\u026d\u026c\3\2\2\2\u026d")
        buf.write("\u026e\3\2\2\2\u026e\u0284\3\2\2\2\u026f\u0284\5b\62\2")
        buf.write("\u0270\u0271\7\64\2\2\u0271\u0272\5\20\t\2\u0272\u0274")
        buf.write("\5*\26\2\u0273\u0275\5B\"\2\u0274\u0273\3\2\2\2\u0274")
        buf.write("\u0275\3\2\2\2\u0275\u0284\3\2\2\2\u0276\u0277\7:\2\2")
        buf.write("\u0277\u0278\5\20\t\2\u0278\u0279\5L\'\2\u0279\u027a\5")
        buf.write("\22\n\2\u027a\u027b\7;\2\2\u027b\u0284\3\2\2\2\u027c\u027d")
        buf.write("\78\2\2\u027d\u027e\5\20\t\2\u027e\u027f\5L\'\2\u027f")
        buf.write("\u0280\5\22\n\2\u0280\u0281\79\2\2\u0281\u0284\3\2\2\2")
        buf.write("\u0282\u0284\5\u0092J\2\u0283\u0261\3\2\2\2\u0283\u026f")
        buf.write("\3\2\2\2\u0283\u0270\3\2\2\2\u0283\u0276\3\2\2\2\u0283")
        buf.write("\u027c\3\2\2\2\u0283\u0282\3\2\2\2\u0284K\3\2\2\2\u0285")
        buf.write("\u0286\7\31\2\2\u0286M\3\2\2\2\u0287\u0288\7\31\2\2\u0288")
        buf.write("O\3\2\2\2\u0289\u028a\7\31\2\2\u028aQ\3\2\2\2\u028b\u028c")
        buf.write("\7\31\2\2\u028cS\3\2\2\2\u028d\u028e\7\31\2\2\u028eU\3")
        buf.write("\2\2\2\u028f\u0290\7\31\2\2\u0290W\3\2\2\2\u0291\u0292")
        buf.write("\7\31\2\2\u0292Y\3\2\2\2\u0293\u0294\7\31\2\2\u0294[\3")
        buf.write("\2\2\2\u0295\u0296\7\31\2\2\u0296]\3\2\2\2\u0297\u0298")
        buf.write("\7\31\2\2\u0298_\3\2\2\2\u0299\u029a\7\31\2\2\u029aa\3")
        buf.write("\2\2\2\u029b\u029c\7\31\2\2\u029cc\3\2\2\2\u029d\u029e")
        buf.write("\7\31\2\2\u029ee\3\2\2\2\u029f\u02a0\7\31\2\2\u02a0g\3")
        buf.write("\2\2\2\u02a1\u02a2\5\u0092J\2\u02a2\u02a3\5\n\6\2\u02a3")
        buf.write("\u02a4\5\u0092J\2\u02a4\u02ad\5\20\t\2\u02a5\u02a6\7R")
        buf.write("\2\2\u02a6\u02a7\5\u0092J\2\u02a7\u02a8\5\n\6\2\u02a8")
        buf.write("\u02a9\5\u0092J\2\u02a9\u02aa\5\20\t\2\u02aa\u02ac\3\2")
        buf.write("\2\2\u02ab\u02a5\3\2\2\2\u02ac\u02af\3\2\2\2\u02ad\u02ab")
        buf.write("\3\2\2\2\u02ad\u02ae\3\2\2\2\u02ae\u02b0\3\2\2\2\u02af")
        buf.write("\u02ad\3\2\2\2\u02b0\u02b1\7S\2\2\u02b1\u02b2\5\n\6\2")
        buf.write("\u02b2\u02b3\5\u0092J\2\u02b3i\3\2\2\2\u02b4\u02b5\7\\")
        buf.write("\2\2\u02b5\u02b6\5h\65\2\u02b6k\3\2\2\2\u02b7\u02b8\7")
        buf.write("}\2\2\u02b8\u02b9\5h\65\2\u02b9m\3\2\2\2\u02ba\u02bb\7")
        buf.write("\t\2\2\u02bb\u02c2\5\20\t\2\u02bc\u02be\5f\64\2\u02bd")
        buf.write("\u02bf\5\4\3\2\u02be\u02bd\3\2\2\2\u02be\u02bf\3\2\2\2")
        buf.write("\u02bf\u02c1\3\2\2\2\u02c0\u02bc\3\2\2\2\u02c1\u02c4\3")
        buf.write("\2\2\2\u02c2\u02c0\3\2\2\2\u02c2\u02c3\3\2\2\2\u02c3\u02c5")
        buf.write("\3\2\2\2\u02c4\u02c2\3\2\2\2\u02c5\u02c6\5\22\n\2\u02c6")
        buf.write("\u02c7\t\7\2\2\u02c7o\3\2\2\2\u02c8\u02ca\5*\26\2\u02c9")
        buf.write("\u02cb\5`\61\2\u02ca\u02c9\3\2\2\2\u02ca\u02cb\3\2\2\2")
        buf.write("\u02cbq\3\2\2\2\u02cc\u02cd\5*\26\2\u02cd\u02ce\7\64\2")
        buf.write("\2\u02ce\u02cf\5\20\t\2\u02cf\u02d1\5*\26\2\u02d0\u02d2")
        buf.write("\5`\61\2\u02d1\u02d0\3\2\2\2\u02d1\u02d2\3\2\2\2\u02d2")
        buf.write("s\3\2\2\2\u02d3\u02d5\5p9\2\u02d4\u02d6\5n8\2\u02d5\u02d4")
        buf.write("\3\2\2\2\u02d5\u02d6\3\2\2\2\u02d6u\3\2\2\2\u02d7\u02d9")
        buf.write("\5r:\2\u02d8\u02da\5n8\2\u02d9\u02d8\3\2\2\2\u02d9\u02da")
        buf.write("\3\2\2\2\u02daw\3\2\2\2\u02db\u02e1\5t;\2\u02dc\u02dd")
        buf.write("\5\4\3\2\u02dd\u02de\5t;\2\u02de\u02e0\3\2\2\2\u02df\u02dc")
        buf.write("\3\2\2\2\u02e0\u02e3\3\2\2\2\u02e1\u02df\3\2\2\2\u02e1")
        buf.write("\u02e2\3\2\2\2\u02e2\u02e5\3\2\2\2\u02e3\u02e1\3\2\2\2")
        buf.write("\u02e4\u02e6\5\4\3\2\u02e5\u02e4\3\2\2\2\u02e5\u02e6\3")
        buf.write("\2\2\2\u02e6\u02eb\3\2\2\2\u02e7\u02e8\7\65\2\2\u02e8")
        buf.write("\u02e9\5\20\t\2\u02e9\u02ea\5\u0098M\2\u02ea\u02ec\3\2")
        buf.write("\2\2\u02eb\u02e7\3\2\2\2\u02eb\u02ec\3\2\2\2\u02ec\u02f1")
        buf.write("\3\2\2\2\u02ed\u02ee\7\7\2\2\u02ee\u02ef\5\20\t\2\u02ef")
        buf.write("\u02f0\5\u0092J\2\u02f0\u02f2\3\2\2\2\u02f1\u02ed\3\2")
        buf.write("\2\2\u02f1\u02f2\3\2\2\2\u02f2y\3\2\2\2\u02f3\u02f9\7")
        buf.write("\31\2\2\u02f4\u02f5\5\4\3\2\u02f5\u02f6\7\31\2\2\u02f6")
        buf.write("\u02f8\3\2\2\2\u02f7\u02f4\3\2\2\2\u02f8\u02fb\3\2\2\2")
        buf.write("\u02f9\u02f7\3\2\2\2\u02f9\u02fa\3\2\2\2\u02fa\u02fd\3")
        buf.write("\2\2\2\u02fb\u02f9\3\2\2\2\u02fc\u02fe\5\4\3\2\u02fd\u02fc")
        buf.write("\3\2\2\2\u02fd\u02fe\3\2\2\2\u02fe\u0303\3\2\2\2\u02ff")
        buf.write("\u0300\7\65\2\2\u0300\u0301\5\20\t\2\u0301\u0302\5\u0098")
        buf.write("M\2\u0302\u0304\3\2\2\2\u0303\u02ff\3\2\2\2\u0303\u0304")
        buf.write("\3\2\2\2\u0304\u0309\3\2\2\2\u0305\u0306\7\7\2\2\u0306")
        buf.write("\u0307\5\20\t\2\u0307\u0308\5\u0092J\2\u0308\u030a\3\2")
        buf.write("\2\2\u0309\u0305\3\2\2\2\u0309\u030a\3\2\2\2\u030a{\3")
        buf.write("\2\2\2\u030b\u030c\7z\2\2\u030c\u030d\7:\2\2\u030d\u0316")
        buf.write("\5\20\t\2\u030e\u0312\5z>\2\u030f\u0310\5\4\3\2\u0310")
        buf.write("\u0311\5\6\4\2\u0311\u0313\3\2\2\2\u0312\u030f\3\2\2\2")
        buf.write("\u0312\u0313\3\2\2\2\u0313\u0315\3\2\2\2\u0314\u030e\3")
        buf.write("\2\2\2\u0315\u0318\3\2\2\2\u0316\u0314\3\2\2\2\u0316\u0317")
        buf.write("\3\2\2\2\u0317\u0319\3\2\2\2\u0318\u0316\3\2\2\2\u0319")
        buf.write("\u031a\5\22\n\2\u031a\u031b\7;\2\2\u031b}\3\2\2\2\u031c")
        buf.write("\u031e\7z\2\2\u031d\u031f\7\37\2\2\u031e\u031d\3\2\2\2")
        buf.write("\u031e\u031f\3\2\2\2\u031f\u0329\3\2\2\2\u0320\u0321\7")
        buf.write("\4\2\2\u0321\u0326\5z>\2\u0322\u0323\7\5\2\2\u0323\u0325")
        buf.write("\5z>\2\u0324\u0322\3\2\2\2\u0325\u0328\3\2\2\2\u0326\u0324")
        buf.write("\3\2\2\2\u0326\u0327\3\2\2\2\u0327\u032a\3\2\2\2\u0328")
        buf.write("\u0326\3\2\2\2\u0329\u0320\3\2\2\2\u0329\u032a\3\2\2\2")
        buf.write("\u032a\177\3\2\2\2\u032b\u032c\7z\2\2\u032c\u0081\3\2")
        buf.write("\2\2\u032d\u033a\7\66\2\2\u032e\u0337\5x=\2\u032f\u0330")
        buf.write("\5\4\3\2\u0330\u0331\7*\2\2\u0331\u0332\5\6\4\2\u0332")
        buf.write("\u0333\3\2\2\2\u0333\u0334\5x=\2\u0334\u0336\3\2\2\2\u0335")
        buf.write("\u032f\3\2\2\2\u0336\u0339\3\2\2\2\u0337\u0335\3\2\2\2")
        buf.write("\u0337\u0338\3\2\2\2\u0338\u033b\3\2\2\2\u0339\u0337\3")
        buf.write("\2\2\2\u033a\u032e\3\2\2\2\u033a\u033b\3\2\2\2\u033b\u033c")
        buf.write("\3\2\2\2\u033c\u033d\7\67\2\2\u033d\u0083\3\2\2\2\u033e")
        buf.write("\u0340\5\u0082B\2\u033f\u033e\3\2\2\2\u033f\u0340\3\2")
        buf.write("\2\2\u0340\u0345\3\2\2\2\u0341\u0342\7\13\2\2\u0342\u0343")
        buf.write("\5\20\t\2\u0343\u0344\5\u0098M\2\u0344\u0346\3\2\2\2\u0345")
        buf.write("\u0341\3\2\2\2\u0345\u0346\3\2\2\2\u0346\u0085\3\2\2\2")
        buf.write("\u0347\u0349\5\u0082B\2\u0348\u0347\3\2\2\2\u0348\u0349")
        buf.write("\3\2\2\2\u0349\u034e\3\2\2\2\u034a\u034b\7\65\2\2\u034b")
        buf.write("\u034c\5\20\t\2\u034c\u034d\5\u0098M\2\u034d\u034f\3\2")
        buf.write("\2\2\u034e\u034a\3\2\2\2\u034e\u034f\3\2\2\2\u034f\u0087")
        buf.write("\3\2\2\2\u0350\u0351\7Q\2\2\u0351\u0353\5\u0084C\2\u0352")
        buf.write("\u0354\5n8\2\u0353\u0352\3\2\2\2\u0353\u0354\3\2\2\2\u0354")
        buf.write("\u0355\3\2\2\2\u0355\u0356\5\n\6\2\u0356\u0357\5\u0104")
        buf.write("\u0083\2\u0357\u0089\3\2\2\2\u0358\u0359\7p\2\2\u0359")
        buf.write("\u035b\5\u0086D\2\u035a\u035c\5n8\2\u035b\u035a\3\2\2")
        buf.write("\2\u035b\u035c\3\2\2\2\u035c\u0362\3\2\2\2\u035d\u035f")
        buf.write("\7\7\2\2\u035e\u0360\7\37\2\2\u035f\u035e\3\2\2\2\u035f")
        buf.write("\u0360\3\2\2\2\u0360\u0361\3\2\2\2\u0361\u0363\5\u0104")
        buf.write("\u0083\2\u0362\u035d\3\2\2\2\u0362\u0363\3\2\2\2\u0363")
        buf.write("\u008b\3\2\2\2\u0364\u0365\7O\2\2\u0365\u0366\5\20\t\2")
        buf.write("\u0366\u0367\5\u0098M\2\u0367\u008d\3\2\2\2\u0368\u0369")
        buf.write("\7Y\2\2\u0369\u036f\5t;\2\u036a\u036b\5\4\3\2\u036b\u036c")
        buf.write("\5N(\2\u036c\u036e\3\2\2\2\u036d\u036a\3\2\2\2\u036e\u0371")
        buf.write("\3\2\2\2\u036f\u036d\3\2\2\2\u036f\u0370\3\2\2\2\u0370")
        buf.write("\u0372\3\2\2\2\u0371\u036f\3\2\2\2\u0372\u0373\7^\2\2")
        buf.write("\u0373\u0374\5\u0092J\2\u0374\u0375\5\n\6\2\u0375\u0376")
        buf.write("\5\u0104\u0083\2\u0376\u008f\3\2\2\2\u0377\u0378\5\u008e")
        buf.write("H\2\u0378\u0091\3\2\2\2\u0379\u0380\5\u00c8e\2\u037a\u0380")
        buf.write("\5j\66\2\u037b\u0380\5l\67\2\u037c\u0380\5P)\2\u037d\u0380")
        buf.write("\5\u0090I\2\u037e\u0380\5\u00c2b\2\u037f\u0379\3\2\2\2")
        buf.write("\u037f\u037a\3\2\2\2\u037f\u037b\3\2\2\2\u037f\u037c\3")
        buf.write("\2\2\2\u037f\u037d\3\2\2\2\u037f\u037e\3\2\2\2\u0380\u0383")
        buf.write("\3\2\2\2\u0381\u0383\5\24\13\2\u0382\u037f\3\2\2\2\u0382")
        buf.write("\u0381\3\2\2\2\u0383\u0093\3\2\2\2\u0384\u0385\t\b\2\2")
        buf.write("\u0385\u0095\3\2\2\2\u0386\u0387\5\u0094K\2\u0387\u0388")
        buf.write("\5R*\2\u0388\u0399\3\2\2\2\u0389\u038b\5\16\b\2\u038a")
        buf.write("\u0389\3\2\2\2\u038b\u038e\3\2\2\2\u038c\u038a\3\2\2\2")
        buf.write("\u038c\u038d\3\2\2\2\u038d\u038f\3\2\2\2\u038e\u038c\3")
        buf.write("\2\2\2\u038f\u0393\5D#\2\u0390\u0392\5J&\2\u0391\u0390")
        buf.write("\3\2\2\2\u0392\u0395\3\2\2\2\u0393\u0391\3\2\2\2\u0393")
        buf.write("\u0394\3\2\2\2\u0394\u0399\3\2\2\2\u0395\u0393\3\2\2\2")
        buf.write("\u0396\u0397\7D\2\2\u0397\u0399\5\u0096L\2\u0398\u0386")
        buf.write("\3\2\2\2\u0398\u038c\3\2\2\2\u0398\u0396\3\2\2\2\u0399")
        buf.write("\u0097\3\2\2\2\u039a\u039b\5\24\13\2\u039b\u0099\3\2\2")
        buf.write("\2\u039c\u03a0\5\24\13\2\u039d\u039e\7I\2\2\u039e\u03a0")
        buf.write("\5\u00f0y\2\u039f\u039c\3\2\2\2\u039f\u039d\3\2\2\2\u03a0")
        buf.write("\u009b\3\2\2\2\u03a1\u03a3\7\65\2\2\u03a2\u03a4\5\u0104")
        buf.write("\u0083\2\u03a3\u03a2\3\2\2\2\u03a3\u03a4\3\2\2\2\u03a4")
        buf.write("\u03bf\3\2\2\2\u03a5\u03a6\7\5\2\2\u03a6\u03be\5\u0088")
        buf.write("E\2\u03a7\u03a8\7\5\2\2\u03a8\u03a9\7m\2\2\u03a9\u03aa")
        buf.write("\5.\30\2\u03aa\u03ab\7\65\2\2\u03ab\u03ac\5\u0104\u0083")
        buf.write("\2\u03ac\u03be\3\2\2\2\u03ad\u03ae\7\5\2\2\u03ae\u03af")
        buf.write("\7R\2\2\u03af\u03b0\5\u0092J\2\u03b0\u03b1\7\65\2\2\u03b1")
        buf.write("\u03b2\5\u0104\u0083\2\u03b2\u03be\3\2\2\2\u03b3\u03b4")
        buf.write("\7\5\2\2\u03b4\u03b5\7V\2\2\u03b5\u03b6\5.\30\2\u03b6")
        buf.write("\u03b7\7\65\2\2\u03b7\u03b8\5\u0104\u0083\2\u03b8\u03be")
        buf.write("\3\2\2\2\u03b9\u03ba\7\5\2\2\u03ba\u03bb\7S\2\2\u03bb")
        buf.write("\u03bc\7\65\2\2\u03bc\u03be\5\u0104\u0083\2\u03bd\u03a5")
        buf.write("\3\2\2\2\u03bd\u03a7\3\2\2\2\u03bd\u03ad\3\2\2\2\u03bd")
        buf.write("\u03b3\3\2\2\2\u03bd\u03b9\3\2\2\2\u03be\u03c1\3\2\2\2")
        buf.write("\u03bf\u03bd\3\2\2\2\u03bf\u03c0\3\2\2\2\u03c0\u009d\3")
        buf.write("\2\2\2\u03c1\u03bf\3\2\2\2\u03c2\u03d7\5\24\13\2\u03c3")
        buf.write("\u03c4\7\7\2\2\u03c4\u03c5\5\20\t\2\u03c5\u03c7\5\u0092")
        buf.write("J\2\u03c6\u03c8\5\u00f6|\2\u03c7\u03c6\3\2\2\2\u03c7\u03c8")
        buf.write("\3\2\2\2\u03c8\u03d8\3\2\2\2\u03c9\u03cf\5\u0092J\2\u03ca")
        buf.write("\u03cb\5\4\3\2\u03cb\u03cc\5\u0092J\2\u03cc\u03ce\3\2")
        buf.write("\2\2\u03cd\u03ca\3\2\2\2\u03ce\u03d1\3\2\2\2\u03cf\u03cd")
        buf.write("\3\2\2\2\u03cf\u03d0\3\2\2\2\u03d0\u03d2\3\2\2\2\u03d1")
        buf.write("\u03cf\3\2\2\2\u03d2\u03d3\5b\62\2\u03d3\u03d6\3\2\2\2")
        buf.write("\u03d4\u03d6\5T+\2\u03d5\u03c9\3\2\2\2\u03d5\u03d4\3\2")
        buf.write("\2\2\u03d6\u03d8\3\2\2\2\u03d7\u03c3\3\2\2\2\u03d7\u03d5")
        buf.write("\3\2\2\2\u03d7\u03d8\3\2\2\2\u03d8\u009f\3\2\2\2\u03d9")
        buf.write("\u03da\7]\2\2\u03da\u03db\5\20\t\2\u03db\u03ef\5\u0092")
        buf.write("J\2\u03dc\u03dd\5\4\3\2\u03dd\u03de\5\u0092J\2\u03de\u03e0")
        buf.write("\3\2\2\2\u03df\u03dc\3\2\2\2\u03e0\u03e3\3\2\2\2\u03e1")
        buf.write("\u03df\3\2\2\2\u03e1\u03e2\3\2\2\2\u03e2\u03f0\3\2\2\2")
        buf.write("\u03e3\u03e1\3\2\2\2\u03e4\u03e5\7V\2\2\u03e5\u03e6\5")
        buf.write("\20\t\2\u03e6\u03ec\5\u0092J\2\u03e7\u03e8\5\4\3\2\u03e8")
        buf.write("\u03e9\5\u0092J\2\u03e9\u03eb\3\2\2\2\u03ea\u03e7\3\2")
        buf.write("\2\2\u03eb\u03ee\3\2\2\2\u03ec\u03ea\3\2\2\2\u03ec\u03ed")
        buf.write("\3\2\2\2\u03ed\u03f0\3\2\2\2\u03ee\u03ec\3\2\2\2\u03ef")
        buf.write("\u03e1\3\2\2\2\u03ef\u03e4\3\2\2\2\u03f0\u00a1\3\2\2\2")
        buf.write("\u03f1\u03f2\7_\2\2\u03f2\u03f3\5\20\t\2\u03f3\u03f9\5")
        buf.write("\u0092J\2\u03f4\u03f5\5\4\3\2\u03f5\u03f6\5\u0092J\2\u03f6")
        buf.write("\u03f8\3\2\2\2\u03f7\u03f4\3\2\2\2\u03f8\u03fb\3\2\2\2")
        buf.write("\u03f9\u03f7\3\2\2\2\u03f9\u03fa\3\2\2\2\u03fa\u00a3\3")
        buf.write("\2\2\2\u03fb\u03f9\3\2\2\2\u03fc\u03fd\7Z\2\2\u03fd\u03fe")
        buf.write("\5V,\2\u03fe\u03ff\7]\2\2\u03ff\u0400\5\20\t\2\u0400\u0406")
        buf.write("\5\u0092J\2\u0401\u0402\5\4\3\2\u0402\u0403\5\u0092J\2")
        buf.write("\u0403\u0405\3\2\2\2\u0404\u0401\3\2\2\2\u0405\u0408\3")
        buf.write("\2\2\2\u0406\u0404\3\2\2\2\u0406\u0407\3\2\2\2\u0407\u00a5")
        buf.write("\3\2\2\2\u0408\u0406\3\2\2\2\u0409\u040a\7t\2\2\u040a")
        buf.write("\u040c\5\20\t\2\u040b\u040d\5\u0092J\2\u040c\u040b\3\2")
        buf.write("\2\2\u040c\u040d\3\2\2\2\u040d\u00a7\3\2\2\2\u040e\u040f")
        buf.write("\7r\2\2\u040f\u0411\5\20\t\2\u0410\u0412\5\u0092J\2\u0411")
        buf.write("\u0410\3\2\2\2\u0411\u0412\3\2\2\2\u0412\u00a9\3\2\2\2")
        buf.write("\u0413\u0414\7\u0080\2\2\u0414\u0416\5\20\t\2\u0415\u0417")
        buf.write("\5\u0092J\2\u0416\u0415\3\2\2\2\u0416\u0417\3\2\2\2\u0417")
        buf.write("\u00ab\3\2\2\2\u0418\u0419\7N\2\2\u0419\u041b\5\20\t\2")
        buf.write("\u041a\u041c\5\u0092J\2\u041b\u041a\3\2\2\2\u041b\u041c")
        buf.write("\3\2\2\2\u041c\u00ad\3\2\2\2\u041d\u041e\7F\2\2\u041e")
        buf.write("\u0420\5\20\t\2\u041f\u0421\5\u0092J\2\u0420\u041f\3\2")
        buf.write("\2\2\u0420\u0421\3\2\2\2\u0421\u00af\3\2\2\2\u0422\u0423")
        buf.write("\7F\2\2\u0423\u0425\5\20\t\2\u0424\u0426\5\u0092J\2\u0425")
        buf.write("\u0424\3\2\2\2\u0425\u0426\3\2\2\2\u0426\u00b1\3\2\2\2")
        buf.write("\u0427\u0428\5\u0092J\2\u0428\u0429\5\n\6\2\u0429\u042b")
        buf.write("\5\u0104\u0083\2\u042a\u042c\7\37\2\2\u042b\u042a\3\2")
        buf.write("\2\2\u042b\u042c\3\2\2\2\u042c\u0435\3\2\2\2\u042d\u042e")
        buf.write("\7\5\2\2\u042e\u042f\7R\2\2\u042f\u0430\5\u0092J\2\u0430")
        buf.write("\u0431\5\n\6\2\u0431\u0432\5\u0104\u0083\2\u0432\u0434")
        buf.write("\3\2\2\2\u0433\u042d\3\2\2\2\u0434\u0437\3\2\2\2\u0435")
        buf.write("\u0433\3\2\2\2\u0435\u0436\3\2\2\2\u0436\u043d\3\2\2\2")
        buf.write("\u0437\u0435\3\2\2\2\u0438\u0439\7\5\2\2\u0439\u043a\7")
        buf.write("S\2\2\u043a\u043b\5\n\6\2\u043b\u043c\5\u0104\u0083\2")
        buf.write("\u043c\u043e\3\2\2\2\u043d\u0438\3\2\2\2\u043d\u043e\3")
        buf.write("\2\2\2\u043e\u00b3\3\2\2\2\u043f\u0440\7\\\2\2\u0440\u0441")
        buf.write("\5\u00b2Z\2\u0441\u00b5\3\2\2\2\u0442\u0443\7}\2\2\u0443")
        buf.write("\u0444\5\u00b2Z\2\u0444\u00b7\3\2\2\2\u0445\u0446\7~\2")
        buf.write("\2\u0446\u0447\5\u0092J\2\u0447\u0448\5\n\6\2\u0448\u0449")
        buf.write("\5\u0104\u0083\2\u0449\u00b9\3\2\2\2\u044a\u044b\7m\2")
        buf.write("\2\u044b\u044c\5.\30\2\u044c\u044d\5\n\6\2\u044d\u044e")
        buf.write("\5\u0104\u0083\2\u044e\u00bb\3\2\2\2\u044f\u0454\5\u00ba")
        buf.write("^\2\u0450\u0451\7\5\2\2\u0451\u0453\5\u00ba^\2\u0452\u0450")
        buf.write("\3\2\2\2\u0453\u0456\3\2\2\2\u0454\u0452\3\2\2\2\u0454")
        buf.write("\u0455\3\2\2\2\u0455\u045f\3\2\2\2\u0456\u0454\3\2\2\2")
        buf.write("\u0457\u0458\7\5\2\2\u0458\u0459\7R\2\2\u0459\u045a\5")
        buf.write("\u0092J\2\u045a\u045b\5\n\6\2\u045b\u045c\5\u0104\u0083")
        buf.write("\2\u045c\u045e\3\2\2\2\u045d\u0457\3\2\2\2\u045e\u0461")
        buf.write("\3\2\2\2\u045f\u045d\3\2\2\2\u045f\u0460\3\2\2\2\u0460")
        buf.write("\u0467\3\2\2\2\u0461\u045f\3\2\2\2\u0462\u0463\7\5\2\2")
        buf.write("\u0463\u0464\7S\2\2\u0464\u0465\5\n\6\2\u0465\u0466\5")
        buf.write("\u0104\u0083\2\u0466\u0468\3\2\2\2\u0467\u0462\3\2\2\2")
        buf.write("\u0467\u0468\3\2\2\2\u0468\u00bd\3\2\2\2\u0469\u046a\7")
        buf.write("G\2\2\u046a\u046c\5\u0092J\2\u046b\u046d\7\65\2\2\u046c")
        buf.write("\u046b\3\2\2\2\u046c\u046d\3\2\2\2\u046d\u046f\3\2\2\2")
        buf.write("\u046e\u0470\7\37\2\2\u046f\u046e\3\2\2\2\u046f\u0470")
        buf.write("\3\2\2\2\u0470\u0477\3\2\2\2\u0471\u0472\7\4\2\2\u0472")
        buf.write("\u0473\5\u00bc_\2\u0473\u0474\7\r\2\2\u0474\u0478\3\2")
        buf.write("\2\2\u0475\u0476\7\5\2\2\u0476\u0478\5\u00bc_\2\u0477")
        buf.write("\u0471\3\2\2\2\u0477\u0475\3\2\2\2\u0478\u00bf\3\2\2\2")
        buf.write("\u0479\u047a\7y\2\2\u047a\u047b\5\n\6\2\u047b\u0486\5")
        buf.write("\u0104\u0083\2\u047c\u047e\7\5\2\2\u047d\u047c\3\2\2\2")
        buf.write("\u047d\u047e\3\2\2\2\u047e\u047f\3\2\2\2\u047f\u0480\7")
        buf.write("V\2\2\u0480\u0481\5.\30\2\u0481\u0482\5\n\6\2\u0482\u0483")
        buf.write("\5\u0104\u0083\2\u0483\u0485\3\2\2\2\u0484\u047d\3\2\2")
        buf.write("\2\u0485\u0488\3\2\2\2\u0486\u0484\3\2\2\2\u0486\u0487")
        buf.write("\3\2\2\2\u0487\u0490\3\2\2\2\u0488\u0486\3\2\2\2\u0489")
        buf.write("\u048b\7\5\2\2\u048a\u0489\3\2\2\2\u048a\u048b\3\2\2\2")
        buf.write("\u048b\u048c\3\2\2\2\u048c\u048d\7X\2\2\u048d\u048e\5")
        buf.write("\n\6\2\u048e\u048f\5\u0104\u0083\2\u048f\u0491\3\2\2\2")
        buf.write("\u0490\u048a\3\2\2\2\u0490\u0491\3\2\2\2\u0491\u00c1\3")
        buf.write("\2\2\2\u0492\u0493\7y\2\2\u0493\u0494\5\n\6\2\u0494\u049d")
        buf.write("\5\u0104\u0083\2\u0495\u0496\5\20\t\2\u0496\u0497\7V\2")
        buf.write("\2\u0497\u0498\5.\30\2\u0498\u0499\5\n\6\2\u0499\u049a")
        buf.write("\5\u0104\u0083\2\u049a\u049c\3\2\2\2\u049b\u0495\3\2\2")
        buf.write("\2\u049c\u049f\3\2\2\2\u049d\u049b\3\2\2\2\u049d\u049e")
        buf.write("\3\2\2\2\u049e\u04a5\3\2\2\2\u049f\u049d\3\2\2\2\u04a0")
        buf.write("\u04a1\5\20\t\2\u04a1\u04a2\7X\2\2\u04a2\u04a3\5\n\6\2")
        buf.write("\u04a3\u04a4\5\u0104\u0083\2\u04a4\u04a6\3\2\2\2\u04a5")
        buf.write("\u04a0\3\2\2\2\u04a5\u04a6\3\2\2\2\u04a6\u00c3\3\2\2\2")
        buf.write("\u04a7\u04a8\7V\2\2\u04a8\u04a9\5\n\6\2\u04a9\u04aa\5")
        buf.write("\u0104\u0083\2\u04aa\u00c5\3\2\2\2\u04ab\u04ad\7E\2\2")
        buf.write("\u04ac\u04ae\5*\26\2\u04ad\u04ac\3\2\2\2\u04ad\u04ae\3")
        buf.write("\2\2\2\u04ae\u04af\3\2\2\2\u04af\u04b0\5\n\6\2\u04b0\u04b1")
        buf.write("\5\u0104\u0083\2\u04b1\u00c7\3\2\2\2\u04b2\u04b4\7E\2")
        buf.write("\2\u04b3\u04b5\5*\26\2\u04b4\u04b3\3\2\2\2\u04b4\u04b5")
        buf.write("\3\2\2\2\u04b5\u04b6\3\2\2\2\u04b6\u04b7\5\n\6\2\u04b7")
        buf.write("\u04b8\5\u0104\u0083\2\u04b8\u00c9\3\2\2\2\u04b9\u04ba")
        buf.write("\7w\2\2\u04ba\u04bb\5\n\6\2\u04bb\u04bc\5\u0104\u0083")
        buf.write("\2\u04bc\u00cb\3\2\2\2\u04bd\u04be\7M\2\2\u04be\u04bf")
        buf.write("\5\n\6\2\u04bf\u04c0\5\u0104\u0083\2\u04c0\u00cd\3\2\2")
        buf.write("\2\u04c1\u04c3\7C\2\2\u04c2\u04c4\5n8\2\u04c3\u04c2\3")
        buf.write("\2\2\2\u04c3\u04c4\3\2\2\2\u04c4\u04c5\3\2\2\2\u04c5\u04c6")
        buf.write("\t\t\2\2\u04c6\u00cf\3\2\2\2\u04c7\u04cd\5*\26\2\u04c8")
        buf.write("\u04c9\5\4\3\2\u04c9\u04ca\5*\26\2\u04ca\u04cc\3\2\2\2")
        buf.write("\u04cb\u04c8\3\2\2\2\u04cc\u04cf\3\2\2\2\u04cd\u04cb\3")
        buf.write("\2\2\2\u04cd\u04ce\3\2\2\2\u04ce\u04d3\3\2\2\2\u04cf\u04cd")
        buf.write("\3\2\2\2\u04d0\u04d1\5\b\5\2\u04d1\u04d2\5\u0092J\2\u04d2")
        buf.write("\u04d4\3\2\2\2\u04d3\u04d0\3\2\2\2\u04d3\u04d4\3\2\2\2")
        buf.write("\u04d4\u04d9\3\2\2\2\u04d5\u04d6\7\7\2\2\u04d6\u04d7\5")
        buf.write("\20\t\2\u04d7\u04d8\5\u0092J\2\u04d8\u04da\3\2\2\2\u04d9")
        buf.write("\u04d5\3\2\2\2\u04d9\u04da\3\2\2\2\u04da\u00d1\3\2\2\2")
        buf.write("\u04db\u04dc\7:\2\2\u04dc\u04e9\5\20\t\2\u04dd\u04e6\5")
        buf.write("\u00d0i\2\u04de\u04e1\5\4\3\2\u04df\u04e1\5\6\4\2\u04e0")
        buf.write("\u04de\3\2\2\2\u04e0\u04df\3\2\2\2\u04e1\u04e2\3\2\2\2")
        buf.write("\u04e2\u04e3\5\u00d0i\2\u04e3\u04e5\3\2\2\2\u04e4\u04e0")
        buf.write("\3\2\2\2\u04e5\u04e8\3\2\2\2\u04e6\u04e4\3\2\2\2\u04e6")
        buf.write("\u04e7\3\2\2\2\u04e7\u04ea\3\2\2\2\u04e8\u04e6\3\2\2\2")
        buf.write("\u04e9\u04dd\3\2\2\2\u04e9\u04ea\3\2\2\2\u04ea\u04eb\3")
        buf.write("\2\2\2\u04eb\u04ec\5\22\n\2\u04ec\u04ed\7;\2\2\u04ed\u00d3")
        buf.write("\3\2\2\2\u04ee\u04ef\78\2\2\u04ef\u04f0\5\u0104\u0083")
        buf.write("\2\u04f0\u04f1\79\2\2\u04f1\u00d5\3\2\2\2\u04f2\u04f3")
        buf.write("\7\4\2\2\u04f3\u04f5\7\37\2\2\u04f4\u04f2\3\2\2\2\u04f4")
        buf.write("\u04f5\3\2\2\2\u04f5\u04fa\3\2\2\2\u04f6\u04f8\7\37\2")
        buf.write("\2\u04f7\u04f6\3\2\2\2\u04f7\u04f8\3\2\2\2\u04f8\u04fa")
        buf.write("\3\2\2\2\u04f9\u04f4\3\2\2\2\u04f9\u04f7\3\2\2\2\u04fa")
        buf.write("\u00d7\3\2\2\2\u04fb\u04fc\5\20\t\2\u04fc\u04fe\5p9\2")
        buf.write("\u04fd\u04ff\5\u00d4k\2\u04fe\u04fd\3\2\2\2\u04fe\u04ff")
        buf.write("\3\2\2\2\u04ff\u0501\3\2\2\2\u0500\u0502\5\u00d2j\2\u0501")
        buf.write("\u0500\3\2\2\2\u0501\u0502\3\2\2\2\u0502\u0503\3\2\2\2")
        buf.write("\u0503\u0505\5\u0086D\2\u0504\u0506\5n8\2\u0505\u0504")
        buf.write("\3\2\2\2\u0505\u0506\3\2\2\2\u0506\u050c\3\2\2\2\u0507")
        buf.write("\u0509\7\7\2\2\u0508\u050a\7\37\2\2\u0509\u0508\3\2\2")
        buf.write("\2\u0509\u050a\3\2\2\2\u050a\u050b\3\2\2\2\u050b\u050d")
        buf.write("\5\u0104\u0083\2\u050c\u0507\3\2\2\2\u050c\u050d\3\2\2")
        buf.write("\2\u050d\u050e\3\2\2\2\u050e\u050f\5\u00d6l\2\u050f\u00d9")
        buf.write("\3\2\2\2\u0510\u0511\7\37\2\2\u0511\u00db\3\2\2\2\u0512")
        buf.write("\u0514\7\37\2\2\u0513\u0512\3\2\2\2\u0513\u0514\3\2\2")
        buf.write("\2\u0514\u0515\3\2\2\2\u0515\u0527\5d\63\2\u0516\u0519")
        buf.write("\7\4\2\2\u0517\u051a\5d\63\2\u0518\u051a\7\37\2\2\u0519")
        buf.write("\u0517\3\2\2\2\u0519\u0518\3\2\2\2\u051a\u0522\3\2\2\2")
        buf.write("\u051b\u051e\7\5\2\2\u051c\u051f\5d\63\2\u051d\u051f\7")
        buf.write("\37\2\2\u051e\u051c\3\2\2\2\u051e\u051d\3\2\2\2\u051f")
        buf.write("\u0521\3\2\2\2\u0520\u051b\3\2\2\2\u0521\u0524\3\2\2\2")
        buf.write("\u0522\u0520\3\2\2\2\u0522\u0523\3\2\2\2\u0523\u0525\3")
        buf.write("\2\2\2\u0524\u0522\3\2\2\2\u0525\u0527\7\r\2\2\u0526\u0513")
        buf.write("\3\2\2\2\u0526\u0516\3\2\2\2\u0527\u00dd\3\2\2\2\u0528")
        buf.write("\u052c\5t;\2\u0529\u052a\5\b\5\2\u052a\u052b\5\u0098M")
        buf.write("\2\u052b\u052d\3\2\2\2\u052c\u0529\3\2\2\2\u052c\u052d")
        buf.write("\3\2\2\2\u052d\u052e\3\2\2\2\u052e\u052f\7\7\2\2\u052f")
        buf.write("\u0530\5\20\t\2\u0530\u0531\5\u0092J\2\u0531\u0532\5\u00d6")
        buf.write("l\2\u0532\u00df\3\2\2\2\u0533\u0534\7U\2\2\u0534\u0542")
        buf.write("\5\20\t\2\u0535\u0536\5*\26\2\u0536\u053d\5\20\t\2\u0537")
        buf.write("\u0538\7\7\2\2\u0538\u0539\5\20\t\2\u0539\u053b\5\u0092")
        buf.write("J\2\u053a\u053c\7\37\2\2\u053b\u053a\3\2\2\2\u053b\u053c")
        buf.write("\3\2\2\2\u053c\u053e\3\2\2\2\u053d\u0537\3\2\2\2\u053d")
        buf.write("\u053e\3\2\2\2\u053e\u0540\3\2\2\2\u053f\u0541\5\4\3\2")
        buf.write("\u0540\u053f\3\2\2\2\u0540\u0541\3\2\2\2\u0541\u0543\3")
        buf.write("\2\2\2\u0542\u0535\3\2\2\2\u0543\u0544\3\2\2\2\u0544\u0542")
        buf.write("\3\2\2\2\u0544\u0545\3\2\2\2\u0545\u00e1\3\2\2\2\u0546")
        buf.write("\u0547\7}\2\2\u0547\u0548\5\u0092J\2\u0548\u0549\5\n\6")
        buf.write("\2\u0549\u054b\5\u00eav\2\u054a\u054c\7\37\2\2\u054b\u054a")
        buf.write("\3\2\2\2\u054b\u054c\3\2\2\2\u054c\u0556\3\2\2\2\u054d")
        buf.write("\u054e\7R\2\2\u054e\u054f\5\u0092J\2\u054f\u0550\5\n\6")
        buf.write("\2\u0550\u0552\5\u00eav\2\u0551\u0553\7\37\2\2\u0552\u0551")
        buf.write("\3\2\2\2\u0552\u0553\3\2\2\2\u0553\u0555\3\2\2\2\u0554")
        buf.write("\u054d\3\2\2\2\u0555\u0558\3\2\2\2\u0556\u0554\3\2\2\2")
        buf.write("\u0556\u0557\3\2\2\2\u0557\u055f\3\2\2\2\u0558\u0556\3")
        buf.write("\2\2\2\u0559\u055a\7S\2\2\u055a\u055b\5\n\6\2\u055b\u055d")
        buf.write("\5\u00eav\2\u055c\u055e\7\37\2\2\u055d\u055c\3\2\2\2\u055d")
        buf.write("\u055e\3\2\2\2\u055e\u0560\3\2\2\2\u055f\u0559\3\2\2\2")
        buf.write("\u055f\u0560\3\2\2\2\u0560\u00e3\3\2\2\2\u0561\u0562\7")
        buf.write("m\2\2\u0562\u0563\5.\30\2\u0563\u0564\5\n\6\2\u0564\u0565")
        buf.write("\5\u00eav\2\u0565\u00e5\3\2\2\2\u0566\u056b\5\u00e4s\2")
        buf.write("\u0567\u0568\7\5\2\2\u0568\u056a\5\u00e4s\2\u0569\u0567")
        buf.write("\3\2\2\2\u056a\u056d\3\2\2\2\u056b\u0569\3\2\2\2\u056b")
        buf.write("\u056c\3\2\2\2\u056c\u0576\3\2\2\2\u056d\u056b\3\2\2\2")
        buf.write("\u056e\u056f\7\5\2\2\u056f\u0570\7R\2\2\u0570\u0571\5")
        buf.write("\u0092J\2\u0571\u0572\5\n\6\2\u0572\u0573\5\u00eav\2\u0573")
        buf.write("\u0575\3\2\2\2\u0574\u056e\3\2\2\2\u0575\u0578\3\2\2\2")
        buf.write("\u0576\u0574\3\2\2\2\u0576\u0577\3\2\2\2\u0577\u057e\3")
        buf.write("\2\2\2\u0578\u0576\3\2\2\2\u0579\u057a\7\5\2\2\u057a\u057b")
        buf.write("\7S\2\2\u057b\u057c\5\n\6\2\u057c\u057d\5\u00eav\2\u057d")
        buf.write("\u057f\3\2\2\2\u057e\u0579\3\2\2\2\u057e\u057f\3\2\2\2")
        buf.write("\u057f\u00e7\3\2\2\2\u0580\u0581\7G\2\2\u0581\u0582\5")
        buf.write("t;\2\u0582\u0583\7\65\2\2\u0583\u0585\5\u0098M\2\u0584")
        buf.write("\u0586\7\65\2\2\u0585\u0584\3\2\2\2\u0585\u0586\3\2\2")
        buf.write("\2\u0586\u0588\3\2\2\2\u0587\u0589\7\37\2\2\u0588\u0587")
        buf.write("\3\2\2\2\u0588\u0589\3\2\2\2\u0589\u0590\3\2\2\2\u058a")
        buf.write("\u058b\7\4\2\2\u058b\u058c\5\u00e6t\2\u058c\u058d\7\r")
        buf.write("\2\2\u058d\u0591\3\2\2\2\u058e\u058f\7\5\2\2\u058f\u0591")
        buf.write("\5\u00e6t\2\u0590\u058a\3\2\2\2\u0590\u058e\3\2\2\2\u0591")
        buf.write("\u00e9\3\2\2\2\u0592\u0593\7\4\2\2\u0593\u0598\5\u00ea")
        buf.write("v\2\u0594\u0595\7\5\2\2\u0595\u0597\5\u00eav\2\u0596\u0594")
        buf.write("\3\2\2\2\u0597\u059a\3\2\2\2\u0598\u0596\3\2\2\2\u0598")
        buf.write("\u0599\3\2\2\2\u0599\u059b\3\2\2\2\u059a\u0598\3\2\2\2")
        buf.write("\u059b\u059c\7\r\2\2\u059c\u05a3\3\2\2\2\u059d\u05a3\5")
        buf.write("\u00e2r\2\u059e\u05a3\5\u00e8u\2\u059f\u05a3\7i\2\2\u05a0")
        buf.write("\u05a3\7N\2\2\u05a1\u05a3\5x=\2\u05a2\u0592\3\2\2\2\u05a2")
        buf.write("\u059d\3\2\2\2\u05a2\u059e\3\2\2\2\u05a2\u059f\3\2\2\2")
        buf.write("\u05a2\u05a0\3\2\2\2\u05a2\u05a1\3\2\2\2\u05a3\u00eb\3")
        buf.write("\2\2\2\u05a4\u05a6\7l\2\2\u05a5\u05a7\5n8\2\u05a6\u05a5")
        buf.write("\3\2\2\2\u05a6\u05a7\3\2\2\2\u05a7\u05aa\3\2\2\2\u05a8")
        buf.write("\u05a9\7m\2\2\u05a9\u05ab\5\u0098M\2\u05aa\u05a8\3\2\2")
        buf.write("\2\u05aa\u05ab\3\2\2\2\u05ab\u05ad\3\2\2\2\u05ac\u05ae")
        buf.write("\7\37\2\2\u05ad\u05ac\3\2\2\2\u05ad\u05ae\3\2\2\2\u05ae")
        buf.write("\u05af\3\2\2\2\u05af\u05b0\5\u00eav\2\u05b0\u00ed\3\2")
        buf.write("\2\2\u05b1\u05b3\t\n\2\2\u05b2\u05b1\3\2\2\2\u05b2\u05b3")
        buf.write("\3\2\2\2\u05b3\u05b4\3\2\2\2\u05b4\u05b5\5*\26\2\u05b5")
        buf.write("\u00ef\3\2\2\2\u05b6\u05bb\5\u00eex\2\u05b7\u05b8\7<\2")
        buf.write("\2\u05b8\u05ba\5\u00eex\2\u05b9\u05b7\3\2\2\2\u05ba\u05bd")
        buf.write("\3\2\2\2\u05bb\u05b9\3\2\2\2\u05bb\u05bc\3\2\2\2\u05bc")
        buf.write("\u05bf\3\2\2\2\u05bd\u05bb\3\2\2\2\u05be\u05b6\3\2\2\2")
        buf.write("\u05be\u05bf\3\2\2\2\u05bf\u05c1\3\2\2\2\u05c0\u05c2\5")
        buf.write("n8\2\u05c1\u05c0\3\2\2\2\u05c1\u05c2\3\2\2\2\u05c2\u05ce")
        buf.write("\3\2\2\2\u05c3\u05cc\7m\2\2\u05c4\u05c9\5\u0098M\2\u05c5")
        buf.write("\u05c6\7<\2\2\u05c6\u05c8\5\u0098M\2\u05c7\u05c5\3\2\2")
        buf.write("\2\u05c8\u05cb\3\2\2\2\u05c9\u05c7\3\2\2\2\u05c9\u05ca")
        buf.write("\3\2\2\2\u05ca\u05cd\3\2\2\2\u05cb\u05c9\3\2\2\2\u05cc")
        buf.write("\u05c4\3\2\2\2\u05cc\u05cd\3\2\2\2\u05cd\u05cf\3\2\2\2")
        buf.write("\u05ce\u05c3\3\2\2\2\u05ce\u05cf\3\2\2\2\u05cf\u05d2\3")
        buf.write("\2\2\2\u05d0\u05d2\5\u0104\u0083\2\u05d1\u05be\3\2\2\2")
        buf.write("\u05d1\u05d0\3\2\2\2\u05d2\u00f1\3\2\2\2\u05d3\u05d5\5")
        buf.write("v<\2\u05d4\u05d6\5\u00d2j\2\u05d5\u05d4\3\2\2\2\u05d5")
        buf.write("\u05d6\3\2\2\2\u05d6\u05d7\3\2\2\2\u05d7\u05d8\7\7\2\2")
        buf.write("\u05d8\u05d9\5\20\t\2\u05d9\u05db\5\u009aN\2\u05da\u05dc")
        buf.write("\5\u00d6l\2\u05db\u05da\3\2\2\2\u05db\u05dc\3\2\2\2\u05dc")
        buf.write("\u00f3\3\2\2\2\u05dd\u05de\7\66\2\2\u05de\u05df\5\20\t")
        buf.write("\2\u05df\u05e5\5t;\2\u05e0\u05e1\5\4\3\2\u05e1\u05e2\5")
        buf.write("t;\2\u05e2\u05e4\3\2\2\2\u05e3\u05e0\3\2\2\2\u05e4\u05e7")
        buf.write("\3\2\2\2\u05e5\u05e3\3\2\2\2\u05e5\u05e6\3\2\2\2\u05e6")
        buf.write("\u05e8\3\2\2\2\u05e7\u05e5\3\2\2\2\u05e8\u05e9\5\22\n")
        buf.write("\2\u05e9\u05ea\7\67\2\2\u05ea\u05eb\7\7\2\2\u05eb\u05ec")
        buf.write("\5\20\t\2\u05ec\u05ed\5\u0092J\2\u05ed\u00f5\3\2\2\2\u05ee")
        buf.write("\u05ef\5\n\6\2\u05ef\u05f1\5\u0104\u0083\2\u05f0\u05f2")
        buf.write("\5b\62\2\u05f1\u05f0\3\2\2\2\u05f1\u05f2\3\2\2\2\u05f2")
        buf.write("\u00f7\3\2\2\2\u05f3\u05f6\5\u00f4{\2\u05f4\u05f6\5z>")
        buf.write("\2\u05f5\u05f3\3\2\2\2\u05f5\u05f4\3\2\2\2\u05f6\u05f8")
        buf.write("\3\2\2\2\u05f7\u05f9\5\u00f6|\2\u05f8\u05f7\3\2\2\2\u05f8")
        buf.write("\u05f9\3\2\2\2\u05f9\u05fa\3\2\2\2\u05fa\u05fb\5\u00d6")
        buf.write("l\2\u05fb\u00f9\3\2\2\2\u05fc\u05fd\7D\2\2\u05fd\u05fe")
        buf.write("\5\20\t\2\u05fe\u0604\5\66\34\2\u05ff\u0600\5\4\3\2\u0600")
        buf.write("\u0601\5\66\34\2\u0601\u0603\3\2\2\2\u0602\u05ff\3\2\2")
        buf.write("\2\u0603\u0606\3\2\2\2\u0604\u0602\3\2\2\2\u0604\u0605")
        buf.write("\3\2\2\2\u0605\u00fb\3\2\2\2\u0606\u0604\3\2\2\2\u0607")
        buf.write("\u0608\7g\2\2\u0608\u0609\5\20\t\2\u0609\u060f\5\66\34")
        buf.write("\2\u060a\u060b\5\4\3\2\u060b\u060c\5\66\34\2\u060c\u060e")
        buf.write("\3\2\2\2\u060d\u060a\3\2\2\2\u060e\u0611\3\2\2\2\u060f")
        buf.write("\u060d\3\2\2\2\u060f\u0610\3\2\2\2\u0610\u00fd\3\2\2\2")
        buf.write("\u0611\u060f\3\2\2\2\u0612\u0618\5n8\2\u0613\u0615\7\65")
        buf.write("\2\2\u0614\u0616\7\37\2\2\u0615\u0614\3\2\2\2\u0615\u0616")
        buf.write("\3\2\2\2\u0616\u0617\3\2\2\2\u0617\u0619\5\u0104\u0083")
        buf.write("\2\u0618\u0613\3\2\2\2\u0618\u0619\3\2\2\2\u0619\u00ff")
        buf.write("\3\2\2\2\u061a\u0627\5\u00a6T\2\u061b\u0627\5\u00a8U\2")
        buf.write("\u061c\u0627\5\u00aaV\2\u061d\u0627\5\u00acW\2\u061e\u0627")
        buf.write("\5\u00aeX\2\u061f\u0627\5\u00b0Y\2\u0620\u0627\5\u00fe")
        buf.write("\u0080\2\u0621\u0627\5\u00a0Q\2\u0622\u0627\5^\60\2\u0623")
        buf.write("\u0627\5\u00a4S\2\u0624\u0627\5\u00a2R\2\u0625\u0627\5")
        buf.write("\u00dan\2\u0626\u061a\3\2\2\2\u0626\u061b\3\2\2\2\u0626")
        buf.write("\u061c\3\2\2\2\u0626\u061d\3\2\2\2\u0626\u061e\3\2\2\2")
        buf.write("\u0626\u061f\3\2\2\2\u0626\u0620\3\2\2\2\u0626\u0621\3")
        buf.write("\2\2\2\u0626\u0622\3\2\2\2\u0626\u0623\3\2\2\2\u0626\u0624")
        buf.write("\3\2\2\2\u0626\u0625\3\2\2\2\u0627\u062a\3\2\2\2\u0628")
        buf.write("\u062a\5\u009eP\2\u0629\u0626\3\2\2\2\u0629\u0628\3\2")
        buf.write("\2\2\u062a\u062c\3\2\2\2\u062b\u062d\7\37\2\2\u062c\u062b")
        buf.write("\3\2\2\2\u062c\u062d\3\2\2\2\u062d\u0101\3\2\2\2\u062e")
        buf.write("\u064c\5\u00b4[\2\u062f\u064c\5\u00b6\\\2\u0630\u064c")
        buf.write("\5\u00b8]\2\u0631\u064c\5\u00c0a\2\u0632\u064c\5\u008e")
        buf.write("H\2\u0633\u064c\5\u00c6d\2\u0634\u064c\5\u00caf\2\u0635")
        buf.write("\u064c\5\u00ccg\2\u0636\u064c\5\u00ceh\2\u0637\u0638\7")
        buf.write("p\2\2\u0638\u064c\5\u00d8m\2\u0639\u063a\7f\2\2\u063a")
        buf.write("\u064c\5\u00d8m\2\u063b\u063c\7c\2\2\u063c\u064c\5\u00d8")
        buf.write("m\2\u063d\u063e\7e\2\2\u063e\u064c\5\u00d8m\2\u063f\u0640")
        buf.write("\7x\2\2\u0640\u064c\5\u00d8m\2\u0641\u0642\7L\2\2\u0642")
        buf.write("\u064c\5\u00d8m\2\u0643\u0644\7{\2\2\u0644\u064c\5X-\2")
        buf.write("\u0645\u0646\7J\2\2\u0646\u064c\5Z.\2\u0647\u0648\t\13")
        buf.write("\2\2\u0648\u064c\5\\/\2\u0649\u064c\5\u00fa~\2\u064a\u064c")
        buf.write("\5\u00fc\177\2\u064b\u062e\3\2\2\2\u064b\u062f\3\2\2\2")
        buf.write("\u064b\u0630\3\2\2\2\u064b\u0631\3\2\2\2\u064b\u0632\3")
        buf.write("\2\2\2\u064b\u0633\3\2\2\2\u064b\u0634\3\2\2\2\u064b\u0635")
        buf.write("\3\2\2\2\u064b\u0636\3\2\2\2\u064b\u0637\3\2\2\2\u064b")
        buf.write("\u0639\3\2\2\2\u064b\u063b\3\2\2\2\u064b\u063d\3\2\2\2")
        buf.write("\u064b\u063f\3\2\2\2\u064b\u0641\3\2\2\2\u064b\u0643\3")
        buf.write("\2\2\2\u064b\u0645\3\2\2\2\u064b\u0647\3\2\2\2\u064b\u0649")
        buf.write("\3\2\2\2\u064b\u064a\3\2\2\2\u064c\u064f\3\2\2\2\u064d")
        buf.write("\u064f\5\u0100\u0081\2\u064e\u064b\3\2\2\2\u064e\u064d")
        buf.write("\3\2\2\2\u064f\u0103\3\2\2\2\u0650\u0651\7\4\2\2\u0651")
        buf.write("\u0656\5\u0102\u0082\2\u0652\u0653\t\f\2\2\u0653\u0655")
        buf.write("\5\u0102\u0082\2\u0654\u0652\3\2\2\2\u0655\u0658\3\2\2")
        buf.write("\2\u0656\u0654\3\2\2\2\u0656\u0657\3\2\2\2\u0657\u0659")
        buf.write("\3\2\2\2\u0658\u0656\3\2\2\2\u0659\u065a\7\r\2\2\u065a")
        buf.write("\u0664\3\2\2\2\u065b\u0660\5\u0100\u0081\2\u065c\u065d")
        buf.write("\7=\2\2\u065d\u065f\5\u0100\u0081\2\u065e\u065c\3\2\2")
        buf.write("\2\u065f\u0662\3\2\2\2\u0660\u065e\3\2\2\2\u0660\u0661")
        buf.write("\3\2\2\2\u0661\u0664\3\2\2\2\u0662\u0660\3\2\2\2\u0663")
        buf.write("\u0650\3\2\2\2\u0663\u065b\3\2\2\2\u0664\u0105\3\2\2\2")
        buf.write("\u0665\u0666\5\2\2\2\u0666\u0107\3\2\2\2\u00c0\u010c\u0110")
        buf.write("\u0114\u0118\u011f\u0122\u0125\u012e\u0132\u013b\u0145")
        buf.write("\u014f\u0159\u0163\u016d\u0177\u0181\u018b\u0195\u01a4")
        buf.write("\u01a6\u01a8\u01aa\u01af\u01b5\u01bd\u01c6\u01ca\u01d4")
        buf.write("\u01dd\u01e4\u01ec\u01f0\u0209\u0212\u021f\u0222\u022c")
        buf.write("\u022f\u0231\u0233\u0243\u0249\u024d\u0257\u025b\u0264")
        buf.write("\u0268\u026d\u0274\u0283\u02ad\u02be\u02c2\u02ca\u02d1")
        buf.write("\u02d5\u02d9\u02e1\u02e5\u02eb\u02f1\u02f9\u02fd\u0303")
        buf.write("\u0309\u0312\u0316\u031e\u0326\u0329\u0337\u033a\u033f")
        buf.write("\u0345\u0348\u034e\u0353\u035b\u035f\u0362\u036f\u037f")
        buf.write("\u0382\u038c\u0393\u0398\u039f\u03a3\u03bd\u03bf\u03c7")
        buf.write("\u03cf\u03d5\u03d7\u03e1\u03ec\u03ef\u03f9\u0406\u040c")
        buf.write("\u0411\u0416\u041b\u0420\u0425\u042b\u0435\u043d\u0454")
        buf.write("\u045f\u0467\u046c\u046f\u0477\u047d\u0486\u048a\u0490")
        buf.write("\u049d\u04a5\u04ad\u04b4\u04c3\u04cd\u04d3\u04d9\u04e0")
        buf.write("\u04e6\u04e9\u04f4\u04f7\u04f9\u04fe\u0501\u0505\u0509")
        buf.write("\u050c\u0513\u0519\u051e\u0522\u0526\u052c\u053b\u053d")
        buf.write("\u0540\u0544\u054b\u0552\u0556\u055d\u055f\u056b\u0576")
        buf.write("\u057e\u0585\u0588\u0590\u0598\u05a2\u05a6\u05aa\u05ad")
        buf.write("\u05b2\u05bb\u05be\u05c1\u05c9\u05cc\u05ce\u05d1\u05d5")
        buf.write("\u05db\u05e5\u05f1\u05f5\u05f8\u0604\u060f\u0615\u0618")
        buf.write("\u0626\u0629\u062c\u064b\u064e\u0656\u0660\u0663")
        return buf.getvalue()


class milestone_2Parser ( Parser ):

    grammarFileName = "milestone_2.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'IND'", "'IND{>}'", "'IND{=}'", "'`'", 
                     "'='", "'[:'", "'{.'", "'.}'", "'->'", "'shared'", 
                     "'DED'", "'z'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'..'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'x'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'+'", "'*'", 
                     "'-'", "'/'", "'~'", "'&'", "'|'", "'<'", "'>'", "'@'", 
                     "'%'", "'!'", "'^'", "'.'", "':'", "'('", "')'", "'{'", 
                     "'}'", "'['", "']'", "','", "';'", "<INVALID>", "'and'", 
                     "'var'", "'addr'", "'as'", "'asm'", "'bind'", "'block'", 
                     "'break'", "'case'", "'cast'", "'concept'", "'const'", 
                     "'continue'", "'converter'", "'defer'", "'discard'", 
                     "'distinct'", "'div'", "'do'", "'elif'", "'else'", 
                     "'end'", "'enum'", "'except'", "'export'", "'finally'", 
                     "'for'", "'from'", "'func'", "'if'", "'import'", "'in'", 
                     "'include'", "'interface'", "'is'", "'isnot'", "'iterator'", 
                     "'let'", "'macro'", "'method'", "'mixin'", "'mod'", 
                     "'nil'", "'not'", "'notin'", "'object'", "'of'", "'or'", 
                     "'out'", "'proc'", "'ptr'", "'raise'", "'ref'", "'return'", 
                     "'shl'", "'shr'", "'static'", "'template'", "'try'", 
                     "'tuple'", "'type'", "'using'", "'when'", "'while'", 
                     "'xor'", "'yield'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "OP10", "OP9", "OP8", "OP7", "OP6", "OP5", "OP4", 
                      "OP3", "OP2", "OP1", "OP0", "IDENT", "SKIPINDENT", 
                      "INDENT", "SPACE", "MULTILINECOMMENT", "MULTILINEDOCUMENTATION", 
                      "COMMENT", "TRIPLESTR_LIT", "STR_LIT", "CHAR_LIT", 
                      "RSTR_LIT", "GENERALIZED_STR_LIT", "GENERALIZED_TRIPLESTR_LIT", 
                      "EQUALS_OPERATOR", "ADD_OPERATOR", "MUL_OPERATOR", 
                      "MINUS_OPERATOR", "DIV_OPERATOR", "BITWISE_NOT_OPERATOR", 
                      "AND_OPERATOR", "OR_OPERATOR", "LESS_THAN", "GREATER_THAN", 
                      "AT", "MODULUS", "NOT_OPERATOR", "XOR_OPERATOR", "DOT", 
                      "COLON", "OPEN_PAREN", "CLOSE_PAREN", "OPEN_BRACE", 
                      "CLOSE_BRACE", "OPEN_BRACK", "CLOSE_BRACK", "COMMA", 
                      "SEMI_COLON", "KEYW", "AND", "VARIABLE", "ADDR", "AS", 
                      "ASM", "BIND", "BLOCK", "BREAK", "CASE", "CAST", "CONCEPT", 
                      "CONST", "CONTINUE", "CONVERTER", "DEFER", "DISCARD", 
                      "DISTINCT", "DIV", "DO", "ELIF", "ELSE", "END", "ENUM", 
                      "EXCEPT", "EXPORT", "FINALLY", "FOR", "FROM", "FUNC", 
                      "IF", "IMPORT", "IN", "INCLUDE", "INTERFACE", "IS", 
                      "ISNOT", "ITERATOR", "LET", "MACRO", "METHOD", "MIXIN", 
                      "MOD", "NIL", "NOT", "NOTIN", "OBJECT", "OF", "OR", 
                      "OUT", "PROC", "PTR", "RAISE", "REF", "RETURN", "SHL", 
                      "SHR", "STATIC", "TEMPLATE", "TRY", "TUPLE", "TYPE", 
                      "USING", "WHEN", "WHILE", "XOR", "YIELD", "IDENTIFIER", 
                      "DIGIT", "LETTER", "INT_LIT", "HEXDIGIT", "OCTDIGIT", 
                      "BINDIGIT", "HEX_LIT", "DEC_LIT", "OCT_LIT", "BIN_LIT", 
                      "INT8_LIT", "INT16_LIT", "INT32_LIT", "INT64_LIT", 
                      "UINT_LIT", "UINT8_LIT", "UINT16_LIT", "UINT32_LIT", 
                      "UINT64_LIT", "EXP", "FLOAT_LIT", "FLOAT32_SUFFIX", 
                      "FLOAT32_LIT", "FLOAT64_SUFFIX", "FLOAT64_LIT" ]

    RULE_module = 0
    RULE_comma = 1
    RULE_semicolon = 2
    RULE_colon = 3
    RULE_colcom = 4
    RULE_operator = 5
    RULE_prefixOperator = 6
    RULE_optInd = 7
    RULE_optPar = 8
    RULE_simpleExpr = 9
    RULE_arrowExpr = 10
    RULE_assignExpr = 11
    RULE_orExpr = 12
    RULE_andExpr = 13
    RULE_cmpExpr = 14
    RULE_sliceExpr = 15
    RULE_ampExpr = 16
    RULE_plusExpr = 17
    RULE_mulExpr = 18
    RULE_dollarExpr = 19
    RULE_symbol = 20
    RULE_exprColonEqExpr = 21
    RULE_exprList = 22
    RULE_exprColonEqExprList = 23
    RULE_dotExpr = 24
    RULE_explicitGenericInstantiation = 25
    RULE_qualifiedIdent = 26
    RULE_setOrTableConstr = 27
    RULE_castExpr = 28
    RULE_parKeyw = 29
    RULE_par = 30
    RULE_literal = 31
    RULE_generalizedLit = 32
    RULE_identOrLiteral = 33
    RULE_tupleConstr = 34
    RULE_arrayConstr = 35
    RULE_primarySuffix = 36
    RULE_indexExprList = 37
    RULE_indentWithPragma = 38
    RULE_caseExpr = 39
    RULE_typeDescK = 40
    RULE_macroColon = 41
    RULE_moduleName = 42
    RULE_sectionTypeDef = 43
    RULE_sectionConstant = 44
    RULE_sectionVariable = 45
    RULE_exportStmt = 46
    RULE_opr = 47
    RULE_doBlocks = 48
    RULE_p = 49
    RULE_exprColonExpr = 50
    RULE_condExpr = 51
    RULE_ifExpr = 52
    RULE_whenExpr = 53
    RULE_pragma = 54
    RULE_identVis = 55
    RULE_identVisDot = 56
    RULE_identWithPragma = 57
    RULE_identWithPragmaDot = 58
    RULE_declColonEquals = 59
    RULE_identColonEquals = 60
    RULE_inlTupleDecl = 61
    RULE_extTupleDecl = 62
    RULE_tupleClass = 63
    RULE_paramList = 64
    RULE_paramListArrow = 65
    RULE_paramListColon = 66
    RULE_doBlock = 67
    RULE_procExpr = 68
    RULE_distinct = 69
    RULE_forStmt = 70
    RULE_forExpr = 71
    RULE_expr = 72
    RULE_typeKeyw = 73
    RULE_primary = 74
    RULE_typeDesc = 75
    RULE_typeDefAux = 76
    RULE_postExprBlocks = 77
    RULE_exprStmt = 78
    RULE_importStmt = 79
    RULE_includeStmt = 80
    RULE_fromStmt = 81
    RULE_returnStmt = 82
    RULE_raiseStmt = 83
    RULE_yieldStmt = 84
    RULE_discardStmt = 85
    RULE_breakStmt = 86
    RULE_continueStmt = 87
    RULE_condStmt = 88
    RULE_ifStmt = 89
    RULE_whenStmt = 90
    RULE_whileStmt = 91
    RULE_ofBranch = 92
    RULE_ofBranches = 93
    RULE_caseStmt = 94
    RULE_tryStmt = 95
    RULE_tryExpr = 96
    RULE_exceptBlock = 97
    RULE_blockStmt = 98
    RULE_blockExpr = 99
    RULE_staticStmt = 100
    RULE_deferStmt = 101
    RULE_asmStmt = 102
    RULE_genericParam = 103
    RULE_genericParamList = 104
    RULE_pattern = 105
    RULE_indAndComment = 106
    RULE_routine = 107
    RULE_commentStmt = 108
    RULE_sectionp = 109
    RULE_constant = 110
    RULE_enum = 111
    RULE_objectWhen = 112
    RULE_objectBranch = 113
    RULE_objectBranches = 114
    RULE_objectCase = 115
    RULE_objectPart = 116
    RULE_objectX = 117
    RULE_typeClassParam = 118
    RULE_typeClass = 119
    RULE_typeDef = 120
    RULE_varTuple = 121
    RULE_colonBody = 122
    RULE_variable = 123
    RULE_bindStmt = 124
    RULE_mixinStmt = 125
    RULE_pragmaStmt = 126
    RULE_simpleStmt = 127
    RULE_complexOrSimpleStmt = 128
    RULE_stmt = 129
    RULE_start = 130

    ruleNames =  [ "module", "comma", "semicolon", "colon", "colcom", "operator", 
                   "prefixOperator", "optInd", "optPar", "simpleExpr", "arrowExpr", 
                   "assignExpr", "orExpr", "andExpr", "cmpExpr", "sliceExpr", 
                   "ampExpr", "plusExpr", "mulExpr", "dollarExpr", "symbol", 
                   "exprColonEqExpr", "exprList", "exprColonEqExprList", 
                   "dotExpr", "explicitGenericInstantiation", "qualifiedIdent", 
                   "setOrTableConstr", "castExpr", "parKeyw", "par", "literal", 
                   "generalizedLit", "identOrLiteral", "tupleConstr", "arrayConstr", 
                   "primarySuffix", "indexExprList", "indentWithPragma", 
                   "caseExpr", "typeDescK", "macroColon", "moduleName", 
                   "sectionTypeDef", "sectionConstant", "sectionVariable", 
                   "exportStmt", "opr", "doBlocks", "p", "exprColonExpr", 
                   "condExpr", "ifExpr", "whenExpr", "pragma", "identVis", 
                   "identVisDot", "identWithPragma", "identWithPragmaDot", 
                   "declColonEquals", "identColonEquals", "inlTupleDecl", 
                   "extTupleDecl", "tupleClass", "paramList", "paramListArrow", 
                   "paramListColon", "doBlock", "procExpr", "distinct", 
                   "forStmt", "forExpr", "expr", "typeKeyw", "primary", 
                   "typeDesc", "typeDefAux", "postExprBlocks", "exprStmt", 
                   "importStmt", "includeStmt", "fromStmt", "returnStmt", 
                   "raiseStmt", "yieldStmt", "discardStmt", "breakStmt", 
                   "continueStmt", "condStmt", "ifStmt", "whenStmt", "whileStmt", 
                   "ofBranch", "ofBranches", "caseStmt", "tryStmt", "tryExpr", 
                   "exceptBlock", "blockStmt", "blockExpr", "staticStmt", 
                   "deferStmt", "asmStmt", "genericParam", "genericParamList", 
                   "pattern", "indAndComment", "routine", "commentStmt", 
                   "sectionp", "constant", "enum", "objectWhen", "objectBranch", 
                   "objectBranches", "objectCase", "objectPart", "objectX", 
                   "typeClassParam", "typeClass", "typeDef", "varTuple", 
                   "colonBody", "variable", "bindStmt", "mixinStmt", "pragmaStmt", 
                   "simpleStmt", "complexOrSimpleStmt", "stmt", "start" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    OP10=12
    OP9=13
    OP8=14
    OP7=15
    OP6=16
    OP5=17
    OP4=18
    OP3=19
    OP2=20
    OP1=21
    OP0=22
    IDENT=23
    SKIPINDENT=24
    INDENT=25
    SPACE=26
    MULTILINECOMMENT=27
    MULTILINEDOCUMENTATION=28
    COMMENT=29
    TRIPLESTR_LIT=30
    STR_LIT=31
    CHAR_LIT=32
    RSTR_LIT=33
    GENERALIZED_STR_LIT=34
    GENERALIZED_TRIPLESTR_LIT=35
    EQUALS_OPERATOR=36
    ADD_OPERATOR=37
    MUL_OPERATOR=38
    MINUS_OPERATOR=39
    DIV_OPERATOR=40
    BITWISE_NOT_OPERATOR=41
    AND_OPERATOR=42
    OR_OPERATOR=43
    LESS_THAN=44
    GREATER_THAN=45
    AT=46
    MODULUS=47
    NOT_OPERATOR=48
    XOR_OPERATOR=49
    DOT=50
    COLON=51
    OPEN_PAREN=52
    CLOSE_PAREN=53
    OPEN_BRACE=54
    CLOSE_BRACE=55
    OPEN_BRACK=56
    CLOSE_BRACK=57
    COMMA=58
    SEMI_COLON=59
    KEYW=60
    AND=61
    VARIABLE=62
    ADDR=63
    AS=64
    ASM=65
    BIND=66
    BLOCK=67
    BREAK=68
    CASE=69
    CAST=70
    CONCEPT=71
    CONST=72
    CONTINUE=73
    CONVERTER=74
    DEFER=75
    DISCARD=76
    DISTINCT=77
    DIV=78
    DO=79
    ELIF=80
    ELSE=81
    END=82
    ENUM=83
    EXCEPT=84
    EXPORT=85
    FINALLY=86
    FOR=87
    FROM=88
    FUNC=89
    IF=90
    IMPORT=91
    IN=92
    INCLUDE=93
    INTERFACE=94
    IS=95
    ISNOT=96
    ITERATOR=97
    LET=98
    MACRO=99
    METHOD=100
    MIXIN=101
    MOD=102
    NIL=103
    NOT=104
    NOTIN=105
    OBJECT=106
    OF=107
    OR=108
    OUT=109
    PROC=110
    PTR=111
    RAISE=112
    REF=113
    RETURN=114
    SHL=115
    SHR=116
    STATIC=117
    TEMPLATE=118
    TRY=119
    TUPLE=120
    TYPE=121
    USING=122
    WHEN=123
    WHILE=124
    XOR=125
    YIELD=126
    IDENTIFIER=127
    DIGIT=128
    LETTER=129
    INT_LIT=130
    HEXDIGIT=131
    OCTDIGIT=132
    BINDIGIT=133
    HEX_LIT=134
    DEC_LIT=135
    OCT_LIT=136
    BIN_LIT=137
    INT8_LIT=138
    INT16_LIT=139
    INT32_LIT=140
    INT64_LIT=141
    UINT_LIT=142
    UINT8_LIT=143
    UINT16_LIT=144
    UINT32_LIT=145
    UINT64_LIT=146
    EXP=147
    FLOAT_LIT=148
    FLOAT32_SUFFIX=149
    FLOAT32_LIT=150
    FLOAT64_SUFFIX=151
    FLOAT64_LIT=152

    def __init__(self, input:TokenStream):
        super().__init__(input)
        self.checkVersion("4.5.3")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    class ModuleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal(self):
            return self.getTypedRuleContext(milestone_2Parser.LiteralContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_module

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModule" ):
                listener.enterModule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModule" ):
                listener.exitModule(self)




    def module(self):

        localctx = milestone_2Parser.ModuleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_module)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 262
            self.literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CommaContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMENT(self):
            return self.getToken(milestone_2Parser.COMMENT, 0)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_comma

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComma" ):
                listener.enterComma(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComma" ):
                listener.exitComma(self)




    def comma(self):

        localctx = milestone_2Parser.CommaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_comma)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 264
            self.match(milestone_2Parser.COMMA)
            self.state = 266
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.state = 265
                self.match(milestone_2Parser.COMMENT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SemicolonContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMENT(self):
            return self.getToken(milestone_2Parser.COMMENT, 0)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_semicolon

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSemicolon" ):
                listener.enterSemicolon(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSemicolon" ):
                listener.exitSemicolon(self)




    def semicolon(self):

        localctx = milestone_2Parser.SemicolonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_semicolon)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 268
            self.match(milestone_2Parser.SEMI_COLON)
            self.state = 270
            _la = self._input.LA(1)
            if _la==milestone_2Parser.COMMENT:
                self.state = 269
                self.match(milestone_2Parser.COMMENT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ColonContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMENT(self):
            return self.getToken(milestone_2Parser.COMMENT, 0)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_colon

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColon" ):
                listener.enterColon(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColon" ):
                listener.exitColon(self)




    def colon(self):

        localctx = milestone_2Parser.ColonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_colon)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 272
            self.match(milestone_2Parser.COLON)
            self.state = 274
            _la = self._input.LA(1)
            if _la==milestone_2Parser.COMMENT:
                self.state = 273
                self.match(milestone_2Parser.COMMENT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ColcomContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMENT(self):
            return self.getToken(milestone_2Parser.COMMENT, 0)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_colcom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColcom" ):
                listener.enterColcom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColcom" ):
                listener.exitColcom(self)




    def colcom(self):

        localctx = milestone_2Parser.ColcomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_colcom)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 276
            self.match(milestone_2Parser.COLON)
            self.state = 278
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.state = 277
                self.match(milestone_2Parser.COMMENT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP0(self):
            return self.getToken(milestone_2Parser.OP0, 0)

        def OP1(self):
            return self.getToken(milestone_2Parser.OP1, 0)

        def OP2(self):
            return self.getToken(milestone_2Parser.OP2, 0)

        def OP3(self):
            return self.getToken(milestone_2Parser.OP3, 0)

        def OP4(self):
            return self.getToken(milestone_2Parser.OP4, 0)

        def OP5(self):
            return self.getToken(milestone_2Parser.OP5, 0)

        def OP6(self):
            return self.getToken(milestone_2Parser.OP6, 0)

        def OP7(self):
            return self.getToken(milestone_2Parser.OP7, 0)

        def OP8(self):
            return self.getToken(milestone_2Parser.OP8, 0)

        def OP9(self):
            return self.getToken(milestone_2Parser.OP9, 0)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperator" ):
                listener.enterOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperator" ):
                listener.exitOperator(self)




    def operator(self):

        localctx = milestone_2Parser.OperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 280
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << milestone_2Parser.OP9) | (1 << milestone_2Parser.OP8) | (1 << milestone_2Parser.OP7) | (1 << milestone_2Parser.OP6) | (1 << milestone_2Parser.OP5) | (1 << milestone_2Parser.OP4) | (1 << milestone_2Parser.OP3) | (1 << milestone_2Parser.OP2) | (1 << milestone_2Parser.OP1) | (1 << milestone_2Parser.OP0) | (1 << milestone_2Parser.AND))) != 0) or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & ((1 << (milestone_2Parser.DIV - 78)) | (1 << (milestone_2Parser.IN - 78)) | (1 << (milestone_2Parser.IS - 78)) | (1 << (milestone_2Parser.ISNOT - 78)) | (1 << (milestone_2Parser.MOD - 78)) | (1 << (milestone_2Parser.NOT - 78)) | (1 << (milestone_2Parser.NOTIN - 78)) | (1 << (milestone_2Parser.OF - 78)) | (1 << (milestone_2Parser.OR - 78)) | (1 << (milestone_2Parser.SHL - 78)) | (1 << (milestone_2Parser.SHR - 78)) | (1 << (milestone_2Parser.STATIC - 78)) | (1 << (milestone_2Parser.XOR - 78)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrefixOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def operator(self):
            return self.getTypedRuleContext(milestone_2Parser.OperatorContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_prefixOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrefixOperator" ):
                listener.enterPrefixOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrefixOperator" ):
                listener.exitPrefixOperator(self)




    def prefixOperator(self):

        localctx = milestone_2Parser.PrefixOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_prefixOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 282
            self.operator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OptIndContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMENT(self):
            return self.getToken(milestone_2Parser.COMMENT, 0)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_optInd

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptInd" ):
                listener.enterOptInd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptInd" ):
                listener.exitOptInd(self)




    def optInd(self):

        localctx = milestone_2Parser.OptIndContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_optInd)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 285
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                self.state = 284
                self.match(milestone_2Parser.COMMENT)


            self.state = 288
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.state = 287
                self.match(milestone_2Parser.T__0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OptParContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return milestone_2Parser.RULE_optPar

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptPar" ):
                listener.enterOptPar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptPar" ):
                listener.exitOptPar(self)




    def optPar(self):

        localctx = milestone_2Parser.OptParContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_optPar)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 291
            _la = self._input.LA(1)
            if _la==milestone_2Parser.T__1 or _la==milestone_2Parser.T__2:
                self.state = 290
                _la = self._input.LA(1)
                if not(_la==milestone_2Parser.T__1 or _la==milestone_2Parser.T__2):
                    self._errHandler.recoverInline(self)
                else:
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SimpleExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arrowExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ArrowExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ArrowExprContext,i)


        def OP0(self, i:int=None):
            if i is None:
                return self.getTokens(milestone_2Parser.OP0)
            else:
                return self.getToken(milestone_2Parser.OP0, i)

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.OptIndContext,i)


        def pragma(self):
            return self.getTypedRuleContext(milestone_2Parser.PragmaContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_simpleExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleExpr" ):
                listener.enterSimpleExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleExpr" ):
                listener.exitSimpleExpr(self)




    def simpleExpr(self):

        localctx = milestone_2Parser.SimpleExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_simpleExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 293
            self.arrowExpr()
            self.state = 300
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,7,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 294
                    self.match(milestone_2Parser.OP0)
                    self.state = 295
                    self.optInd()
                    self.state = 296
                    self.arrowExpr() 
                self.state = 302
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,7,self._ctx)

            self.state = 304
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.state = 303
                self.pragma()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArrowExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.AssignExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.AssignExprContext,i)


        def OP1(self, i:int=None):
            if i is None:
                return self.getTokens(milestone_2Parser.OP1)
            else:
                return self.getToken(milestone_2Parser.OP1, i)

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.OptIndContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_arrowExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrowExpr" ):
                listener.enterArrowExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrowExpr" ):
                listener.exitArrowExpr(self)




    def arrowExpr(self):

        localctx = milestone_2Parser.ArrowExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_arrowExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 306
            self.assignExpr()
            self.state = 313
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,9,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 307
                    self.match(milestone_2Parser.OP1)
                    self.state = 308
                    self.optInd()
                    self.state = 309
                    self.assignExpr() 
                self.state = 315
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,9,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def orExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.OrExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.OrExprContext,i)


        def OP2(self, i:int=None):
            if i is None:
                return self.getTokens(milestone_2Parser.OP2)
            else:
                return self.getToken(milestone_2Parser.OP2, i)

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.OptIndContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_assignExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignExpr" ):
                listener.enterAssignExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignExpr" ):
                listener.exitAssignExpr(self)




    def assignExpr(self):

        localctx = milestone_2Parser.AssignExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_assignExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 316
            self.orExpr()
            self.state = 323
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,10,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 317
                    self.match(milestone_2Parser.OP2)
                    self.state = 318
                    self.optInd()
                    self.state = 319
                    self.orExpr() 
                self.state = 325
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,10,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OrExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def andExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.AndExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.AndExprContext,i)


        def OP3(self, i:int=None):
            if i is None:
                return self.getTokens(milestone_2Parser.OP3)
            else:
                return self.getToken(milestone_2Parser.OP3, i)

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.OptIndContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_orExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrExpr" ):
                listener.enterOrExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrExpr" ):
                listener.exitOrExpr(self)




    def orExpr(self):

        localctx = milestone_2Parser.OrExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_orExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 326
            self.andExpr()
            self.state = 333
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,11,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 327
                    self.match(milestone_2Parser.OP3)
                    self.state = 328
                    self.optInd()
                    self.state = 329
                    self.andExpr() 
                self.state = 335
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,11,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AndExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cmpExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.CmpExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.CmpExprContext,i)


        def OP4(self, i:int=None):
            if i is None:
                return self.getTokens(milestone_2Parser.OP4)
            else:
                return self.getToken(milestone_2Parser.OP4, i)

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.OptIndContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_andExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAndExpr" ):
                listener.enterAndExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAndExpr" ):
                listener.exitAndExpr(self)




    def andExpr(self):

        localctx = milestone_2Parser.AndExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_andExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 336
            self.cmpExpr()
            self.state = 343
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,12,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 337
                    self.match(milestone_2Parser.OP4)
                    self.state = 338
                    self.optInd()
                    self.state = 339
                    self.cmpExpr() 
                self.state = 345
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,12,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CmpExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sliceExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.SliceExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.SliceExprContext,i)


        def OP5(self, i:int=None):
            if i is None:
                return self.getTokens(milestone_2Parser.OP5)
            else:
                return self.getToken(milestone_2Parser.OP5, i)

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.OptIndContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_cmpExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmpExpr" ):
                listener.enterCmpExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmpExpr" ):
                listener.exitCmpExpr(self)




    def cmpExpr(self):

        localctx = milestone_2Parser.CmpExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_cmpExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 346
            self.sliceExpr()
            self.state = 353
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,13,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 347
                    self.match(milestone_2Parser.OP5)
                    self.state = 348
                    self.optInd()
                    self.state = 349
                    self.sliceExpr() 
                self.state = 355
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,13,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SliceExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ampExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.AmpExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.AmpExprContext,i)


        def OP6(self, i:int=None):
            if i is None:
                return self.getTokens(milestone_2Parser.OP6)
            else:
                return self.getToken(milestone_2Parser.OP6, i)

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.OptIndContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_sliceExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSliceExpr" ):
                listener.enterSliceExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSliceExpr" ):
                listener.exitSliceExpr(self)




    def sliceExpr(self):

        localctx = milestone_2Parser.SliceExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_sliceExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 356
            self.ampExpr()
            self.state = 363
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,14,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 357
                    self.match(milestone_2Parser.OP6)
                    self.state = 358
                    self.optInd()
                    self.state = 359
                    self.ampExpr() 
                self.state = 365
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,14,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AmpExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def plusExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.PlusExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.PlusExprContext,i)


        def OP7(self, i:int=None):
            if i is None:
                return self.getTokens(milestone_2Parser.OP7)
            else:
                return self.getToken(milestone_2Parser.OP7, i)

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.OptIndContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_ampExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAmpExpr" ):
                listener.enterAmpExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAmpExpr" ):
                listener.exitAmpExpr(self)




    def ampExpr(self):

        localctx = milestone_2Parser.AmpExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_ampExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 366
            self.plusExpr()
            self.state = 373
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,15,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 367
                    self.match(milestone_2Parser.OP7)
                    self.state = 368
                    self.optInd()
                    self.state = 369
                    self.plusExpr() 
                self.state = 375
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,15,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PlusExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mulExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.MulExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.MulExprContext,i)


        def OP8(self, i:int=None):
            if i is None:
                return self.getTokens(milestone_2Parser.OP8)
            else:
                return self.getToken(milestone_2Parser.OP8, i)

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.OptIndContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_plusExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlusExpr" ):
                listener.enterPlusExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlusExpr" ):
                listener.exitPlusExpr(self)




    def plusExpr(self):

        localctx = milestone_2Parser.PlusExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_plusExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 376
            self.mulExpr()
            self.state = 383
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,16,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 377
                    self.match(milestone_2Parser.OP8)
                    self.state = 378
                    self.optInd()
                    self.state = 379
                    self.mulExpr() 
                self.state = 385
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,16,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MulExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dollarExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.DollarExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.DollarExprContext,i)


        def OP9(self, i:int=None):
            if i is None:
                return self.getTokens(milestone_2Parser.OP9)
            else:
                return self.getToken(milestone_2Parser.OP9, i)

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.OptIndContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_mulExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMulExpr" ):
                listener.enterMulExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMulExpr" ):
                listener.exitMulExpr(self)




    def mulExpr(self):

        localctx = milestone_2Parser.MulExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_mulExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 386
            self.dollarExpr()
            self.state = 393
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,17,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 387
                    self.match(milestone_2Parser.OP9)
                    self.state = 388
                    self.optInd()
                    self.state = 389
                    self.dollarExpr() 
                self.state = 395
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,17,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DollarExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primary(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.PrimaryContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.PrimaryContext,i)


        def OP10(self, i:int=None):
            if i is None:
                return self.getTokens(milestone_2Parser.OP10)
            else:
                return self.getToken(milestone_2Parser.OP10, i)

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.OptIndContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_dollarExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDollarExpr" ):
                listener.enterDollarExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDollarExpr" ):
                listener.exitDollarExpr(self)




    def dollarExpr(self):

        localctx = milestone_2Parser.DollarExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_dollarExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 396
            self.primary()
            self.state = 403
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,18,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 397
                    self.match(milestone_2Parser.OP10)
                    self.state = 398
                    self.optInd()
                    self.state = 399
                    self.primary() 
                self.state = 405
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,18,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SymbolContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KEYW(self, i:int=None):
            if i is None:
                return self.getTokens(milestone_2Parser.KEYW)
            else:
                return self.getToken(milestone_2Parser.KEYW, i)

        def IDENT(self, i:int=None):
            if i is None:
                return self.getTokens(milestone_2Parser.IDENT)
            else:
                return self.getToken(milestone_2Parser.IDENT, i)

        def literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.LiteralContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.LiteralContext,i)


        def operator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.OperatorContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.OperatorContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_symbol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSymbol" ):
                listener.enterSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSymbol" ):
                listener.exitSymbol(self)




    def symbol(self):

        localctx = milestone_2Parser.SymbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_symbol)
        self._la = 0 # Token type
        try:
            self.state = 429
            token = self._input.LA(1)
            if token in [milestone_2Parser.T__3]:
                self.enterOuterAlt(localctx, 1)
                self.state = 406
                self.match(milestone_2Parser.T__3)
                self.state = 422 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 422
                    token = self._input.LA(1)
                    if token in [milestone_2Parser.KEYW]:
                        self.state = 407
                        self.match(milestone_2Parser.KEYW)

                    elif token in [milestone_2Parser.IDENT]:
                        self.state = 408
                        self.match(milestone_2Parser.IDENT)

                    elif token in [milestone_2Parser.TRIPLESTR_LIT, milestone_2Parser.STR_LIT, milestone_2Parser.CHAR_LIT, milestone_2Parser.RSTR_LIT, milestone_2Parser.NIL, milestone_2Parser.INT_LIT, milestone_2Parser.INT8_LIT, milestone_2Parser.INT16_LIT, milestone_2Parser.INT32_LIT, milestone_2Parser.INT64_LIT, milestone_2Parser.UINT_LIT, milestone_2Parser.UINT8_LIT, milestone_2Parser.UINT16_LIT, milestone_2Parser.UINT32_LIT, milestone_2Parser.UINT64_LIT, milestone_2Parser.FLOAT_LIT, milestone_2Parser.FLOAT32_LIT, milestone_2Parser.FLOAT64_LIT]:
                        self.state = 409
                        self.literal()

                    elif token in [milestone_2Parser.T__4, milestone_2Parser.OP9, milestone_2Parser.OP8, milestone_2Parser.OP7, milestone_2Parser.OP6, milestone_2Parser.OP5, milestone_2Parser.OP4, milestone_2Parser.OP3, milestone_2Parser.OP2, milestone_2Parser.OP1, milestone_2Parser.OP0, milestone_2Parser.OPEN_PAREN, milestone_2Parser.CLOSE_PAREN, milestone_2Parser.OPEN_BRACE, milestone_2Parser.CLOSE_BRACE, milestone_2Parser.OPEN_BRACK, milestone_2Parser.CLOSE_BRACK, milestone_2Parser.AND, milestone_2Parser.DIV, milestone_2Parser.IN, milestone_2Parser.IS, milestone_2Parser.ISNOT, milestone_2Parser.MOD, milestone_2Parser.NOT, milestone_2Parser.NOTIN, milestone_2Parser.OF, milestone_2Parser.OR, milestone_2Parser.SHL, milestone_2Parser.SHR, milestone_2Parser.STATIC, milestone_2Parser.XOR]:
                        self.state = 418 
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 418
                                token = self._input.LA(1)
                                if token in [milestone_2Parser.OP9, milestone_2Parser.OP8, milestone_2Parser.OP7, milestone_2Parser.OP6, milestone_2Parser.OP5, milestone_2Parser.OP4, milestone_2Parser.OP3, milestone_2Parser.OP2, milestone_2Parser.OP1, milestone_2Parser.OP0, milestone_2Parser.AND, milestone_2Parser.DIV, milestone_2Parser.IN, milestone_2Parser.IS, milestone_2Parser.ISNOT, milestone_2Parser.MOD, milestone_2Parser.NOT, milestone_2Parser.NOTIN, milestone_2Parser.OF, milestone_2Parser.OR, milestone_2Parser.SHL, milestone_2Parser.SHR, milestone_2Parser.STATIC, milestone_2Parser.XOR]:
                                    self.state = 410
                                    self.operator()

                                elif token in [milestone_2Parser.OPEN_PAREN]:
                                    self.state = 411
                                    self.match(milestone_2Parser.OPEN_PAREN)

                                elif token in [milestone_2Parser.CLOSE_PAREN]:
                                    self.state = 412
                                    self.match(milestone_2Parser.CLOSE_PAREN)

                                elif token in [milestone_2Parser.OPEN_BRACK]:
                                    self.state = 413
                                    self.match(milestone_2Parser.OPEN_BRACK)

                                elif token in [milestone_2Parser.CLOSE_BRACK]:
                                    self.state = 414
                                    self.match(milestone_2Parser.CLOSE_BRACK)

                                elif token in [milestone_2Parser.OPEN_BRACE]:
                                    self.state = 415
                                    self.match(milestone_2Parser.OPEN_BRACE)

                                elif token in [milestone_2Parser.CLOSE_BRACE]:
                                    self.state = 416
                                    self.match(milestone_2Parser.CLOSE_BRACE)

                                elif token in [milestone_2Parser.T__4]:
                                    self.state = 417
                                    self.match(milestone_2Parser.T__4)

                                else:
                                    raise NoViableAltException(self)


                            else:
                                raise NoViableAltException(self)
                            self.state = 420 
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,20,self._ctx)


                    else:
                        raise NoViableAltException(self)

                    self.state = 424 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << milestone_2Parser.T__4) | (1 << milestone_2Parser.OP9) | (1 << milestone_2Parser.OP8) | (1 << milestone_2Parser.OP7) | (1 << milestone_2Parser.OP6) | (1 << milestone_2Parser.OP5) | (1 << milestone_2Parser.OP4) | (1 << milestone_2Parser.OP3) | (1 << milestone_2Parser.OP2) | (1 << milestone_2Parser.OP1) | (1 << milestone_2Parser.OP0) | (1 << milestone_2Parser.IDENT) | (1 << milestone_2Parser.TRIPLESTR_LIT) | (1 << milestone_2Parser.STR_LIT) | (1 << milestone_2Parser.CHAR_LIT) | (1 << milestone_2Parser.RSTR_LIT) | (1 << milestone_2Parser.OPEN_PAREN) | (1 << milestone_2Parser.CLOSE_PAREN) | (1 << milestone_2Parser.OPEN_BRACE) | (1 << milestone_2Parser.CLOSE_BRACE) | (1 << milestone_2Parser.OPEN_BRACK) | (1 << milestone_2Parser.CLOSE_BRACK) | (1 << milestone_2Parser.KEYW) | (1 << milestone_2Parser.AND))) != 0) or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & ((1 << (milestone_2Parser.DIV - 78)) | (1 << (milestone_2Parser.IN - 78)) | (1 << (milestone_2Parser.IS - 78)) | (1 << (milestone_2Parser.ISNOT - 78)) | (1 << (milestone_2Parser.MOD - 78)) | (1 << (milestone_2Parser.NIL - 78)) | (1 << (milestone_2Parser.NOT - 78)) | (1 << (milestone_2Parser.NOTIN - 78)) | (1 << (milestone_2Parser.OF - 78)) | (1 << (milestone_2Parser.OR - 78)) | (1 << (milestone_2Parser.SHL - 78)) | (1 << (milestone_2Parser.SHR - 78)) | (1 << (milestone_2Parser.STATIC - 78)) | (1 << (milestone_2Parser.XOR - 78)) | (1 << (milestone_2Parser.INT_LIT - 78)) | (1 << (milestone_2Parser.INT8_LIT - 78)) | (1 << (milestone_2Parser.INT16_LIT - 78)) | (1 << (milestone_2Parser.INT32_LIT - 78)) | (1 << (milestone_2Parser.INT64_LIT - 78)))) != 0) or ((((_la - 142)) & ~0x3f) == 0 and ((1 << (_la - 142)) & ((1 << (milestone_2Parser.UINT_LIT - 142)) | (1 << (milestone_2Parser.UINT8_LIT - 142)) | (1 << (milestone_2Parser.UINT16_LIT - 142)) | (1 << (milestone_2Parser.UINT32_LIT - 142)) | (1 << (milestone_2Parser.UINT64_LIT - 142)) | (1 << (milestone_2Parser.FLOAT_LIT - 142)) | (1 << (milestone_2Parser.FLOAT32_LIT - 142)) | (1 << (milestone_2Parser.FLOAT64_LIT - 142)))) != 0)):
                        break

                self.state = 426
                self.match(milestone_2Parser.T__3)

            elif token in [milestone_2Parser.IDENT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 427
                self.match(milestone_2Parser.IDENT)

            elif token in [milestone_2Parser.KEYW]:
                self.enterOuterAlt(localctx, 3)
                self.state = 428
                self.match(milestone_2Parser.KEYW)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExprColonEqExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ExprContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_exprColonEqExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprColonEqExpr" ):
                listener.enterExprColonEqExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprColonEqExpr" ):
                listener.exitExprColonEqExpr(self)




    def exprColonEqExpr(self):

        localctx = milestone_2Parser.ExprColonEqExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_exprColonEqExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 431
            self.expr()
            self.state = 435
            token = self._input.LA(1)
            if token in [milestone_2Parser.COLON]:
                self.state = 432
                self.match(milestone_2Parser.COLON)
                pass
            elif token in [milestone_2Parser.T__4]:
                self.state = 433
                self.match(milestone_2Parser.T__4)
                self.state = 434
                self.expr()
                pass
            elif token in [milestone_2Parser.EOF, milestone_2Parser.T__1, milestone_2Parser.T__2, milestone_2Parser.T__3, milestone_2Parser.T__9, milestone_2Parser.OP9, milestone_2Parser.OP8, milestone_2Parser.OP7, milestone_2Parser.OP6, milestone_2Parser.OP5, milestone_2Parser.OP4, milestone_2Parser.OP3, milestone_2Parser.OP2, milestone_2Parser.OP1, milestone_2Parser.OP0, milestone_2Parser.IDENT, milestone_2Parser.TRIPLESTR_LIT, milestone_2Parser.STR_LIT, milestone_2Parser.CHAR_LIT, milestone_2Parser.RSTR_LIT, milestone_2Parser.GENERALIZED_STR_LIT, milestone_2Parser.GENERALIZED_TRIPLESTR_LIT, milestone_2Parser.OPEN_PAREN, milestone_2Parser.CLOSE_PAREN, milestone_2Parser.OPEN_BRACE, milestone_2Parser.OPEN_BRACK, milestone_2Parser.CLOSE_BRACK, milestone_2Parser.COMMA, milestone_2Parser.KEYW, milestone_2Parser.AND, milestone_2Parser.VARIABLE, milestone_2Parser.BIND, milestone_2Parser.BLOCK, milestone_2Parser.CAST, milestone_2Parser.DISTINCT, milestone_2Parser.DIV, milestone_2Parser.ENUM, milestone_2Parser.FOR, milestone_2Parser.IF, milestone_2Parser.IN, milestone_2Parser.IS, milestone_2Parser.ISNOT, milestone_2Parser.ITERATOR, milestone_2Parser.MOD, milestone_2Parser.NIL, milestone_2Parser.NOT, milestone_2Parser.NOTIN, milestone_2Parser.OBJECT, milestone_2Parser.OF, milestone_2Parser.OR, milestone_2Parser.OUT, milestone_2Parser.PROC, milestone_2Parser.PTR, milestone_2Parser.REF, milestone_2Parser.SHL, milestone_2Parser.SHR, milestone_2Parser.STATIC, milestone_2Parser.TRY, milestone_2Parser.TUPLE, milestone_2Parser.WHEN, milestone_2Parser.XOR, milestone_2Parser.INT_LIT, milestone_2Parser.INT8_LIT, milestone_2Parser.INT16_LIT, milestone_2Parser.INT32_LIT, milestone_2Parser.INT64_LIT, milestone_2Parser.UINT_LIT, milestone_2Parser.UINT8_LIT, milestone_2Parser.UINT16_LIT, milestone_2Parser.UINT32_LIT, milestone_2Parser.UINT64_LIT, milestone_2Parser.FLOAT_LIT, milestone_2Parser.FLOAT32_LIT, milestone_2Parser.FLOAT64_LIT]:
                pass
            else:
                raise NoViableAltException(self)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExprListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ExprContext,i)


        def comma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.CommaContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.CommaContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_exprList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprList" ):
                listener.enterExprList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprList" ):
                listener.exitExprList(self)




    def exprList(self):

        localctx = milestone_2Parser.ExprListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_exprList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 437
            self.expr()
            self.state = 443
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==milestone_2Parser.COMMA:
                self.state = 438
                self.comma()
                self.state = 439
                self.expr()
                self.state = 445
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExprColonEqExprListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exprColonEqExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ExprColonEqExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ExprColonEqExprContext,i)


        def comma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.CommaContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.CommaContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_exprColonEqExprList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprColonEqExprList" ):
                listener.enterExprColonEqExprList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprColonEqExprList" ):
                listener.exitExprColonEqExprList(self)




    def exprColonEqExprList(self):

        localctx = milestone_2Parser.ExprColonEqExprListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_exprColonEqExprList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 446
            self.exprColonEqExpr()
            self.state = 452
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,26,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 447
                    self.comma()
                    self.state = 448
                    self.exprColonEqExpr() 
                self.state = 454
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,26,self._ctx)

            self.state = 456
            _la = self._input.LA(1)
            if _la==milestone_2Parser.COMMA:
                self.state = 455
                self.comma()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DotExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(milestone_2Parser.ExprContext,0)


        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def symbol(self):
            return self.getTypedRuleContext(milestone_2Parser.SymbolContext,0)


        def exprList(self):
            return self.getTypedRuleContext(milestone_2Parser.ExprListContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_dotExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotExpr" ):
                listener.enterDotExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotExpr" ):
                listener.exitDotExpr(self)




    def dotExpr(self):

        localctx = milestone_2Parser.DotExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_dotExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 458
            self.expr()
            self.state = 459
            self.match(milestone_2Parser.DOT)
            self.state = 460
            self.optInd()
            self.state = 466
            token = self._input.LA(1)
            if token in [milestone_2Parser.T__3, milestone_2Parser.IDENT, milestone_2Parser.KEYW]:
                self.state = 461
                self.symbol()

            elif token in [milestone_2Parser.T__5]:
                self.state = 462
                self.match(milestone_2Parser.T__5)
                self.state = 463
                self.exprList()
                self.state = 464
                self.match(milestone_2Parser.CLOSE_BRACK)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExplicitGenericInstantiationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exprList(self):
            return self.getTypedRuleContext(milestone_2Parser.ExprListContext,0)


        def exprColonEqExpr(self):
            return self.getTypedRuleContext(milestone_2Parser.ExprColonEqExprContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_explicitGenericInstantiation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicitGenericInstantiation" ):
                listener.enterExplicitGenericInstantiation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicitGenericInstantiation" ):
                listener.exitExplicitGenericInstantiation(self)




    def explicitGenericInstantiation(self):

        localctx = milestone_2Parser.ExplicitGenericInstantiationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_explicitGenericInstantiation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 468
            self.match(milestone_2Parser.T__5)
            self.state = 469
            self.exprList()
            self.state = 470
            self.match(milestone_2Parser.CLOSE_BRACK)
            self.state = 475
            _la = self._input.LA(1)
            if _la==milestone_2Parser.OPEN_PAREN:
                self.state = 471
                self.match(milestone_2Parser.OPEN_PAREN)
                self.state = 472
                self.exprColonEqExpr()
                self.state = 473
                self.match(milestone_2Parser.CLOSE_PAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QualifiedIdentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.SymbolContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.SymbolContext,i)


        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_qualifiedIdent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedIdent" ):
                listener.enterQualifiedIdent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedIdent" ):
                listener.exitQualifiedIdent(self)




    def qualifiedIdent(self):

        localctx = milestone_2Parser.QualifiedIdentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_qualifiedIdent)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 477
            self.symbol()
            self.state = 482
            _la = self._input.LA(1)
            if _la==milestone_2Parser.DOT:
                self.state = 478
                self.match(milestone_2Parser.DOT)
                self.state = 479
                self.optInd()
                self.state = 480
                self.symbol()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SetOrTableConstrContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exprColonEqExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ExprColonEqExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ExprColonEqExprContext,i)


        def comma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.CommaContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.CommaContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_setOrTableConstr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetOrTableConstr" ):
                listener.enterSetOrTableConstr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetOrTableConstr" ):
                listener.exitSetOrTableConstr(self)




    def setOrTableConstr(self):

        localctx = milestone_2Parser.SetOrTableConstrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_setOrTableConstr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 484
            self.match(milestone_2Parser.OPEN_BRACE)
            self.state = 494
            token = self._input.LA(1)
            if token in [milestone_2Parser.T__3, milestone_2Parser.T__9, milestone_2Parser.OP9, milestone_2Parser.OP8, milestone_2Parser.OP7, milestone_2Parser.OP6, milestone_2Parser.OP5, milestone_2Parser.OP4, milestone_2Parser.OP3, milestone_2Parser.OP2, milestone_2Parser.OP1, milestone_2Parser.OP0, milestone_2Parser.IDENT, milestone_2Parser.TRIPLESTR_LIT, milestone_2Parser.STR_LIT, milestone_2Parser.CHAR_LIT, milestone_2Parser.RSTR_LIT, milestone_2Parser.GENERALIZED_STR_LIT, milestone_2Parser.GENERALIZED_TRIPLESTR_LIT, milestone_2Parser.OPEN_PAREN, milestone_2Parser.OPEN_BRACE, milestone_2Parser.CLOSE_BRACE, milestone_2Parser.OPEN_BRACK, milestone_2Parser.KEYW, milestone_2Parser.AND, milestone_2Parser.VARIABLE, milestone_2Parser.BIND, milestone_2Parser.BLOCK, milestone_2Parser.CAST, milestone_2Parser.DISTINCT, milestone_2Parser.DIV, milestone_2Parser.ENUM, milestone_2Parser.FOR, milestone_2Parser.IF, milestone_2Parser.IN, milestone_2Parser.IS, milestone_2Parser.ISNOT, milestone_2Parser.ITERATOR, milestone_2Parser.MOD, milestone_2Parser.NIL, milestone_2Parser.NOT, milestone_2Parser.NOTIN, milestone_2Parser.OBJECT, milestone_2Parser.OF, milestone_2Parser.OR, milestone_2Parser.OUT, milestone_2Parser.PROC, milestone_2Parser.PTR, milestone_2Parser.REF, milestone_2Parser.SHL, milestone_2Parser.SHR, milestone_2Parser.STATIC, milestone_2Parser.TRY, milestone_2Parser.TUPLE, milestone_2Parser.WHEN, milestone_2Parser.XOR, milestone_2Parser.INT_LIT, milestone_2Parser.INT8_LIT, milestone_2Parser.INT16_LIT, milestone_2Parser.INT32_LIT, milestone_2Parser.INT64_LIT, milestone_2Parser.UINT_LIT, milestone_2Parser.UINT8_LIT, milestone_2Parser.UINT16_LIT, milestone_2Parser.UINT32_LIT, milestone_2Parser.UINT64_LIT, milestone_2Parser.FLOAT_LIT, milestone_2Parser.FLOAT32_LIT, milestone_2Parser.FLOAT64_LIT]:
                self.state = 490
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << milestone_2Parser.T__3) | (1 << milestone_2Parser.T__9) | (1 << milestone_2Parser.OP9) | (1 << milestone_2Parser.OP8) | (1 << milestone_2Parser.OP7) | (1 << milestone_2Parser.OP6) | (1 << milestone_2Parser.OP5) | (1 << milestone_2Parser.OP4) | (1 << milestone_2Parser.OP3) | (1 << milestone_2Parser.OP2) | (1 << milestone_2Parser.OP1) | (1 << milestone_2Parser.OP0) | (1 << milestone_2Parser.IDENT) | (1 << milestone_2Parser.TRIPLESTR_LIT) | (1 << milestone_2Parser.STR_LIT) | (1 << milestone_2Parser.CHAR_LIT) | (1 << milestone_2Parser.RSTR_LIT) | (1 << milestone_2Parser.GENERALIZED_STR_LIT) | (1 << milestone_2Parser.GENERALIZED_TRIPLESTR_LIT) | (1 << milestone_2Parser.OPEN_PAREN) | (1 << milestone_2Parser.OPEN_BRACE) | (1 << milestone_2Parser.OPEN_BRACK) | (1 << milestone_2Parser.KEYW) | (1 << milestone_2Parser.AND) | (1 << milestone_2Parser.VARIABLE))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (milestone_2Parser.BIND - 66)) | (1 << (milestone_2Parser.BLOCK - 66)) | (1 << (milestone_2Parser.CAST - 66)) | (1 << (milestone_2Parser.DISTINCT - 66)) | (1 << (milestone_2Parser.DIV - 66)) | (1 << (milestone_2Parser.ENUM - 66)) | (1 << (milestone_2Parser.FOR - 66)) | (1 << (milestone_2Parser.IF - 66)) | (1 << (milestone_2Parser.IN - 66)) | (1 << (milestone_2Parser.IS - 66)) | (1 << (milestone_2Parser.ISNOT - 66)) | (1 << (milestone_2Parser.ITERATOR - 66)) | (1 << (milestone_2Parser.MOD - 66)) | (1 << (milestone_2Parser.NIL - 66)) | (1 << (milestone_2Parser.NOT - 66)) | (1 << (milestone_2Parser.NOTIN - 66)) | (1 << (milestone_2Parser.OBJECT - 66)) | (1 << (milestone_2Parser.OF - 66)) | (1 << (milestone_2Parser.OR - 66)) | (1 << (milestone_2Parser.OUT - 66)) | (1 << (milestone_2Parser.PROC - 66)) | (1 << (milestone_2Parser.PTR - 66)) | (1 << (milestone_2Parser.REF - 66)) | (1 << (milestone_2Parser.SHL - 66)) | (1 << (milestone_2Parser.SHR - 66)) | (1 << (milestone_2Parser.STATIC - 66)) | (1 << (milestone_2Parser.TRY - 66)) | (1 << (milestone_2Parser.TUPLE - 66)) | (1 << (milestone_2Parser.WHEN - 66)) | (1 << (milestone_2Parser.XOR - 66)))) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & ((1 << (milestone_2Parser.INT_LIT - 130)) | (1 << (milestone_2Parser.INT8_LIT - 130)) | (1 << (milestone_2Parser.INT16_LIT - 130)) | (1 << (milestone_2Parser.INT32_LIT - 130)) | (1 << (milestone_2Parser.INT64_LIT - 130)) | (1 << (milestone_2Parser.UINT_LIT - 130)) | (1 << (milestone_2Parser.UINT8_LIT - 130)) | (1 << (milestone_2Parser.UINT16_LIT - 130)) | (1 << (milestone_2Parser.UINT32_LIT - 130)) | (1 << (milestone_2Parser.UINT64_LIT - 130)) | (1 << (milestone_2Parser.FLOAT_LIT - 130)) | (1 << (milestone_2Parser.FLOAT32_LIT - 130)) | (1 << (milestone_2Parser.FLOAT64_LIT - 130)))) != 0):
                    self.state = 485
                    self.exprColonEqExpr()
                    self.state = 486
                    self.comma()
                    self.state = 492
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)


            elif token in [milestone_2Parser.COLON]:
                self.state = 493
                self.match(milestone_2Parser.COLON)

            else:
                raise NoViableAltException(self)

            self.state = 496
            self.match(milestone_2Parser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CastExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.OptIndContext,i)


        def typeDesc(self):
            return self.getTypedRuleContext(milestone_2Parser.TypeDescContext,0)


        def optPar(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.OptParContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.OptParContext,i)


        def expr(self):
            return self.getTypedRuleContext(milestone_2Parser.ExprContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_castExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCastExpr" ):
                listener.enterCastExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCastExpr" ):
                listener.exitCastExpr(self)




    def castExpr(self):

        localctx = milestone_2Parser.CastExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_castExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 498
            self.match(milestone_2Parser.CAST)
            self.state = 499
            self.match(milestone_2Parser.OPEN_BRACK)
            self.state = 500
            self.optInd()
            self.state = 501
            self.typeDesc()
            self.state = 502
            self.optPar()
            self.state = 503
            self.match(milestone_2Parser.CLOSE_BRACK)
            self.state = 504
            self.match(milestone_2Parser.OPEN_PAREN)
            self.state = 505
            self.optInd()
            self.state = 506
            self.expr()
            self.state = 507
            self.optPar()
            self.state = 508
            self.match(milestone_2Parser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParKeywContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return milestone_2Parser.RULE_parKeyw

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParKeyw" ):
                listener.enterParKeyw(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParKeyw" ):
                listener.exitParKeyw(self)




    def parKeyw(self):

        localctx = milestone_2Parser.ParKeywContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_parKeyw)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 510
            _la = self._input.LA(1)
            if not(((((_la - 62)) & ~0x3f) == 0 and ((1 << (_la - 62)) & ((1 << (milestone_2Parser.VARIABLE - 62)) | (1 << (milestone_2Parser.BLOCK - 62)) | (1 << (milestone_2Parser.CASE - 62)) | (1 << (milestone_2Parser.CONST - 62)) | (1 << (milestone_2Parser.DISCARD - 62)) | (1 << (milestone_2Parser.EXCEPT - 62)) | (1 << (milestone_2Parser.FINALLY - 62)) | (1 << (milestone_2Parser.FOR - 62)) | (1 << (milestone_2Parser.IF - 62)) | (1 << (milestone_2Parser.INCLUDE - 62)) | (1 << (milestone_2Parser.LET - 62)) | (1 << (milestone_2Parser.MIXIN - 62)) | (1 << (milestone_2Parser.TRY - 62)) | (1 << (milestone_2Parser.WHEN - 62)) | (1 << (milestone_2Parser.WHILE - 62)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def optPar(self):
            return self.getTypedRuleContext(milestone_2Parser.OptParContext,0)


        def complexOrSimpleStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ComplexOrSimpleStmtContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ComplexOrSimpleStmtContext,i)


        def pragmaStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.PragmaStmtContext,0)


        def simpleExpr(self):
            return self.getTypedRuleContext(milestone_2Parser.SimpleExprContext,0)


        def expr(self):
            return self.getTypedRuleContext(milestone_2Parser.ExprContext,0)


        def exprColonEqExpr(self):
            return self.getTypedRuleContext(milestone_2Parser.ExprColonEqExprContext,0)


        def exprColonExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ExprColonExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ExprColonExprContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_par

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPar" ):
                listener.enterPar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPar" ):
                listener.exitPar(self)




    def par(self):

        localctx = milestone_2Parser.ParContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_par)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 512
            self.match(milestone_2Parser.OPEN_PAREN)
            self.state = 513
            self.optInd()
            self.state = 561
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.state = 514
                self.complexOrSimpleStmt()
                self.state = 519
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==milestone_2Parser.SEMI_COLON:
                    self.state = 515
                    self.match(milestone_2Parser.SEMI_COLON)
                    self.state = 516
                    self.complexOrSimpleStmt()
                    self.state = 521
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 522
                self.match(milestone_2Parser.SEMI_COLON)
                self.state = 523
                self.complexOrSimpleStmt()
                self.state = 528
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==milestone_2Parser.SEMI_COLON:
                    self.state = 524
                    self.match(milestone_2Parser.SEMI_COLON)
                    self.state = 525
                    self.complexOrSimpleStmt()
                    self.state = 530
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 531
                self.pragmaStmt()
                pass

            elif la_ == 4:
                self.state = 532
                self.simpleExpr()
                self.state = 559
                token = self._input.LA(1)
                if token in [milestone_2Parser.T__4]:
                    self.state = 533
                    self.match(milestone_2Parser.T__4)
                    self.state = 534
                    self.expr()
                    self.state = 544
                    _la = self._input.LA(1)
                    if _la==milestone_2Parser.SEMI_COLON:
                        self.state = 535
                        self.match(milestone_2Parser.SEMI_COLON)
                        self.state = 536
                        self.complexOrSimpleStmt()
                        self.state = 541
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==milestone_2Parser.SEMI_COLON:
                            self.state = 537
                            self.match(milestone_2Parser.SEMI_COLON)
                            self.state = 538
                            self.complexOrSimpleStmt()
                            self.state = 543
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)




                elif token in [milestone_2Parser.COLON]:
                    self.state = 546
                    self.match(milestone_2Parser.COLON)
                    self.state = 547
                    self.expr()
                    self.state = 557
                    _la = self._input.LA(1)
                    if _la==milestone_2Parser.COMMA:
                        self.state = 548
                        self.match(milestone_2Parser.COMMA)
                        self.state = 549
                        self.exprColonEqExpr()
                        self.state = 554
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==milestone_2Parser.COMMA:
                            self.state = 550
                            self.match(milestone_2Parser.COMMA)
                            self.state = 551
                            self.exprColonExpr()
                            self.state = 556
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)




                else:
                    raise NoViableAltException(self)

                pass


            self.state = 563
            self.optPar()
            self.state = 564
            self.match(milestone_2Parser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT_LIT(self):
            return self.getToken(milestone_2Parser.INT_LIT, 0)

        def INT8_LIT(self):
            return self.getToken(milestone_2Parser.INT8_LIT, 0)

        def INT16_LIT(self):
            return self.getToken(milestone_2Parser.INT16_LIT, 0)

        def INT32_LIT(self):
            return self.getToken(milestone_2Parser.INT32_LIT, 0)

        def INT64_LIT(self):
            return self.getToken(milestone_2Parser.INT64_LIT, 0)

        def UINT_LIT(self):
            return self.getToken(milestone_2Parser.UINT_LIT, 0)

        def UINT8_LIT(self):
            return self.getToken(milestone_2Parser.UINT8_LIT, 0)

        def UINT16_LIT(self):
            return self.getToken(milestone_2Parser.UINT16_LIT, 0)

        def UINT32_LIT(self):
            return self.getToken(milestone_2Parser.UINT32_LIT, 0)

        def UINT64_LIT(self):
            return self.getToken(milestone_2Parser.UINT64_LIT, 0)

        def FLOAT_LIT(self):
            return self.getToken(milestone_2Parser.FLOAT_LIT, 0)

        def FLOAT32_LIT(self):
            return self.getToken(milestone_2Parser.FLOAT32_LIT, 0)

        def FLOAT64_LIT(self):
            return self.getToken(milestone_2Parser.FLOAT64_LIT, 0)

        def STR_LIT(self):
            return self.getToken(milestone_2Parser.STR_LIT, 0)

        def RSTR_LIT(self):
            return self.getToken(milestone_2Parser.RSTR_LIT, 0)

        def TRIPLESTR_LIT(self):
            return self.getToken(milestone_2Parser.TRIPLESTR_LIT, 0)

        def CHAR_LIT(self):
            return self.getToken(milestone_2Parser.CHAR_LIT, 0)

        def NIL(self):
            return self.getToken(milestone_2Parser.NIL, 0)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)




    def literal(self):

        localctx = milestone_2Parser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 566
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << milestone_2Parser.TRIPLESTR_LIT) | (1 << milestone_2Parser.STR_LIT) | (1 << milestone_2Parser.CHAR_LIT) | (1 << milestone_2Parser.RSTR_LIT))) != 0) or ((((_la - 103)) & ~0x3f) == 0 and ((1 << (_la - 103)) & ((1 << (milestone_2Parser.NIL - 103)) | (1 << (milestone_2Parser.INT_LIT - 103)) | (1 << (milestone_2Parser.INT8_LIT - 103)) | (1 << (milestone_2Parser.INT16_LIT - 103)) | (1 << (milestone_2Parser.INT32_LIT - 103)) | (1 << (milestone_2Parser.INT64_LIT - 103)) | (1 << (milestone_2Parser.UINT_LIT - 103)) | (1 << (milestone_2Parser.UINT8_LIT - 103)) | (1 << (milestone_2Parser.UINT16_LIT - 103)) | (1 << (milestone_2Parser.UINT32_LIT - 103)) | (1 << (milestone_2Parser.UINT64_LIT - 103)) | (1 << (milestone_2Parser.FLOAT_LIT - 103)) | (1 << (milestone_2Parser.FLOAT32_LIT - 103)) | (1 << (milestone_2Parser.FLOAT64_LIT - 103)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GeneralizedLitContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GENERALIZED_STR_LIT(self):
            return self.getToken(milestone_2Parser.GENERALIZED_STR_LIT, 0)

        def GENERALIZED_TRIPLESTR_LIT(self):
            return self.getToken(milestone_2Parser.GENERALIZED_TRIPLESTR_LIT, 0)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_generalizedLit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneralizedLit" ):
                listener.enterGeneralizedLit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneralizedLit" ):
                listener.exitGeneralizedLit(self)




    def generalizedLit(self):

        localctx = milestone_2Parser.GeneralizedLitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_generalizedLit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 568
            _la = self._input.LA(1)
            if not(_la==milestone_2Parser.GENERALIZED_STR_LIT or _la==milestone_2Parser.GENERALIZED_TRIPLESTR_LIT):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdentOrLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def generalizedLit(self):
            return self.getTypedRuleContext(milestone_2Parser.GeneralizedLitContext,0)


        def symbol(self):
            return self.getTypedRuleContext(milestone_2Parser.SymbolContext,0)


        def literal(self):
            return self.getTypedRuleContext(milestone_2Parser.LiteralContext,0)


        def par(self):
            return self.getTypedRuleContext(milestone_2Parser.ParContext,0)


        def arrayConstr(self):
            return self.getTypedRuleContext(milestone_2Parser.ArrayConstrContext,0)


        def setOrTableConstr(self):
            return self.getTypedRuleContext(milestone_2Parser.SetOrTableConstrContext,0)


        def castExpr(self):
            return self.getTypedRuleContext(milestone_2Parser.CastExprContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_identOrLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentOrLiteral" ):
                listener.enterIdentOrLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentOrLiteral" ):
                listener.exitIdentOrLiteral(self)




    def identOrLiteral(self):

        localctx = milestone_2Parser.IdentOrLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_identOrLiteral)
        try:
            self.state = 577
            token = self._input.LA(1)
            if token in [milestone_2Parser.GENERALIZED_STR_LIT, milestone_2Parser.GENERALIZED_TRIPLESTR_LIT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 570
                self.generalizedLit()

            elif token in [milestone_2Parser.T__3, milestone_2Parser.IDENT, milestone_2Parser.KEYW]:
                self.enterOuterAlt(localctx, 2)
                self.state = 571
                self.symbol()

            elif token in [milestone_2Parser.TRIPLESTR_LIT, milestone_2Parser.STR_LIT, milestone_2Parser.CHAR_LIT, milestone_2Parser.RSTR_LIT, milestone_2Parser.NIL, milestone_2Parser.INT_LIT, milestone_2Parser.INT8_LIT, milestone_2Parser.INT16_LIT, milestone_2Parser.INT32_LIT, milestone_2Parser.INT64_LIT, milestone_2Parser.UINT_LIT, milestone_2Parser.UINT8_LIT, milestone_2Parser.UINT16_LIT, milestone_2Parser.UINT32_LIT, milestone_2Parser.UINT64_LIT, milestone_2Parser.FLOAT_LIT, milestone_2Parser.FLOAT32_LIT, milestone_2Parser.FLOAT64_LIT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 572
                self.literal()

            elif token in [milestone_2Parser.OPEN_PAREN]:
                self.enterOuterAlt(localctx, 4)
                self.state = 573
                self.par()

            elif token in [milestone_2Parser.OPEN_BRACK]:
                self.enterOuterAlt(localctx, 5)
                self.state = 574
                self.arrayConstr()

            elif token in [milestone_2Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 575
                self.setOrTableConstr()

            elif token in [milestone_2Parser.CAST]:
                self.enterOuterAlt(localctx, 7)
                self.state = 576
                self.castExpr()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TupleConstrContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def optPar(self):
            return self.getTypedRuleContext(milestone_2Parser.OptParContext,0)


        def exprColonEqExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ExprColonEqExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ExprColonEqExprContext,i)


        def comma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.CommaContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.CommaContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_tupleConstr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTupleConstr" ):
                listener.enterTupleConstr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTupleConstr" ):
                listener.exitTupleConstr(self)




    def tupleConstr(self):

        localctx = milestone_2Parser.TupleConstrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_tupleConstr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 579
            self.match(milestone_2Parser.OPEN_PAREN)
            self.state = 580
            self.optInd()
            self.state = 587
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << milestone_2Parser.T__3) | (1 << milestone_2Parser.T__9) | (1 << milestone_2Parser.OP9) | (1 << milestone_2Parser.OP8) | (1 << milestone_2Parser.OP7) | (1 << milestone_2Parser.OP6) | (1 << milestone_2Parser.OP5) | (1 << milestone_2Parser.OP4) | (1 << milestone_2Parser.OP3) | (1 << milestone_2Parser.OP2) | (1 << milestone_2Parser.OP1) | (1 << milestone_2Parser.OP0) | (1 << milestone_2Parser.IDENT) | (1 << milestone_2Parser.TRIPLESTR_LIT) | (1 << milestone_2Parser.STR_LIT) | (1 << milestone_2Parser.CHAR_LIT) | (1 << milestone_2Parser.RSTR_LIT) | (1 << milestone_2Parser.GENERALIZED_STR_LIT) | (1 << milestone_2Parser.GENERALIZED_TRIPLESTR_LIT) | (1 << milestone_2Parser.OPEN_PAREN) | (1 << milestone_2Parser.OPEN_BRACE) | (1 << milestone_2Parser.OPEN_BRACK) | (1 << milestone_2Parser.KEYW) | (1 << milestone_2Parser.AND) | (1 << milestone_2Parser.VARIABLE))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (milestone_2Parser.BIND - 66)) | (1 << (milestone_2Parser.BLOCK - 66)) | (1 << (milestone_2Parser.CAST - 66)) | (1 << (milestone_2Parser.DISTINCT - 66)) | (1 << (milestone_2Parser.DIV - 66)) | (1 << (milestone_2Parser.ENUM - 66)) | (1 << (milestone_2Parser.FOR - 66)) | (1 << (milestone_2Parser.IF - 66)) | (1 << (milestone_2Parser.IN - 66)) | (1 << (milestone_2Parser.IS - 66)) | (1 << (milestone_2Parser.ISNOT - 66)) | (1 << (milestone_2Parser.ITERATOR - 66)) | (1 << (milestone_2Parser.MOD - 66)) | (1 << (milestone_2Parser.NIL - 66)) | (1 << (milestone_2Parser.NOT - 66)) | (1 << (milestone_2Parser.NOTIN - 66)) | (1 << (milestone_2Parser.OBJECT - 66)) | (1 << (milestone_2Parser.OF - 66)) | (1 << (milestone_2Parser.OR - 66)) | (1 << (milestone_2Parser.OUT - 66)) | (1 << (milestone_2Parser.PROC - 66)) | (1 << (milestone_2Parser.PTR - 66)) | (1 << (milestone_2Parser.REF - 66)) | (1 << (milestone_2Parser.SHL - 66)) | (1 << (milestone_2Parser.SHR - 66)) | (1 << (milestone_2Parser.STATIC - 66)) | (1 << (milestone_2Parser.TRY - 66)) | (1 << (milestone_2Parser.TUPLE - 66)) | (1 << (milestone_2Parser.WHEN - 66)) | (1 << (milestone_2Parser.XOR - 66)))) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & ((1 << (milestone_2Parser.INT_LIT - 130)) | (1 << (milestone_2Parser.INT8_LIT - 130)) | (1 << (milestone_2Parser.INT16_LIT - 130)) | (1 << (milestone_2Parser.INT32_LIT - 130)) | (1 << (milestone_2Parser.INT64_LIT - 130)) | (1 << (milestone_2Parser.UINT_LIT - 130)) | (1 << (milestone_2Parser.UINT8_LIT - 130)) | (1 << (milestone_2Parser.UINT16_LIT - 130)) | (1 << (milestone_2Parser.UINT32_LIT - 130)) | (1 << (milestone_2Parser.UINT64_LIT - 130)) | (1 << (milestone_2Parser.FLOAT_LIT - 130)) | (1 << (milestone_2Parser.FLOAT32_LIT - 130)) | (1 << (milestone_2Parser.FLOAT64_LIT - 130)))) != 0):
                self.state = 581
                self.exprColonEqExpr()
                self.state = 583
                _la = self._input.LA(1)
                if _la==milestone_2Parser.COMMA:
                    self.state = 582
                    self.comma()


                self.state = 589
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 590
            self.optPar()
            self.state = 591
            self.match(milestone_2Parser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArrayConstrContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def optPar(self):
            return self.getTypedRuleContext(milestone_2Parser.OptParContext,0)


        def exprColonEqExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ExprColonEqExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ExprColonEqExprContext,i)


        def comma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.CommaContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.CommaContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_arrayConstr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayConstr" ):
                listener.enterArrayConstr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayConstr" ):
                listener.exitArrayConstr(self)




    def arrayConstr(self):

        localctx = milestone_2Parser.ArrayConstrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_arrayConstr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 593
            self.match(milestone_2Parser.OPEN_BRACK)
            self.state = 594
            self.optInd()
            self.state = 601
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << milestone_2Parser.T__3) | (1 << milestone_2Parser.T__9) | (1 << milestone_2Parser.OP9) | (1 << milestone_2Parser.OP8) | (1 << milestone_2Parser.OP7) | (1 << milestone_2Parser.OP6) | (1 << milestone_2Parser.OP5) | (1 << milestone_2Parser.OP4) | (1 << milestone_2Parser.OP3) | (1 << milestone_2Parser.OP2) | (1 << milestone_2Parser.OP1) | (1 << milestone_2Parser.OP0) | (1 << milestone_2Parser.IDENT) | (1 << milestone_2Parser.TRIPLESTR_LIT) | (1 << milestone_2Parser.STR_LIT) | (1 << milestone_2Parser.CHAR_LIT) | (1 << milestone_2Parser.RSTR_LIT) | (1 << milestone_2Parser.GENERALIZED_STR_LIT) | (1 << milestone_2Parser.GENERALIZED_TRIPLESTR_LIT) | (1 << milestone_2Parser.OPEN_PAREN) | (1 << milestone_2Parser.OPEN_BRACE) | (1 << milestone_2Parser.OPEN_BRACK) | (1 << milestone_2Parser.KEYW) | (1 << milestone_2Parser.AND) | (1 << milestone_2Parser.VARIABLE))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (milestone_2Parser.BIND - 66)) | (1 << (milestone_2Parser.BLOCK - 66)) | (1 << (milestone_2Parser.CAST - 66)) | (1 << (milestone_2Parser.DISTINCT - 66)) | (1 << (milestone_2Parser.DIV - 66)) | (1 << (milestone_2Parser.ENUM - 66)) | (1 << (milestone_2Parser.FOR - 66)) | (1 << (milestone_2Parser.IF - 66)) | (1 << (milestone_2Parser.IN - 66)) | (1 << (milestone_2Parser.IS - 66)) | (1 << (milestone_2Parser.ISNOT - 66)) | (1 << (milestone_2Parser.ITERATOR - 66)) | (1 << (milestone_2Parser.MOD - 66)) | (1 << (milestone_2Parser.NIL - 66)) | (1 << (milestone_2Parser.NOT - 66)) | (1 << (milestone_2Parser.NOTIN - 66)) | (1 << (milestone_2Parser.OBJECT - 66)) | (1 << (milestone_2Parser.OF - 66)) | (1 << (milestone_2Parser.OR - 66)) | (1 << (milestone_2Parser.OUT - 66)) | (1 << (milestone_2Parser.PROC - 66)) | (1 << (milestone_2Parser.PTR - 66)) | (1 << (milestone_2Parser.REF - 66)) | (1 << (milestone_2Parser.SHL - 66)) | (1 << (milestone_2Parser.SHR - 66)) | (1 << (milestone_2Parser.STATIC - 66)) | (1 << (milestone_2Parser.TRY - 66)) | (1 << (milestone_2Parser.TUPLE - 66)) | (1 << (milestone_2Parser.WHEN - 66)) | (1 << (milestone_2Parser.XOR - 66)))) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & ((1 << (milestone_2Parser.INT_LIT - 130)) | (1 << (milestone_2Parser.INT8_LIT - 130)) | (1 << (milestone_2Parser.INT16_LIT - 130)) | (1 << (milestone_2Parser.INT32_LIT - 130)) | (1 << (milestone_2Parser.INT64_LIT - 130)) | (1 << (milestone_2Parser.UINT_LIT - 130)) | (1 << (milestone_2Parser.UINT8_LIT - 130)) | (1 << (milestone_2Parser.UINT16_LIT - 130)) | (1 << (milestone_2Parser.UINT32_LIT - 130)) | (1 << (milestone_2Parser.UINT64_LIT - 130)) | (1 << (milestone_2Parser.FLOAT_LIT - 130)) | (1 << (milestone_2Parser.FLOAT32_LIT - 130)) | (1 << (milestone_2Parser.FLOAT64_LIT - 130)))) != 0):
                self.state = 595
                self.exprColonEqExpr()
                self.state = 597
                _la = self._input.LA(1)
                if _la==milestone_2Parser.COMMA:
                    self.state = 596
                    self.comma()


                self.state = 603
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 604
            self.optPar()
            self.state = 605
            self.match(milestone_2Parser.CLOSE_BRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrimarySuffixContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exprColonEqExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ExprColonEqExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ExprColonEqExprContext,i)


        def doBlocks(self):
            return self.getTypedRuleContext(milestone_2Parser.DoBlocksContext,0)


        def comma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.CommaContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.CommaContext,i)


        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def symbol(self):
            return self.getTypedRuleContext(milestone_2Parser.SymbolContext,0)


        def generalizedLit(self):
            return self.getTypedRuleContext(milestone_2Parser.GeneralizedLitContext,0)


        def indexExprList(self):
            return self.getTypedRuleContext(milestone_2Parser.IndexExprListContext,0)


        def optPar(self):
            return self.getTypedRuleContext(milestone_2Parser.OptParContext,0)


        def expr(self):
            return self.getTypedRuleContext(milestone_2Parser.ExprContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_primarySuffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimarySuffix" ):
                listener.enterPrimarySuffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimarySuffix" ):
                listener.exitPrimarySuffix(self)




    def primarySuffix(self):

        localctx = milestone_2Parser.PrimarySuffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_primarySuffix)
        self._la = 0 # Token type
        try:
            self.state = 641
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 607
                self.match(milestone_2Parser.OPEN_PAREN)
                self.state = 614
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << milestone_2Parser.T__3) | (1 << milestone_2Parser.T__9) | (1 << milestone_2Parser.OP9) | (1 << milestone_2Parser.OP8) | (1 << milestone_2Parser.OP7) | (1 << milestone_2Parser.OP6) | (1 << milestone_2Parser.OP5) | (1 << milestone_2Parser.OP4) | (1 << milestone_2Parser.OP3) | (1 << milestone_2Parser.OP2) | (1 << milestone_2Parser.OP1) | (1 << milestone_2Parser.OP0) | (1 << milestone_2Parser.IDENT) | (1 << milestone_2Parser.TRIPLESTR_LIT) | (1 << milestone_2Parser.STR_LIT) | (1 << milestone_2Parser.CHAR_LIT) | (1 << milestone_2Parser.RSTR_LIT) | (1 << milestone_2Parser.GENERALIZED_STR_LIT) | (1 << milestone_2Parser.GENERALIZED_TRIPLESTR_LIT) | (1 << milestone_2Parser.OPEN_PAREN) | (1 << milestone_2Parser.OPEN_BRACE) | (1 << milestone_2Parser.OPEN_BRACK) | (1 << milestone_2Parser.KEYW) | (1 << milestone_2Parser.AND) | (1 << milestone_2Parser.VARIABLE))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (milestone_2Parser.BIND - 66)) | (1 << (milestone_2Parser.BLOCK - 66)) | (1 << (milestone_2Parser.CAST - 66)) | (1 << (milestone_2Parser.DISTINCT - 66)) | (1 << (milestone_2Parser.DIV - 66)) | (1 << (milestone_2Parser.ENUM - 66)) | (1 << (milestone_2Parser.FOR - 66)) | (1 << (milestone_2Parser.IF - 66)) | (1 << (milestone_2Parser.IN - 66)) | (1 << (milestone_2Parser.IS - 66)) | (1 << (milestone_2Parser.ISNOT - 66)) | (1 << (milestone_2Parser.ITERATOR - 66)) | (1 << (milestone_2Parser.MOD - 66)) | (1 << (milestone_2Parser.NIL - 66)) | (1 << (milestone_2Parser.NOT - 66)) | (1 << (milestone_2Parser.NOTIN - 66)) | (1 << (milestone_2Parser.OBJECT - 66)) | (1 << (milestone_2Parser.OF - 66)) | (1 << (milestone_2Parser.OR - 66)) | (1 << (milestone_2Parser.OUT - 66)) | (1 << (milestone_2Parser.PROC - 66)) | (1 << (milestone_2Parser.PTR - 66)) | (1 << (milestone_2Parser.REF - 66)) | (1 << (milestone_2Parser.SHL - 66)) | (1 << (milestone_2Parser.SHR - 66)) | (1 << (milestone_2Parser.STATIC - 66)) | (1 << (milestone_2Parser.TRY - 66)) | (1 << (milestone_2Parser.TUPLE - 66)) | (1 << (milestone_2Parser.WHEN - 66)) | (1 << (milestone_2Parser.XOR - 66)))) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & ((1 << (milestone_2Parser.INT_LIT - 130)) | (1 << (milestone_2Parser.INT8_LIT - 130)) | (1 << (milestone_2Parser.INT16_LIT - 130)) | (1 << (milestone_2Parser.INT32_LIT - 130)) | (1 << (milestone_2Parser.INT64_LIT - 130)) | (1 << (milestone_2Parser.UINT_LIT - 130)) | (1 << (milestone_2Parser.UINT8_LIT - 130)) | (1 << (milestone_2Parser.UINT16_LIT - 130)) | (1 << (milestone_2Parser.UINT32_LIT - 130)) | (1 << (milestone_2Parser.UINT64_LIT - 130)) | (1 << (milestone_2Parser.FLOAT_LIT - 130)) | (1 << (milestone_2Parser.FLOAT32_LIT - 130)) | (1 << (milestone_2Parser.FLOAT64_LIT - 130)))) != 0):
                    self.state = 608
                    self.exprColonEqExpr()
                    self.state = 610
                    _la = self._input.LA(1)
                    if _la==milestone_2Parser.COMMA:
                        self.state = 609
                        self.comma()


                    self.state = 616
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 617
                self.match(milestone_2Parser.CLOSE_PAREN)
                self.state = 619
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
                if la_ == 1:
                    self.state = 618
                    self.doBlocks()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 621
                self.doBlocks()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 622
                self.match(milestone_2Parser.DOT)
                self.state = 623
                self.optInd()
                self.state = 624
                self.symbol()
                self.state = 626
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
                if la_ == 1:
                    self.state = 625
                    self.generalizedLit()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 628
                self.match(milestone_2Parser.OPEN_BRACK)
                self.state = 629
                self.optInd()
                self.state = 630
                self.indexExprList()
                self.state = 631
                self.optPar()
                self.state = 632
                self.match(milestone_2Parser.CLOSE_BRACK)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 634
                self.match(milestone_2Parser.OPEN_BRACE)
                self.state = 635
                self.optInd()
                self.state = 636
                self.indexExprList()
                self.state = 637
                self.optPar()
                self.state = 638
                self.match(milestone_2Parser.CLOSE_BRACE)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 640
                self.expr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IndexExprListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return milestone_2Parser.RULE_indexExprList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexExprList" ):
                listener.enterIndexExprList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexExprList" ):
                listener.exitIndexExprList(self)




    def indexExprList(self):

        localctx = milestone_2Parser.IndexExprListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_indexExprList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 643
            self.match(milestone_2Parser.IDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IndentWithPragmaContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return milestone_2Parser.RULE_indentWithPragma

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndentWithPragma" ):
                listener.enterIndentWithPragma(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndentWithPragma" ):
                listener.exitIndentWithPragma(self)




    def indentWithPragma(self):

        localctx = milestone_2Parser.IndentWithPragmaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_indentWithPragma)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 645
            self.match(milestone_2Parser.IDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CaseExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return milestone_2Parser.RULE_caseExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseExpr" ):
                listener.enterCaseExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseExpr" ):
                listener.exitCaseExpr(self)




    def caseExpr(self):

        localctx = milestone_2Parser.CaseExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_caseExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 647
            self.match(milestone_2Parser.IDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeDescKContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return milestone_2Parser.RULE_typeDescK

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeDescK" ):
                listener.enterTypeDescK(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeDescK" ):
                listener.exitTypeDescK(self)




    def typeDescK(self):

        localctx = milestone_2Parser.TypeDescKContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_typeDescK)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 649
            self.match(milestone_2Parser.IDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MacroColonContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return milestone_2Parser.RULE_macroColon

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroColon" ):
                listener.enterMacroColon(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroColon" ):
                listener.exitMacroColon(self)




    def macroColon(self):

        localctx = milestone_2Parser.MacroColonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_macroColon)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 651
            self.match(milestone_2Parser.IDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ModuleNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return milestone_2Parser.RULE_moduleName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleName" ):
                listener.enterModuleName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleName" ):
                listener.exitModuleName(self)




    def moduleName(self):

        localctx = milestone_2Parser.ModuleNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_moduleName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 653
            self.match(milestone_2Parser.IDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SectionTypeDefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return milestone_2Parser.RULE_sectionTypeDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSectionTypeDef" ):
                listener.enterSectionTypeDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSectionTypeDef" ):
                listener.exitSectionTypeDef(self)




    def sectionTypeDef(self):

        localctx = milestone_2Parser.SectionTypeDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_sectionTypeDef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 655
            self.match(milestone_2Parser.IDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SectionConstantContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return milestone_2Parser.RULE_sectionConstant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSectionConstant" ):
                listener.enterSectionConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSectionConstant" ):
                listener.exitSectionConstant(self)




    def sectionConstant(self):

        localctx = milestone_2Parser.SectionConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_sectionConstant)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 657
            self.match(milestone_2Parser.IDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SectionVariableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return milestone_2Parser.RULE_sectionVariable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSectionVariable" ):
                listener.enterSectionVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSectionVariable" ):
                listener.exitSectionVariable(self)




    def sectionVariable(self):

        localctx = milestone_2Parser.SectionVariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_sectionVariable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 659
            self.match(milestone_2Parser.IDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExportStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return milestone_2Parser.RULE_exportStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExportStmt" ):
                listener.enterExportStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExportStmt" ):
                listener.exitExportStmt(self)




    def exportStmt(self):

        localctx = milestone_2Parser.ExportStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_exportStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 661
            self.match(milestone_2Parser.IDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return milestone_2Parser.RULE_opr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpr" ):
                listener.enterOpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpr" ):
                listener.exitOpr(self)




    def opr(self):

        localctx = milestone_2Parser.OprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_opr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 663
            self.match(milestone_2Parser.IDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DoBlocksContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return milestone_2Parser.RULE_doBlocks

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoBlocks" ):
                listener.enterDoBlocks(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoBlocks" ):
                listener.exitDoBlocks(self)




    def doBlocks(self):

        localctx = milestone_2Parser.DoBlocksContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_doBlocks)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 665
            self.match(milestone_2Parser.IDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return milestone_2Parser.RULE_p

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterP" ):
                listener.enterP(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitP" ):
                listener.exitP(self)




    def p(self):

        localctx = milestone_2Parser.PContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 667
            self.match(milestone_2Parser.IDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExprColonExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return milestone_2Parser.RULE_exprColonExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprColonExpr" ):
                listener.enterExprColonExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprColonExpr" ):
                listener.exitExprColonExpr(self)




    def exprColonExpr(self):

        localctx = milestone_2Parser.ExprColonExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_exprColonExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 669
            self.match(milestone_2Parser.IDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CondExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ExprContext,i)


        def colcom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ColcomContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ColcomContext,i)


        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.OptIndContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_condExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondExpr" ):
                listener.enterCondExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondExpr" ):
                listener.exitCondExpr(self)




    def condExpr(self):

        localctx = milestone_2Parser.CondExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_condExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 671
            self.expr()
            self.state = 672
            self.colcom()
            self.state = 673
            self.expr()
            self.state = 674
            self.optInd()
            self.state = 683
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==milestone_2Parser.ELIF:
                self.state = 675
                self.match(milestone_2Parser.ELIF)
                self.state = 676
                self.expr()
                self.state = 677
                self.colcom()
                self.state = 678
                self.expr()
                self.state = 679
                self.optInd()
                self.state = 685
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 686
            self.match(milestone_2Parser.ELSE)
            self.state = 687
            self.colcom()
            self.state = 688
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IfExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def condExpr(self):
            return self.getTypedRuleContext(milestone_2Parser.CondExprContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_ifExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfExpr" ):
                listener.enterIfExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfExpr" ):
                listener.exitIfExpr(self)




    def ifExpr(self):

        localctx = milestone_2Parser.IfExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_ifExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 690
            self.match(milestone_2Parser.IF)
            self.state = 691
            self.condExpr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WhenExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def condExpr(self):
            return self.getTypedRuleContext(milestone_2Parser.CondExprContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_whenExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenExpr" ):
                listener.enterWhenExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenExpr" ):
                listener.exitWhenExpr(self)




    def whenExpr(self):

        localctx = milestone_2Parser.WhenExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_whenExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 693
            self.match(milestone_2Parser.WHEN)
            self.state = 694
            self.condExpr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PragmaContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def optPar(self):
            return self.getTypedRuleContext(milestone_2Parser.OptParContext,0)


        def exprColonExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ExprColonExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ExprColonExprContext,i)


        def comma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.CommaContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.CommaContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_pragma

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragma" ):
                listener.enterPragma(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragma" ):
                listener.exitPragma(self)




    def pragma(self):

        localctx = milestone_2Parser.PragmaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_pragma)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 696
            self.match(milestone_2Parser.T__6)
            self.state = 697
            self.optInd()
            self.state = 704
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==milestone_2Parser.IDENT:
                self.state = 698
                self.exprColonExpr()
                self.state = 700
                _la = self._input.LA(1)
                if _la==milestone_2Parser.COMMA:
                    self.state = 699
                    self.comma()


                self.state = 706
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 707
            self.optPar()
            self.state = 708
            _la = self._input.LA(1)
            if not(_la==milestone_2Parser.T__7 or _la==milestone_2Parser.CLOSE_BRACE):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdentVisContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(milestone_2Parser.SymbolContext,0)


        def opr(self):
            return self.getTypedRuleContext(milestone_2Parser.OprContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_identVis

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentVis" ):
                listener.enterIdentVis(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentVis" ):
                listener.exitIdentVis(self)




    def identVis(self):

        localctx = milestone_2Parser.IdentVisContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_identVis)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 710
            self.symbol()
            self.state = 712
            _la = self._input.LA(1)
            if _la==milestone_2Parser.IDENT:
                self.state = 711
                self.opr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdentVisDotContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.SymbolContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.SymbolContext,i)


        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def opr(self):
            return self.getTypedRuleContext(milestone_2Parser.OprContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_identVisDot

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentVisDot" ):
                listener.enterIdentVisDot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentVisDot" ):
                listener.exitIdentVisDot(self)




    def identVisDot(self):

        localctx = milestone_2Parser.IdentVisDotContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_identVisDot)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 714
            self.symbol()
            self.state = 715
            self.match(milestone_2Parser.DOT)
            self.state = 716
            self.optInd()
            self.state = 717
            self.symbol()
            self.state = 719
            _la = self._input.LA(1)
            if _la==milestone_2Parser.IDENT:
                self.state = 718
                self.opr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdentWithPragmaContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identVis(self):
            return self.getTypedRuleContext(milestone_2Parser.IdentVisContext,0)


        def pragma(self):
            return self.getTypedRuleContext(milestone_2Parser.PragmaContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_identWithPragma

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentWithPragma" ):
                listener.enterIdentWithPragma(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentWithPragma" ):
                listener.exitIdentWithPragma(self)




    def identWithPragma(self):

        localctx = milestone_2Parser.IdentWithPragmaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_identWithPragma)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 721
            self.identVis()
            self.state = 723
            _la = self._input.LA(1)
            if _la==milestone_2Parser.T__6:
                self.state = 722
                self.pragma()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdentWithPragmaDotContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identVisDot(self):
            return self.getTypedRuleContext(milestone_2Parser.IdentVisDotContext,0)


        def pragma(self):
            return self.getTypedRuleContext(milestone_2Parser.PragmaContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_identWithPragmaDot

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentWithPragmaDot" ):
                listener.enterIdentWithPragmaDot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentWithPragmaDot" ):
                listener.exitIdentWithPragmaDot(self)




    def identWithPragmaDot(self):

        localctx = milestone_2Parser.IdentWithPragmaDotContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_identWithPragmaDot)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 725
            self.identVisDot()
            self.state = 727
            _la = self._input.LA(1)
            if _la==milestone_2Parser.T__6:
                self.state = 726
                self.pragma()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclColonEqualsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identWithPragma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.IdentWithPragmaContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.IdentWithPragmaContext,i)


        def comma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.CommaContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.CommaContext,i)


        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.OptIndContext,i)


        def typeDesc(self):
            return self.getTypedRuleContext(milestone_2Parser.TypeDescContext,0)


        def expr(self):
            return self.getTypedRuleContext(milestone_2Parser.ExprContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_declColonEquals

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclColonEquals" ):
                listener.enterDeclColonEquals(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclColonEquals" ):
                listener.exitDeclColonEquals(self)




    def declColonEquals(self):

        localctx = milestone_2Parser.DeclColonEqualsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_declColonEquals)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 729
            self.identWithPragma()
            self.state = 735
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,58,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 730
                    self.comma()
                    self.state = 731
                    self.identWithPragma() 
                self.state = 737
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,58,self._ctx)

            self.state = 739
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
            if la_ == 1:
                self.state = 738
                self.comma()


            self.state = 745
            _la = self._input.LA(1)
            if _la==milestone_2Parser.COLON:
                self.state = 741
                self.match(milestone_2Parser.COLON)
                self.state = 742
                self.optInd()
                self.state = 743
                self.typeDesc()


            self.state = 751
            _la = self._input.LA(1)
            if _la==milestone_2Parser.T__4:
                self.state = 747
                self.match(milestone_2Parser.T__4)
                self.state = 748
                self.optInd()
                self.state = 749
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdentColonEqualsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENT(self, i:int=None):
            if i is None:
                return self.getTokens(milestone_2Parser.IDENT)
            else:
                return self.getToken(milestone_2Parser.IDENT, i)

        def comma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.CommaContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.CommaContext,i)


        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.OptIndContext,i)


        def typeDesc(self):
            return self.getTypedRuleContext(milestone_2Parser.TypeDescContext,0)


        def expr(self):
            return self.getTypedRuleContext(milestone_2Parser.ExprContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_identColonEquals

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentColonEquals" ):
                listener.enterIdentColonEquals(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentColonEquals" ):
                listener.exitIdentColonEquals(self)




    def identColonEquals(self):

        localctx = milestone_2Parser.IdentColonEqualsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_identColonEquals)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 753
            self.match(milestone_2Parser.IDENT)
            self.state = 759
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,62,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 754
                    self.comma()
                    self.state = 755
                    self.match(milestone_2Parser.IDENT) 
                self.state = 761
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,62,self._ctx)

            self.state = 763
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
            if la_ == 1:
                self.state = 762
                self.comma()


            self.state = 769
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
            if la_ == 1:
                self.state = 765
                self.match(milestone_2Parser.COLON)
                self.state = 766
                self.optInd()
                self.state = 767
                self.typeDesc()


            self.state = 775
            _la = self._input.LA(1)
            if _la==milestone_2Parser.T__4:
                self.state = 771
                self.match(milestone_2Parser.T__4)
                self.state = 772
                self.optInd()
                self.state = 773
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InlTupleDeclContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def optPar(self):
            return self.getTypedRuleContext(milestone_2Parser.OptParContext,0)


        def identColonEquals(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.IdentColonEqualsContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.IdentColonEqualsContext,i)


        def comma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.CommaContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.CommaContext,i)


        def semicolon(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.SemicolonContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.SemicolonContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_inlTupleDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInlTupleDecl" ):
                listener.enterInlTupleDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInlTupleDecl" ):
                listener.exitInlTupleDecl(self)




    def inlTupleDecl(self):

        localctx = milestone_2Parser.InlTupleDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_inlTupleDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 777
            self.match(milestone_2Parser.TUPLE)
            self.state = 778
            self.match(milestone_2Parser.OPEN_BRACK)
            self.state = 779
            self.optInd()
            self.state = 788
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==milestone_2Parser.IDENT:
                self.state = 780
                self.identColonEquals()
                self.state = 784
                _la = self._input.LA(1)
                if _la==milestone_2Parser.COMMA:
                    self.state = 781
                    self.comma()
                    self.state = 782
                    self.semicolon()


                self.state = 790
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 791
            self.optPar()
            self.state = 792
            self.match(milestone_2Parser.CLOSE_BRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExtTupleDeclContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMENT(self):
            return self.getToken(milestone_2Parser.COMMENT, 0)

        def identColonEquals(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.IdentColonEqualsContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.IdentColonEqualsContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_extTupleDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtTupleDecl" ):
                listener.enterExtTupleDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtTupleDecl" ):
                listener.exitExtTupleDecl(self)




    def extTupleDecl(self):

        localctx = milestone_2Parser.ExtTupleDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_extTupleDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 794
            self.match(milestone_2Parser.TUPLE)
            self.state = 796
            _la = self._input.LA(1)
            if _la==milestone_2Parser.COMMENT:
                self.state = 795
                self.match(milestone_2Parser.COMMENT)


            self.state = 807
            _la = self._input.LA(1)
            if _la==milestone_2Parser.T__1:
                self.state = 798
                self.match(milestone_2Parser.T__1)
                self.state = 799
                self.identColonEquals()
                self.state = 804
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==milestone_2Parser.T__2:
                    self.state = 800
                    self.match(milestone_2Parser.T__2)
                    self.state = 801
                    self.identColonEquals()
                    self.state = 806
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TupleClassContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return milestone_2Parser.RULE_tupleClass

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTupleClass" ):
                listener.enterTupleClass(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTupleClass" ):
                listener.exitTupleClass(self)




    def tupleClass(self):

        localctx = milestone_2Parser.TupleClassContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_tupleClass)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 809
            self.match(milestone_2Parser.TUPLE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParamListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declColonEquals(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.DeclColonEqualsContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.DeclColonEqualsContext,i)


        def comma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.CommaContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.CommaContext,i)


        def semicolon(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.SemicolonContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.SemicolonContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_paramList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParamList" ):
                listener.enterParamList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParamList" ):
                listener.exitParamList(self)




    def paramList(self):

        localctx = milestone_2Parser.ParamListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_paramList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 811
            self.match(milestone_2Parser.OPEN_PAREN)
            self.state = 824
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << milestone_2Parser.T__3) | (1 << milestone_2Parser.IDENT) | (1 << milestone_2Parser.KEYW))) != 0):
                self.state = 812
                self.declColonEquals()
                self.state = 821
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==milestone_2Parser.COMMA:
                    self.state = 813
                    self.comma()
                    self.state = 814
                    self.match(milestone_2Parser.DIV_OPERATOR)
                    self.state = 815
                    self.semicolon()
                    self.state = 817
                    self.declColonEquals()
                    self.state = 823
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 826
            self.match(milestone_2Parser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParamListArrowContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def paramList(self):
            return self.getTypedRuleContext(milestone_2Parser.ParamListContext,0)


        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def typeDesc(self):
            return self.getTypedRuleContext(milestone_2Parser.TypeDescContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_paramListArrow

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParamListArrow" ):
                listener.enterParamListArrow(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParamListArrow" ):
                listener.exitParamListArrow(self)




    def paramListArrow(self):

        localctx = milestone_2Parser.ParamListArrowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_paramListArrow)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 829
            _la = self._input.LA(1)
            if _la==milestone_2Parser.OPEN_PAREN:
                self.state = 828
                self.paramList()


            self.state = 835
            _la = self._input.LA(1)
            if _la==milestone_2Parser.T__8:
                self.state = 831
                self.match(milestone_2Parser.T__8)
                self.state = 832
                self.optInd()
                self.state = 833
                self.typeDesc()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParamListColonContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def paramList(self):
            return self.getTypedRuleContext(milestone_2Parser.ParamListContext,0)


        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def typeDesc(self):
            return self.getTypedRuleContext(milestone_2Parser.TypeDescContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_paramListColon

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParamListColon" ):
                listener.enterParamListColon(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParamListColon" ):
                listener.exitParamListColon(self)




    def paramListColon(self):

        localctx = milestone_2Parser.ParamListColonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_paramListColon)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 838
            _la = self._input.LA(1)
            if _la==milestone_2Parser.OPEN_PAREN:
                self.state = 837
                self.paramList()


            self.state = 844
            _la = self._input.LA(1)
            if _la==milestone_2Parser.COLON:
                self.state = 840
                self.match(milestone_2Parser.COLON)
                self.state = 841
                self.optInd()
                self.state = 842
                self.typeDesc()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DoBlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def paramListArrow(self):
            return self.getTypedRuleContext(milestone_2Parser.ParamListArrowContext,0)


        def colcom(self):
            return self.getTypedRuleContext(milestone_2Parser.ColcomContext,0)


        def stmt(self):
            return self.getTypedRuleContext(milestone_2Parser.StmtContext,0)


        def pragma(self):
            return self.getTypedRuleContext(milestone_2Parser.PragmaContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_doBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoBlock" ):
                listener.enterDoBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoBlock" ):
                listener.exitDoBlock(self)




    def doBlock(self):

        localctx = milestone_2Parser.DoBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_doBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 846
            self.match(milestone_2Parser.DO)
            self.state = 847
            self.paramListArrow()
            self.state = 849
            _la = self._input.LA(1)
            if _la==milestone_2Parser.T__6:
                self.state = 848
                self.pragma()


            self.state = 851
            self.colcom()
            self.state = 852
            self.stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProcExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def paramListColon(self):
            return self.getTypedRuleContext(milestone_2Parser.ParamListColonContext,0)


        def pragma(self):
            return self.getTypedRuleContext(milestone_2Parser.PragmaContext,0)


        def stmt(self):
            return self.getTypedRuleContext(milestone_2Parser.StmtContext,0)


        def COMMENT(self):
            return self.getToken(milestone_2Parser.COMMENT, 0)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_procExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcExpr" ):
                listener.enterProcExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcExpr" ):
                listener.exitProcExpr(self)




    def procExpr(self):

        localctx = milestone_2Parser.ProcExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_procExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 854
            self.match(milestone_2Parser.PROC)
            self.state = 855
            self.paramListColon()
            self.state = 857
            _la = self._input.LA(1)
            if _la==milestone_2Parser.T__6:
                self.state = 856
                self.pragma()


            self.state = 864
            _la = self._input.LA(1)
            if _la==milestone_2Parser.T__4:
                self.state = 859
                self.match(milestone_2Parser.T__4)
                self.state = 861
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
                if la_ == 1:
                    self.state = 860
                    self.match(milestone_2Parser.COMMENT)


                self.state = 863
                self.stmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DistinctContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def typeDesc(self):
            return self.getTypedRuleContext(milestone_2Parser.TypeDescContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_distinct

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDistinct" ):
                listener.enterDistinct(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDistinct" ):
                listener.exitDistinct(self)




    def distinct(self):

        localctx = milestone_2Parser.DistinctContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_distinct)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 866
            self.match(milestone_2Parser.DISTINCT)
            self.state = 867
            self.optInd()
            self.state = 868
            self.typeDesc()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ForStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(milestone_2Parser.ExprContext,0)


        def colcom(self):
            return self.getTypedRuleContext(milestone_2Parser.ColcomContext,0)


        def stmt(self):
            return self.getTypedRuleContext(milestone_2Parser.StmtContext,0)


        def identWithPragma(self):
            return self.getTypedRuleContext(milestone_2Parser.IdentWithPragmaContext,0)


        def comma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.CommaContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.CommaContext,i)


        def indentWithPragma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.IndentWithPragmaContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.IndentWithPragmaContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_forStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForStmt" ):
                listener.enterForStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForStmt" ):
                listener.exitForStmt(self)




    def forStmt(self):

        localctx = milestone_2Parser.ForStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_forStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 870
            self.match(milestone_2Parser.FOR)

            self.state = 871
            self.identWithPragma()
            self.state = 877
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==milestone_2Parser.COMMA:
                self.state = 872
                self.comma()
                self.state = 873
                self.indentWithPragma()
                self.state = 879
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 880
            self.match(milestone_2Parser.IN)
            self.state = 881
            self.expr()
            self.state = 882
            self.colcom()
            self.state = 883
            self.stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ForExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def forStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.ForStmtContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_forExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForExpr" ):
                listener.enterForExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForExpr" ):
                listener.exitForExpr(self)




    def forExpr(self):

        localctx = milestone_2Parser.ForExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_forExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 885
            self.forStmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def blockExpr(self):
            return self.getTypedRuleContext(milestone_2Parser.BlockExprContext,0)


        def ifExpr(self):
            return self.getTypedRuleContext(milestone_2Parser.IfExprContext,0)


        def whenExpr(self):
            return self.getTypedRuleContext(milestone_2Parser.WhenExprContext,0)


        def caseExpr(self):
            return self.getTypedRuleContext(milestone_2Parser.CaseExprContext,0)


        def forExpr(self):
            return self.getTypedRuleContext(milestone_2Parser.ForExprContext,0)


        def tryExpr(self):
            return self.getTypedRuleContext(milestone_2Parser.TryExprContext,0)


        def simpleExpr(self):
            return self.getTypedRuleContext(milestone_2Parser.SimpleExprContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)




    def expr(self):

        localctx = milestone_2Parser.ExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_expr)
        try:
            self.state = 896
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 893
                token = self._input.LA(1)
                if token in [milestone_2Parser.BLOCK]:
                    self.state = 887
                    self.blockExpr()

                elif token in [milestone_2Parser.IF]:
                    self.state = 888
                    self.ifExpr()

                elif token in [milestone_2Parser.WHEN]:
                    self.state = 889
                    self.whenExpr()

                elif token in [milestone_2Parser.IDENT]:
                    self.state = 890
                    self.caseExpr()

                elif token in [milestone_2Parser.FOR]:
                    self.state = 891
                    self.forExpr()

                elif token in [milestone_2Parser.TRY]:
                    self.state = 892
                    self.tryExpr()

                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 895
                self.simpleExpr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeKeywContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return milestone_2Parser.RULE_typeKeyw

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeKeyw" ):
                listener.enterTypeKeyw(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeKeyw" ):
                listener.exitTypeKeyw(self)




    def typeKeyw(self):

        localctx = milestone_2Parser.TypeKeywContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_typeKeyw)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 898
            _la = self._input.LA(1)
            if not(_la==milestone_2Parser.T__9 or _la==milestone_2Parser.VARIABLE or ((((_la - 77)) & ~0x3f) == 0 and ((1 << (_la - 77)) & ((1 << (milestone_2Parser.DISTINCT - 77)) | (1 << (milestone_2Parser.ENUM - 77)) | (1 << (milestone_2Parser.ITERATOR - 77)) | (1 << (milestone_2Parser.OBJECT - 77)) | (1 << (milestone_2Parser.OUT - 77)) | (1 << (milestone_2Parser.PROC - 77)) | (1 << (milestone_2Parser.PTR - 77)) | (1 << (milestone_2Parser.REF - 77)) | (1 << (milestone_2Parser.TUPLE - 77)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrimaryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeKeyw(self):
            return self.getTypedRuleContext(milestone_2Parser.TypeKeywContext,0)


        def typeDescK(self):
            return self.getTypedRuleContext(milestone_2Parser.TypeDescKContext,0)


        def identOrLiteral(self):
            return self.getTypedRuleContext(milestone_2Parser.IdentOrLiteralContext,0)


        def prefixOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.PrefixOperatorContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.PrefixOperatorContext,i)


        def primarySuffix(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.PrimarySuffixContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.PrimarySuffixContext,i)


        def primary(self):
            return self.getTypedRuleContext(milestone_2Parser.PrimaryContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_primary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary" ):
                listener.enterPrimary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary" ):
                listener.exitPrimary(self)




    def primary(self):

        localctx = milestone_2Parser.PrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_primary)
        self._la = 0 # Token type
        try:
            self.state = 918
            token = self._input.LA(1)
            if token in [milestone_2Parser.T__9, milestone_2Parser.VARIABLE, milestone_2Parser.DISTINCT, milestone_2Parser.ENUM, milestone_2Parser.ITERATOR, milestone_2Parser.OBJECT, milestone_2Parser.OUT, milestone_2Parser.PROC, milestone_2Parser.PTR, milestone_2Parser.REF, milestone_2Parser.TUPLE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 900
                self.typeKeyw()
                self.state = 901
                self.typeDescK()

            elif token in [milestone_2Parser.T__3, milestone_2Parser.OP9, milestone_2Parser.OP8, milestone_2Parser.OP7, milestone_2Parser.OP6, milestone_2Parser.OP5, milestone_2Parser.OP4, milestone_2Parser.OP3, milestone_2Parser.OP2, milestone_2Parser.OP1, milestone_2Parser.OP0, milestone_2Parser.IDENT, milestone_2Parser.TRIPLESTR_LIT, milestone_2Parser.STR_LIT, milestone_2Parser.CHAR_LIT, milestone_2Parser.RSTR_LIT, milestone_2Parser.GENERALIZED_STR_LIT, milestone_2Parser.GENERALIZED_TRIPLESTR_LIT, milestone_2Parser.OPEN_PAREN, milestone_2Parser.OPEN_BRACE, milestone_2Parser.OPEN_BRACK, milestone_2Parser.KEYW, milestone_2Parser.AND, milestone_2Parser.CAST, milestone_2Parser.DIV, milestone_2Parser.IN, milestone_2Parser.IS, milestone_2Parser.ISNOT, milestone_2Parser.MOD, milestone_2Parser.NIL, milestone_2Parser.NOT, milestone_2Parser.NOTIN, milestone_2Parser.OF, milestone_2Parser.OR, milestone_2Parser.SHL, milestone_2Parser.SHR, milestone_2Parser.STATIC, milestone_2Parser.XOR, milestone_2Parser.INT_LIT, milestone_2Parser.INT8_LIT, milestone_2Parser.INT16_LIT, milestone_2Parser.INT32_LIT, milestone_2Parser.INT64_LIT, milestone_2Parser.UINT_LIT, milestone_2Parser.UINT8_LIT, milestone_2Parser.UINT16_LIT, milestone_2Parser.UINT32_LIT, milestone_2Parser.UINT64_LIT, milestone_2Parser.FLOAT_LIT, milestone_2Parser.FLOAT32_LIT, milestone_2Parser.FLOAT64_LIT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 906
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << milestone_2Parser.OP9) | (1 << milestone_2Parser.OP8) | (1 << milestone_2Parser.OP7) | (1 << milestone_2Parser.OP6) | (1 << milestone_2Parser.OP5) | (1 << milestone_2Parser.OP4) | (1 << milestone_2Parser.OP3) | (1 << milestone_2Parser.OP2) | (1 << milestone_2Parser.OP1) | (1 << milestone_2Parser.OP0) | (1 << milestone_2Parser.AND))) != 0) or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & ((1 << (milestone_2Parser.DIV - 78)) | (1 << (milestone_2Parser.IN - 78)) | (1 << (milestone_2Parser.IS - 78)) | (1 << (milestone_2Parser.ISNOT - 78)) | (1 << (milestone_2Parser.MOD - 78)) | (1 << (milestone_2Parser.NOT - 78)) | (1 << (milestone_2Parser.NOTIN - 78)) | (1 << (milestone_2Parser.OF - 78)) | (1 << (milestone_2Parser.OR - 78)) | (1 << (milestone_2Parser.SHL - 78)) | (1 << (milestone_2Parser.SHR - 78)) | (1 << (milestone_2Parser.STATIC - 78)) | (1 << (milestone_2Parser.XOR - 78)))) != 0):
                    self.state = 903
                    self.prefixOperator()
                    self.state = 908
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 909
                self.identOrLiteral()
                self.state = 913
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,85,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 910
                        self.primarySuffix() 
                    self.state = 915
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,85,self._ctx)


            elif token in [milestone_2Parser.BIND]:
                self.enterOuterAlt(localctx, 3)
                self.state = 916
                self.match(milestone_2Parser.BIND)
                self.state = 917
                self.primary()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeDescContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleExpr(self):
            return self.getTypedRuleContext(milestone_2Parser.SimpleExprContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_typeDesc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeDesc" ):
                listener.enterTypeDesc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeDesc" ):
                listener.exitTypeDesc(self)




    def typeDesc(self):

        localctx = milestone_2Parser.TypeDescContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_typeDesc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 920
            self.simpleExpr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeDefAuxContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleExpr(self):
            return self.getTypedRuleContext(milestone_2Parser.SimpleExprContext,0)


        def typeClass(self):
            return self.getTypedRuleContext(milestone_2Parser.TypeClassContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_typeDefAux

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeDefAux" ):
                listener.enterTypeDefAux(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeDefAux" ):
                listener.exitTypeDefAux(self)




    def typeDefAux(self):

        localctx = milestone_2Parser.TypeDefAuxContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_typeDefAux)
        try:
            self.state = 925
            token = self._input.LA(1)
            if token in [milestone_2Parser.T__3, milestone_2Parser.T__9, milestone_2Parser.OP9, milestone_2Parser.OP8, milestone_2Parser.OP7, milestone_2Parser.OP6, milestone_2Parser.OP5, milestone_2Parser.OP4, milestone_2Parser.OP3, milestone_2Parser.OP2, milestone_2Parser.OP1, milestone_2Parser.OP0, milestone_2Parser.IDENT, milestone_2Parser.TRIPLESTR_LIT, milestone_2Parser.STR_LIT, milestone_2Parser.CHAR_LIT, milestone_2Parser.RSTR_LIT, milestone_2Parser.GENERALIZED_STR_LIT, milestone_2Parser.GENERALIZED_TRIPLESTR_LIT, milestone_2Parser.OPEN_PAREN, milestone_2Parser.OPEN_BRACE, milestone_2Parser.OPEN_BRACK, milestone_2Parser.KEYW, milestone_2Parser.AND, milestone_2Parser.VARIABLE, milestone_2Parser.BIND, milestone_2Parser.CAST, milestone_2Parser.DISTINCT, milestone_2Parser.DIV, milestone_2Parser.ENUM, milestone_2Parser.IN, milestone_2Parser.IS, milestone_2Parser.ISNOT, milestone_2Parser.ITERATOR, milestone_2Parser.MOD, milestone_2Parser.NIL, milestone_2Parser.NOT, milestone_2Parser.NOTIN, milestone_2Parser.OBJECT, milestone_2Parser.OF, milestone_2Parser.OR, milestone_2Parser.OUT, milestone_2Parser.PROC, milestone_2Parser.PTR, milestone_2Parser.REF, milestone_2Parser.SHL, milestone_2Parser.SHR, milestone_2Parser.STATIC, milestone_2Parser.TUPLE, milestone_2Parser.XOR, milestone_2Parser.INT_LIT, milestone_2Parser.INT8_LIT, milestone_2Parser.INT16_LIT, milestone_2Parser.INT32_LIT, milestone_2Parser.INT64_LIT, milestone_2Parser.UINT_LIT, milestone_2Parser.UINT8_LIT, milestone_2Parser.UINT16_LIT, milestone_2Parser.UINT32_LIT, milestone_2Parser.UINT64_LIT, milestone_2Parser.FLOAT_LIT, milestone_2Parser.FLOAT32_LIT, milestone_2Parser.FLOAT64_LIT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 922
                self.simpleExpr()

            elif token in [milestone_2Parser.CONCEPT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 923
                self.match(milestone_2Parser.CONCEPT)
                self.state = 924
                self.typeClass()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PostExprBlocksContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.StmtContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.StmtContext,i)


        def doBlock(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.DoBlockContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.DoBlockContext,i)


        def exprList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ExprListContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ExprListContext,i)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ExprContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_postExprBlocks

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostExprBlocks" ):
                listener.enterPostExprBlocks(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostExprBlocks" ):
                listener.exitPostExprBlocks(self)




    def postExprBlocks(self):

        localctx = milestone_2Parser.PostExprBlocksContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_postExprBlocks)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 927
            self.match(milestone_2Parser.COLON)
            self.state = 929
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << milestone_2Parser.T__1) | (1 << milestone_2Parser.T__3) | (1 << milestone_2Parser.T__6) | (1 << milestone_2Parser.T__9) | (1 << milestone_2Parser.OP9) | (1 << milestone_2Parser.OP8) | (1 << milestone_2Parser.OP7) | (1 << milestone_2Parser.OP6) | (1 << milestone_2Parser.OP5) | (1 << milestone_2Parser.OP4) | (1 << milestone_2Parser.OP3) | (1 << milestone_2Parser.OP2) | (1 << milestone_2Parser.OP1) | (1 << milestone_2Parser.OP0) | (1 << milestone_2Parser.IDENT) | (1 << milestone_2Parser.COMMENT) | (1 << milestone_2Parser.TRIPLESTR_LIT) | (1 << milestone_2Parser.STR_LIT) | (1 << milestone_2Parser.CHAR_LIT) | (1 << milestone_2Parser.RSTR_LIT) | (1 << milestone_2Parser.GENERALIZED_STR_LIT) | (1 << milestone_2Parser.GENERALIZED_TRIPLESTR_LIT) | (1 << milestone_2Parser.OPEN_PAREN) | (1 << milestone_2Parser.OPEN_BRACE) | (1 << milestone_2Parser.OPEN_BRACK) | (1 << milestone_2Parser.KEYW) | (1 << milestone_2Parser.AND) | (1 << milestone_2Parser.VARIABLE))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (milestone_2Parser.BIND - 66)) | (1 << (milestone_2Parser.BREAK - 66)) | (1 << (milestone_2Parser.CAST - 66)) | (1 << (milestone_2Parser.DISCARD - 66)) | (1 << (milestone_2Parser.DISTINCT - 66)) | (1 << (milestone_2Parser.DIV - 66)) | (1 << (milestone_2Parser.ENUM - 66)) | (1 << (milestone_2Parser.FROM - 66)) | (1 << (milestone_2Parser.IMPORT - 66)) | (1 << (milestone_2Parser.IN - 66)) | (1 << (milestone_2Parser.INCLUDE - 66)) | (1 << (milestone_2Parser.IS - 66)) | (1 << (milestone_2Parser.ISNOT - 66)) | (1 << (milestone_2Parser.ITERATOR - 66)) | (1 << (milestone_2Parser.MOD - 66)) | (1 << (milestone_2Parser.NIL - 66)) | (1 << (milestone_2Parser.NOT - 66)) | (1 << (milestone_2Parser.NOTIN - 66)) | (1 << (milestone_2Parser.OBJECT - 66)) | (1 << (milestone_2Parser.OF - 66)) | (1 << (milestone_2Parser.OR - 66)) | (1 << (milestone_2Parser.OUT - 66)) | (1 << (milestone_2Parser.PROC - 66)) | (1 << (milestone_2Parser.PTR - 66)) | (1 << (milestone_2Parser.RAISE - 66)) | (1 << (milestone_2Parser.REF - 66)) | (1 << (milestone_2Parser.RETURN - 66)) | (1 << (milestone_2Parser.SHL - 66)) | (1 << (milestone_2Parser.SHR - 66)) | (1 << (milestone_2Parser.STATIC - 66)) | (1 << (milestone_2Parser.TUPLE - 66)) | (1 << (milestone_2Parser.XOR - 66)) | (1 << (milestone_2Parser.YIELD - 66)))) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & ((1 << (milestone_2Parser.INT_LIT - 130)) | (1 << (milestone_2Parser.INT8_LIT - 130)) | (1 << (milestone_2Parser.INT16_LIT - 130)) | (1 << (milestone_2Parser.INT32_LIT - 130)) | (1 << (milestone_2Parser.INT64_LIT - 130)) | (1 << (milestone_2Parser.UINT_LIT - 130)) | (1 << (milestone_2Parser.UINT8_LIT - 130)) | (1 << (milestone_2Parser.UINT16_LIT - 130)) | (1 << (milestone_2Parser.UINT32_LIT - 130)) | (1 << (milestone_2Parser.UINT64_LIT - 130)) | (1 << (milestone_2Parser.FLOAT_LIT - 130)) | (1 << (milestone_2Parser.FLOAT32_LIT - 130)) | (1 << (milestone_2Parser.FLOAT64_LIT - 130)))) != 0):
                self.state = 928
                self.stmt()


            self.state = 957
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==milestone_2Parser.T__2:
                self.state = 955
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
                if la_ == 1:
                    self.state = 931
                    self.match(milestone_2Parser.T__2)
                    self.state = 932
                    self.doBlock()
                    pass

                elif la_ == 2:
                    self.state = 933
                    self.match(milestone_2Parser.T__2)
                    self.state = 934
                    self.match(milestone_2Parser.OF)
                    self.state = 935
                    self.exprList()
                    self.state = 936
                    self.match(milestone_2Parser.COLON)
                    self.state = 937
                    self.stmt()
                    pass

                elif la_ == 3:
                    self.state = 939
                    self.match(milestone_2Parser.T__2)
                    self.state = 940
                    self.match(milestone_2Parser.ELIF)
                    self.state = 941
                    self.expr()
                    self.state = 942
                    self.match(milestone_2Parser.COLON)
                    self.state = 943
                    self.stmt()
                    pass

                elif la_ == 4:
                    self.state = 945
                    self.match(milestone_2Parser.T__2)
                    self.state = 946
                    self.match(milestone_2Parser.EXCEPT)
                    self.state = 947
                    self.exprList()
                    self.state = 948
                    self.match(milestone_2Parser.COLON)
                    self.state = 949
                    self.stmt()
                    pass

                elif la_ == 5:
                    self.state = 951
                    self.match(milestone_2Parser.T__2)
                    self.state = 952
                    self.match(milestone_2Parser.ELSE)
                    self.state = 953
                    self.match(milestone_2Parser.COLON)
                    self.state = 954
                    self.stmt()
                    pass


                self.state = 959
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExprStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleExpr(self):
            return self.getTypedRuleContext(milestone_2Parser.SimpleExprContext,0)


        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ExprContext,i)


        def doBlocks(self):
            return self.getTypedRuleContext(milestone_2Parser.DoBlocksContext,0)


        def macroColon(self):
            return self.getTypedRuleContext(milestone_2Parser.MacroColonContext,0)


        def colonBody(self):
            return self.getTypedRuleContext(milestone_2Parser.ColonBodyContext,0)


        def comma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.CommaContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.CommaContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_exprStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprStmt" ):
                listener.enterExprStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprStmt" ):
                listener.exitExprStmt(self)




    def exprStmt(self):

        localctx = milestone_2Parser.ExprStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_exprStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 960
            self.simpleExpr()
            self.state = 981
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
            if la_ == 1:
                self.state = 961
                self.match(milestone_2Parser.T__4)
                self.state = 962
                self.optInd()
                self.state = 963
                self.expr()
                self.state = 965
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
                if la_ == 1:
                    self.state = 964
                    self.colonBody()



            elif la_ == 2:
                self.state = 979
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
                if la_ == 1:
                    self.state = 967
                    self.expr()
                    self.state = 973
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==milestone_2Parser.COMMA:
                        self.state = 968
                        self.comma()
                        self.state = 969
                        self.expr()
                        self.state = 975
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 976
                    self.doBlocks()
                    pass

                elif la_ == 2:
                    self.state = 978
                    self.macroColon()
                    pass




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ImportStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.OptIndContext,i)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ExprContext,i)


        def comma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.CommaContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.CommaContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_importStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportStmt" ):
                listener.enterImportStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportStmt" ):
                listener.exitImportStmt(self)




    def importStmt(self):

        localctx = milestone_2Parser.ImportStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_importStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 983
            self.match(milestone_2Parser.IMPORT)
            self.state = 984
            self.optInd()
            self.state = 985
            self.expr()
            self.state = 1005
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
            if la_ == 1:
                self.state = 991
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,95,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 986
                        self.comma()
                        self.state = 987
                        self.expr() 
                    self.state = 993
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,95,self._ctx)

                pass

            elif la_ == 2:
                self.state = 994
                self.match(milestone_2Parser.EXCEPT)
                self.state = 995
                self.optInd()

                self.state = 996
                self.expr()
                self.state = 1002
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,96,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 997
                        self.comma()
                        self.state = 998
                        self.expr() 
                    self.state = 1004
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,96,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IncludeStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ExprContext,i)


        def comma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.CommaContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.CommaContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_includeStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIncludeStmt" ):
                listener.enterIncludeStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIncludeStmt" ):
                listener.exitIncludeStmt(self)




    def includeStmt(self):

        localctx = milestone_2Parser.IncludeStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_includeStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1007
            self.match(milestone_2Parser.INCLUDE)
            self.state = 1008
            self.optInd()
            self.state = 1009
            self.expr()
            self.state = 1015
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,98,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1010
                    self.comma()
                    self.state = 1011
                    self.expr() 
                self.state = 1017
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,98,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FromStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def moduleName(self):
            return self.getTypedRuleContext(milestone_2Parser.ModuleNameContext,0)


        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ExprContext,i)


        def comma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.CommaContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.CommaContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_fromStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFromStmt" ):
                listener.enterFromStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFromStmt" ):
                listener.exitFromStmt(self)




    def fromStmt(self):

        localctx = milestone_2Parser.FromStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_fromStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1018
            self.match(milestone_2Parser.FROM)
            self.state = 1019
            self.moduleName()
            self.state = 1020
            self.match(milestone_2Parser.IMPORT)
            self.state = 1021
            self.optInd()
            self.state = 1022
            self.expr()
            self.state = 1028
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,99,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1023
                    self.comma()
                    self.state = 1024
                    self.expr() 
                self.state = 1030
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,99,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReturnStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def expr(self):
            return self.getTypedRuleContext(milestone_2Parser.ExprContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_returnStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStmt" ):
                listener.enterReturnStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStmt" ):
                listener.exitReturnStmt(self)




    def returnStmt(self):

        localctx = milestone_2Parser.ReturnStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_returnStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1031
            self.match(milestone_2Parser.RETURN)
            self.state = 1032
            self.optInd()
            self.state = 1034
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
            if la_ == 1:
                self.state = 1033
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RaiseStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def expr(self):
            return self.getTypedRuleContext(milestone_2Parser.ExprContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_raiseStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRaiseStmt" ):
                listener.enterRaiseStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRaiseStmt" ):
                listener.exitRaiseStmt(self)




    def raiseStmt(self):

        localctx = milestone_2Parser.RaiseStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_raiseStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1036
            self.match(milestone_2Parser.RAISE)
            self.state = 1037
            self.optInd()
            self.state = 1039
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
            if la_ == 1:
                self.state = 1038
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class YieldStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def expr(self):
            return self.getTypedRuleContext(milestone_2Parser.ExprContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_yieldStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYieldStmt" ):
                listener.enterYieldStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYieldStmt" ):
                listener.exitYieldStmt(self)




    def yieldStmt(self):

        localctx = milestone_2Parser.YieldStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_yieldStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1041
            self.match(milestone_2Parser.YIELD)
            self.state = 1042
            self.optInd()
            self.state = 1044
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
            if la_ == 1:
                self.state = 1043
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DiscardStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def expr(self):
            return self.getTypedRuleContext(milestone_2Parser.ExprContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_discardStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiscardStmt" ):
                listener.enterDiscardStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiscardStmt" ):
                listener.exitDiscardStmt(self)




    def discardStmt(self):

        localctx = milestone_2Parser.DiscardStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_discardStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1046
            self.match(milestone_2Parser.DISCARD)
            self.state = 1047
            self.optInd()
            self.state = 1049
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
            if la_ == 1:
                self.state = 1048
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BreakStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def expr(self):
            return self.getTypedRuleContext(milestone_2Parser.ExprContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_breakStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreakStmt" ):
                listener.enterBreakStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreakStmt" ):
                listener.exitBreakStmt(self)




    def breakStmt(self):

        localctx = milestone_2Parser.BreakStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_breakStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1051
            self.match(milestone_2Parser.BREAK)
            self.state = 1052
            self.optInd()
            self.state = 1054
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
            if la_ == 1:
                self.state = 1053
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ContinueStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def expr(self):
            return self.getTypedRuleContext(milestone_2Parser.ExprContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_continueStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinueStmt" ):
                listener.enterContinueStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinueStmt" ):
                listener.exitContinueStmt(self)




    def continueStmt(self):

        localctx = milestone_2Parser.ContinueStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_continueStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1056
            self.match(milestone_2Parser.BREAK)
            self.state = 1057
            self.optInd()
            self.state = 1059
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
            if la_ == 1:
                self.state = 1058
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CondStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ExprContext,i)


        def colcom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ColcomContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ColcomContext,i)


        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.StmtContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.StmtContext,i)


        def COMMENT(self):
            return self.getToken(milestone_2Parser.COMMENT, 0)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_condStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondStmt" ):
                listener.enterCondStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondStmt" ):
                listener.exitCondStmt(self)




    def condStmt(self):

        localctx = milestone_2Parser.CondStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_condStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1061
            self.expr()
            self.state = 1062
            self.colcom()
            self.state = 1063
            self.stmt()
            self.state = 1065
            _la = self._input.LA(1)
            if _la==milestone_2Parser.COMMENT:
                self.state = 1064
                self.match(milestone_2Parser.COMMENT)


            self.state = 1075
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,107,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1067
                    self.match(milestone_2Parser.T__2)
                    self.state = 1068
                    self.match(milestone_2Parser.ELIF)
                    self.state = 1069
                    self.expr()
                    self.state = 1070
                    self.colcom()
                    self.state = 1071
                    self.stmt() 
                self.state = 1077
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,107,self._ctx)

            self.state = 1083
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
            if la_ == 1:
                self.state = 1078
                self.match(milestone_2Parser.T__2)
                self.state = 1079
                self.match(milestone_2Parser.ELSE)
                self.state = 1080
                self.colcom()
                self.state = 1081
                self.stmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IfStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def condStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.CondStmtContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_ifStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStmt" ):
                listener.enterIfStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStmt" ):
                listener.exitIfStmt(self)




    def ifStmt(self):

        localctx = milestone_2Parser.IfStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_ifStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1085
            self.match(milestone_2Parser.IF)
            self.state = 1086
            self.condStmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WhenStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def condStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.CondStmtContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_whenStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenStmt" ):
                listener.enterWhenStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenStmt" ):
                listener.exitWhenStmt(self)




    def whenStmt(self):

        localctx = milestone_2Parser.WhenStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_whenStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1088
            self.match(milestone_2Parser.WHEN)
            self.state = 1089
            self.condStmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WhileStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(milestone_2Parser.ExprContext,0)


        def colcom(self):
            return self.getTypedRuleContext(milestone_2Parser.ColcomContext,0)


        def stmt(self):
            return self.getTypedRuleContext(milestone_2Parser.StmtContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_whileStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStmt" ):
                listener.enterWhileStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStmt" ):
                listener.exitWhileStmt(self)




    def whileStmt(self):

        localctx = milestone_2Parser.WhileStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_whileStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1091
            self.match(milestone_2Parser.WHILE)
            self.state = 1092
            self.expr()
            self.state = 1093
            self.colcom()
            self.state = 1094
            self.stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OfBranchContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exprList(self):
            return self.getTypedRuleContext(milestone_2Parser.ExprListContext,0)


        def colcom(self):
            return self.getTypedRuleContext(milestone_2Parser.ColcomContext,0)


        def stmt(self):
            return self.getTypedRuleContext(milestone_2Parser.StmtContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_ofBranch

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOfBranch" ):
                listener.enterOfBranch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOfBranch" ):
                listener.exitOfBranch(self)




    def ofBranch(self):

        localctx = milestone_2Parser.OfBranchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_ofBranch)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1096
            self.match(milestone_2Parser.OF)
            self.state = 1097
            self.exprList()
            self.state = 1098
            self.colcom()
            self.state = 1099
            self.stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OfBranchesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ofBranch(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.OfBranchContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.OfBranchContext,i)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ExprContext,i)


        def colcom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ColcomContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ColcomContext,i)


        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.StmtContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.StmtContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_ofBranches

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOfBranches" ):
                listener.enterOfBranches(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOfBranches" ):
                listener.exitOfBranches(self)




    def ofBranches(self):

        localctx = milestone_2Parser.OfBranchesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_ofBranches)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1101
            self.ofBranch()
            self.state = 1106
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,109,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1102
                    self.match(milestone_2Parser.T__2)
                    self.state = 1103
                    self.ofBranch() 
                self.state = 1108
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,109,self._ctx)

            self.state = 1117
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,110,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1109
                    self.match(milestone_2Parser.T__2)
                    self.state = 1110
                    self.match(milestone_2Parser.ELIF)
                    self.state = 1111
                    self.expr()
                    self.state = 1112
                    self.colcom()
                    self.state = 1113
                    self.stmt() 
                self.state = 1119
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,110,self._ctx)

            self.state = 1125
            _la = self._input.LA(1)
            if _la==milestone_2Parser.T__2:
                self.state = 1120
                self.match(milestone_2Parser.T__2)
                self.state = 1121
                self.match(milestone_2Parser.ELSE)
                self.state = 1122
                self.colcom()
                self.state = 1123
                self.stmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CaseStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(milestone_2Parser.ExprContext,0)


        def ofBranches(self):
            return self.getTypedRuleContext(milestone_2Parser.OfBranchesContext,0)


        def COMMENT(self):
            return self.getToken(milestone_2Parser.COMMENT, 0)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_caseStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseStmt" ):
                listener.enterCaseStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseStmt" ):
                listener.exitCaseStmt(self)




    def caseStmt(self):

        localctx = milestone_2Parser.CaseStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_caseStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1127
            self.match(milestone_2Parser.CASE)
            self.state = 1128
            self.expr()
            self.state = 1130
            _la = self._input.LA(1)
            if _la==milestone_2Parser.COLON:
                self.state = 1129
                self.match(milestone_2Parser.COLON)


            self.state = 1133
            _la = self._input.LA(1)
            if _la==milestone_2Parser.COMMENT:
                self.state = 1132
                self.match(milestone_2Parser.COMMENT)


            self.state = 1141
            token = self._input.LA(1)
            if token in [milestone_2Parser.T__1]:
                self.state = 1135
                self.match(milestone_2Parser.T__1)
                self.state = 1136
                self.ofBranches()
                self.state = 1137
                self.match(milestone_2Parser.T__10)

            elif token in [milestone_2Parser.T__2]:
                self.state = 1139
                self.match(milestone_2Parser.T__2)
                self.state = 1140
                self.ofBranches()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TryStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colcom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ColcomContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ColcomContext,i)


        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.StmtContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.StmtContext,i)


        def exprList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ExprListContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ExprListContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_tryStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryStmt" ):
                listener.enterTryStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryStmt" ):
                listener.exitTryStmt(self)




    def tryStmt(self):

        localctx = milestone_2Parser.TryStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_tryStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1143
            self.match(milestone_2Parser.TRY)
            self.state = 1144
            self.colcom()
            self.state = 1145
            self.stmt()
            self.state = 1156
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,116,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1147
                    _la = self._input.LA(1)
                    if _la==milestone_2Parser.T__2:
                        self.state = 1146
                        self.match(milestone_2Parser.T__2)


                    self.state = 1149
                    self.match(milestone_2Parser.EXCEPT)
                    self.state = 1150
                    self.exprList()
                    self.state = 1151
                    self.colcom()
                    self.state = 1152
                    self.stmt() 
                self.state = 1158
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,116,self._ctx)

            self.state = 1166
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
            if la_ == 1:
                self.state = 1160
                _la = self._input.LA(1)
                if _la==milestone_2Parser.T__2:
                    self.state = 1159
                    self.match(milestone_2Parser.T__2)


                self.state = 1162
                self.match(milestone_2Parser.FINALLY)
                self.state = 1163
                self.colcom()
                self.state = 1164
                self.stmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TryExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colcom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ColcomContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ColcomContext,i)


        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.StmtContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.StmtContext,i)


        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.OptIndContext,i)


        def exprList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ExprListContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ExprListContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_tryExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryExpr" ):
                listener.enterTryExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryExpr" ):
                listener.exitTryExpr(self)




    def tryExpr(self):

        localctx = milestone_2Parser.TryExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_tryExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1168
            self.match(milestone_2Parser.TRY)
            self.state = 1169
            self.colcom()
            self.state = 1170
            self.stmt()
            self.state = 1179
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,119,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1171
                    self.optInd()
                    self.state = 1172
                    self.match(milestone_2Parser.EXCEPT)
                    self.state = 1173
                    self.exprList()
                    self.state = 1174
                    self.colcom()
                    self.state = 1175
                    self.stmt() 
                self.state = 1181
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,119,self._ctx)

            self.state = 1187
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
            if la_ == 1:
                self.state = 1182
                self.optInd()
                self.state = 1183
                self.match(milestone_2Parser.FINALLY)
                self.state = 1184
                self.colcom()
                self.state = 1185
                self.stmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExceptBlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colcom(self):
            return self.getTypedRuleContext(milestone_2Parser.ColcomContext,0)


        def stmt(self):
            return self.getTypedRuleContext(milestone_2Parser.StmtContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_exceptBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExceptBlock" ):
                listener.enterExceptBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExceptBlock" ):
                listener.exitExceptBlock(self)




    def exceptBlock(self):

        localctx = milestone_2Parser.ExceptBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_exceptBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1189
            self.match(milestone_2Parser.EXCEPT)
            self.state = 1190
            self.colcom()
            self.state = 1191
            self.stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BlockStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colcom(self):
            return self.getTypedRuleContext(milestone_2Parser.ColcomContext,0)


        def stmt(self):
            return self.getTypedRuleContext(milestone_2Parser.StmtContext,0)


        def symbol(self):
            return self.getTypedRuleContext(milestone_2Parser.SymbolContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_blockStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockStmt" ):
                listener.enterBlockStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockStmt" ):
                listener.exitBlockStmt(self)




    def blockStmt(self):

        localctx = milestone_2Parser.BlockStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_blockStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1193
            self.match(milestone_2Parser.BLOCK)
            self.state = 1195
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << milestone_2Parser.T__3) | (1 << milestone_2Parser.IDENT) | (1 << milestone_2Parser.KEYW))) != 0):
                self.state = 1194
                self.symbol()


            self.state = 1197
            self.colcom()
            self.state = 1198
            self.stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BlockExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colcom(self):
            return self.getTypedRuleContext(milestone_2Parser.ColcomContext,0)


        def stmt(self):
            return self.getTypedRuleContext(milestone_2Parser.StmtContext,0)


        def symbol(self):
            return self.getTypedRuleContext(milestone_2Parser.SymbolContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_blockExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockExpr" ):
                listener.enterBlockExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockExpr" ):
                listener.exitBlockExpr(self)




    def blockExpr(self):

        localctx = milestone_2Parser.BlockExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_blockExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1200
            self.match(milestone_2Parser.BLOCK)
            self.state = 1202
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << milestone_2Parser.T__3) | (1 << milestone_2Parser.IDENT) | (1 << milestone_2Parser.KEYW))) != 0):
                self.state = 1201
                self.symbol()


            self.state = 1204
            self.colcom()
            self.state = 1205
            self.stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StaticStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colcom(self):
            return self.getTypedRuleContext(milestone_2Parser.ColcomContext,0)


        def stmt(self):
            return self.getTypedRuleContext(milestone_2Parser.StmtContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_staticStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStaticStmt" ):
                listener.enterStaticStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStaticStmt" ):
                listener.exitStaticStmt(self)




    def staticStmt(self):

        localctx = milestone_2Parser.StaticStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_staticStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1207
            self.match(milestone_2Parser.STATIC)
            self.state = 1208
            self.colcom()
            self.state = 1209
            self.stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeferStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colcom(self):
            return self.getTypedRuleContext(milestone_2Parser.ColcomContext,0)


        def stmt(self):
            return self.getTypedRuleContext(milestone_2Parser.StmtContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_deferStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeferStmt" ):
                listener.enterDeferStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeferStmt" ):
                listener.exitDeferStmt(self)




    def deferStmt(self):

        localctx = milestone_2Parser.DeferStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_deferStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1211
            self.match(milestone_2Parser.DEFER)
            self.state = 1212
            self.colcom()
            self.state = 1213
            self.stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AsmStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STR_LIT(self):
            return self.getToken(milestone_2Parser.STR_LIT, 0)

        def RSTR_LIT(self):
            return self.getToken(milestone_2Parser.RSTR_LIT, 0)

        def TRIPLESTR_LIT(self):
            return self.getToken(milestone_2Parser.TRIPLESTR_LIT, 0)

        def pragma(self):
            return self.getTypedRuleContext(milestone_2Parser.PragmaContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_asmStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAsmStmt" ):
                listener.enterAsmStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAsmStmt" ):
                listener.exitAsmStmt(self)




    def asmStmt(self):

        localctx = milestone_2Parser.AsmStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_asmStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1215
            self.match(milestone_2Parser.ASM)
            self.state = 1217
            _la = self._input.LA(1)
            if _la==milestone_2Parser.T__6:
                self.state = 1216
                self.pragma()


            self.state = 1219
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << milestone_2Parser.TRIPLESTR_LIT) | (1 << milestone_2Parser.STR_LIT) | (1 << milestone_2Parser.RSTR_LIT))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GenericParamContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.SymbolContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.SymbolContext,i)


        def comma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.CommaContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.CommaContext,i)


        def colon(self):
            return self.getTypedRuleContext(milestone_2Parser.ColonContext,0)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ExprContext,i)


        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_genericParam

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericParam" ):
                listener.enterGenericParam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericParam" ):
                listener.exitGenericParam(self)




    def genericParam(self):

        localctx = milestone_2Parser.GenericParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_genericParam)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1221
            self.symbol()
            self.state = 1227
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,124,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1222
                    self.comma()
                    self.state = 1223
                    self.symbol() 
                self.state = 1229
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,124,self._ctx)

            self.state = 1233
            _la = self._input.LA(1)
            if _la==milestone_2Parser.COLON:
                self.state = 1230
                self.colon()
                self.state = 1231
                self.expr()


            self.state = 1239
            _la = self._input.LA(1)
            if _la==milestone_2Parser.T__4:
                self.state = 1235
                self.match(milestone_2Parser.T__4)
                self.state = 1236
                self.optInd()
                self.state = 1237
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GenericParamListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def optPar(self):
            return self.getTypedRuleContext(milestone_2Parser.OptParContext,0)


        def genericParam(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.GenericParamContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.GenericParamContext,i)


        def comma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.CommaContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.CommaContext,i)


        def semicolon(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.SemicolonContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.SemicolonContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_genericParamList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericParamList" ):
                listener.enterGenericParamList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericParamList" ):
                listener.exitGenericParamList(self)




    def genericParamList(self):

        localctx = milestone_2Parser.GenericParamListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_genericParamList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1241
            self.match(milestone_2Parser.OPEN_BRACK)
            self.state = 1242
            self.optInd()
            self.state = 1255
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << milestone_2Parser.T__3) | (1 << milestone_2Parser.IDENT) | (1 << milestone_2Parser.KEYW))) != 0):
                self.state = 1243
                self.genericParam()
                self.state = 1252
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==milestone_2Parser.COMMA or _la==milestone_2Parser.SEMI_COLON:
                    self.state = 1246
                    token = self._input.LA(1)
                    if token in [milestone_2Parser.COMMA]:
                        self.state = 1244
                        self.comma()

                    elif token in [milestone_2Parser.SEMI_COLON]:
                        self.state = 1245
                        self.semicolon()

                    else:
                        raise NoViableAltException(self)

                    self.state = 1248
                    self.genericParam()
                    self.state = 1254
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1257
            self.optPar()
            self.state = 1258
            self.match(milestone_2Parser.CLOSE_BRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PatternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stmt(self):
            return self.getTypedRuleContext(milestone_2Parser.StmtContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPattern" ):
                listener.enterPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPattern" ):
                listener.exitPattern(self)




    def pattern(self):

        localctx = milestone_2Parser.PatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1260
            self.match(milestone_2Parser.OPEN_BRACE)
            self.state = 1261
            self.stmt()
            self.state = 1262
            self.match(milestone_2Parser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IndAndCommentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMENT(self):
            return self.getToken(milestone_2Parser.COMMENT, 0)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_indAndComment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndAndComment" ):
                listener.enterIndAndComment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndAndComment" ):
                listener.exitIndAndComment(self)




    def indAndComment(self):

        localctx = milestone_2Parser.IndAndCommentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_indAndComment)
        self._la = 0 # Token type
        try:
            self.state = 1271
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,132,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1266
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,130,self._ctx)
                if la_ == 1:
                    self.state = 1264
                    self.match(milestone_2Parser.T__1)
                    self.state = 1265
                    self.match(milestone_2Parser.COMMENT)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1269
                _la = self._input.LA(1)
                if _la==milestone_2Parser.COMMENT:
                    self.state = 1268
                    self.match(milestone_2Parser.COMMENT)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RoutineContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def identVis(self):
            return self.getTypedRuleContext(milestone_2Parser.IdentVisContext,0)


        def paramListColon(self):
            return self.getTypedRuleContext(milestone_2Parser.ParamListColonContext,0)


        def indAndComment(self):
            return self.getTypedRuleContext(milestone_2Parser.IndAndCommentContext,0)


        def pattern(self):
            return self.getTypedRuleContext(milestone_2Parser.PatternContext,0)


        def genericParamList(self):
            return self.getTypedRuleContext(milestone_2Parser.GenericParamListContext,0)


        def pragma(self):
            return self.getTypedRuleContext(milestone_2Parser.PragmaContext,0)


        def stmt(self):
            return self.getTypedRuleContext(milestone_2Parser.StmtContext,0)


        def COMMENT(self):
            return self.getToken(milestone_2Parser.COMMENT, 0)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_routine

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoutine" ):
                listener.enterRoutine(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoutine" ):
                listener.exitRoutine(self)




    def routine(self):

        localctx = milestone_2Parser.RoutineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_routine)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1273
            self.optInd()
            self.state = 1274
            self.identVis()
            self.state = 1276
            _la = self._input.LA(1)
            if _la==milestone_2Parser.OPEN_BRACE:
                self.state = 1275
                self.pattern()


            self.state = 1279
            _la = self._input.LA(1)
            if _la==milestone_2Parser.OPEN_BRACK:
                self.state = 1278
                self.genericParamList()


            self.state = 1281
            self.paramListColon()
            self.state = 1283
            _la = self._input.LA(1)
            if _la==milestone_2Parser.T__6:
                self.state = 1282
                self.pragma()


            self.state = 1290
            _la = self._input.LA(1)
            if _la==milestone_2Parser.T__4:
                self.state = 1285
                self.match(milestone_2Parser.T__4)
                self.state = 1287
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
                if la_ == 1:
                    self.state = 1286
                    self.match(milestone_2Parser.COMMENT)


                self.state = 1289
                self.stmt()


            self.state = 1292
            self.indAndComment()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CommentStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMENT(self):
            return self.getToken(milestone_2Parser.COMMENT, 0)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_commentStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommentStmt" ):
                listener.enterCommentStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommentStmt" ):
                listener.exitCommentStmt(self)




    def commentStmt(self):

        localctx = milestone_2Parser.CommentStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_commentStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1294
            self.match(milestone_2Parser.COMMENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SectionpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def p(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.PContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.PContext,i)


        def COMMENT(self, i:int=None):
            if i is None:
                return self.getTokens(milestone_2Parser.COMMENT)
            else:
                return self.getToken(milestone_2Parser.COMMENT, i)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_sectionp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSectionp" ):
                listener.enterSectionp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSectionp" ):
                listener.exitSectionp(self)




    def sectionp(self):

        localctx = milestone_2Parser.SectionpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_sectionp)
        self._la = 0 # Token type
        try:
            self.state = 1316
            token = self._input.LA(1)
            if token in [milestone_2Parser.IDENT, milestone_2Parser.COMMENT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1297
                _la = self._input.LA(1)
                if _la==milestone_2Parser.COMMENT:
                    self.state = 1296
                    self.match(milestone_2Parser.COMMENT)


                self.state = 1299
                self.p()

            elif token in [milestone_2Parser.T__1]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1300
                self.match(milestone_2Parser.T__1)
                self.state = 1303
                token = self._input.LA(1)
                if token in [milestone_2Parser.IDENT]:
                    self.state = 1301
                    self.p()

                elif token in [milestone_2Parser.COMMENT]:
                    self.state = 1302
                    self.match(milestone_2Parser.COMMENT)

                else:
                    raise NoViableAltException(self)

                self.state = 1312
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==milestone_2Parser.T__2:
                    self.state = 1305
                    self.match(milestone_2Parser.T__2)
                    self.state = 1308
                    token = self._input.LA(1)
                    if token in [milestone_2Parser.IDENT]:
                        self.state = 1306
                        self.p()

                    elif token in [milestone_2Parser.COMMENT]:
                        self.state = 1307
                        self.match(milestone_2Parser.COMMENT)

                    else:
                        raise NoViableAltException(self)

                    self.state = 1314
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1315
                self.match(milestone_2Parser.T__10)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstantContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identWithPragma(self):
            return self.getTypedRuleContext(milestone_2Parser.IdentWithPragmaContext,0)


        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def expr(self):
            return self.getTypedRuleContext(milestone_2Parser.ExprContext,0)


        def indAndComment(self):
            return self.getTypedRuleContext(milestone_2Parser.IndAndCommentContext,0)


        def colon(self):
            return self.getTypedRuleContext(milestone_2Parser.ColonContext,0)


        def typeDesc(self):
            return self.getTypedRuleContext(milestone_2Parser.TypeDescContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_constant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant" ):
                listener.enterConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant" ):
                listener.exitConstant(self)




    def constant(self):

        localctx = milestone_2Parser.ConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_constant)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1318
            self.identWithPragma()
            self.state = 1322
            _la = self._input.LA(1)
            if _la==milestone_2Parser.COLON:
                self.state = 1319
                self.colon()
                self.state = 1320
                self.typeDesc()


            self.state = 1324
            self.match(milestone_2Parser.T__4)
            self.state = 1325
            self.optInd()
            self.state = 1326
            self.expr()
            self.state = 1327
            self.indAndComment()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.OptIndContext,i)


        def symbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.SymbolContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.SymbolContext,i)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ExprContext,i)


        def comma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.CommaContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.CommaContext,i)


        def COMMENT(self, i:int=None):
            if i is None:
                return self.getTokens(milestone_2Parser.COMMENT)
            else:
                return self.getToken(milestone_2Parser.COMMENT, i)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_enum

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnum" ):
                listener.enterEnum(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnum" ):
                listener.exitEnum(self)




    def enum(self):

        localctx = milestone_2Parser.EnumContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_enum)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1329
            self.match(milestone_2Parser.ENUM)
            self.state = 1330
            self.optInd()
            self.state = 1344 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1331
                self.symbol()
                self.state = 1332
                self.optInd()
                self.state = 1339
                _la = self._input.LA(1)
                if _la==milestone_2Parser.T__4:
                    self.state = 1333
                    self.match(milestone_2Parser.T__4)
                    self.state = 1334
                    self.optInd()
                    self.state = 1335
                    self.expr()
                    self.state = 1337
                    _la = self._input.LA(1)
                    if _la==milestone_2Parser.COMMENT:
                        self.state = 1336
                        self.match(milestone_2Parser.COMMENT)




                self.state = 1342
                _la = self._input.LA(1)
                if _la==milestone_2Parser.COMMA:
                    self.state = 1341
                    self.comma()


                self.state = 1346 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << milestone_2Parser.T__3) | (1 << milestone_2Parser.IDENT) | (1 << milestone_2Parser.KEYW))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ObjectWhenContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ExprContext,i)


        def colcom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ColcomContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ColcomContext,i)


        def objectPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ObjectPartContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ObjectPartContext,i)


        def COMMENT(self, i:int=None):
            if i is None:
                return self.getTokens(milestone_2Parser.COMMENT)
            else:
                return self.getToken(milestone_2Parser.COMMENT, i)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_objectWhen

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectWhen" ):
                listener.enterObjectWhen(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectWhen" ):
                listener.exitObjectWhen(self)




    def objectWhen(self):

        localctx = milestone_2Parser.ObjectWhenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_objectWhen)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1348
            self.match(milestone_2Parser.WHEN)
            self.state = 1349
            self.expr()
            self.state = 1350
            self.colcom()
            self.state = 1351
            self.objectPart()
            self.state = 1353
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,148,self._ctx)
            if la_ == 1:
                self.state = 1352
                self.match(milestone_2Parser.COMMENT)


            self.state = 1364
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,150,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1355
                    self.match(milestone_2Parser.ELIF)
                    self.state = 1356
                    self.expr()
                    self.state = 1357
                    self.colcom()
                    self.state = 1358
                    self.objectPart()
                    self.state = 1360
                    self._errHandler.sync(self);
                    la_ = self._interp.adaptivePredict(self._input,149,self._ctx)
                    if la_ == 1:
                        self.state = 1359
                        self.match(milestone_2Parser.COMMENT)

             
                self.state = 1366
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,150,self._ctx)

            self.state = 1373
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,152,self._ctx)
            if la_ == 1:
                self.state = 1367
                self.match(milestone_2Parser.ELSE)
                self.state = 1368
                self.colcom()
                self.state = 1369
                self.objectPart()
                self.state = 1371
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,151,self._ctx)
                if la_ == 1:
                    self.state = 1370
                    self.match(milestone_2Parser.COMMENT)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ObjectBranchContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exprList(self):
            return self.getTypedRuleContext(milestone_2Parser.ExprListContext,0)


        def colcom(self):
            return self.getTypedRuleContext(milestone_2Parser.ColcomContext,0)


        def objectPart(self):
            return self.getTypedRuleContext(milestone_2Parser.ObjectPartContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_objectBranch

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectBranch" ):
                listener.enterObjectBranch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectBranch" ):
                listener.exitObjectBranch(self)




    def objectBranch(self):

        localctx = milestone_2Parser.ObjectBranchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_objectBranch)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1375
            self.match(milestone_2Parser.OF)
            self.state = 1376
            self.exprList()
            self.state = 1377
            self.colcom()
            self.state = 1378
            self.objectPart()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ObjectBranchesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def objectBranch(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ObjectBranchContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ObjectBranchContext,i)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ExprContext,i)


        def colcom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ColcomContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ColcomContext,i)


        def objectPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ObjectPartContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ObjectPartContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_objectBranches

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectBranches" ):
                listener.enterObjectBranches(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectBranches" ):
                listener.exitObjectBranches(self)




    def objectBranches(self):

        localctx = milestone_2Parser.ObjectBranchesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_objectBranches)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1380
            self.objectBranch()
            self.state = 1385
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,153,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1381
                    self.match(milestone_2Parser.T__2)
                    self.state = 1382
                    self.objectBranch() 
                self.state = 1387
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,153,self._ctx)

            self.state = 1396
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,154,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1388
                    self.match(milestone_2Parser.T__2)
                    self.state = 1389
                    self.match(milestone_2Parser.ELIF)
                    self.state = 1390
                    self.expr()
                    self.state = 1391
                    self.colcom()
                    self.state = 1392
                    self.objectPart() 
                self.state = 1398
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,154,self._ctx)

            self.state = 1404
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,155,self._ctx)
            if la_ == 1:
                self.state = 1399
                self.match(milestone_2Parser.T__2)
                self.state = 1400
                self.match(milestone_2Parser.ELSE)
                self.state = 1401
                self.colcom()
                self.state = 1402
                self.objectPart()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ObjectCaseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identWithPragma(self):
            return self.getTypedRuleContext(milestone_2Parser.IdentWithPragmaContext,0)


        def typeDesc(self):
            return self.getTypedRuleContext(milestone_2Parser.TypeDescContext,0)


        def objectBranches(self):
            return self.getTypedRuleContext(milestone_2Parser.ObjectBranchesContext,0)


        def COMMENT(self):
            return self.getToken(milestone_2Parser.COMMENT, 0)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_objectCase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectCase" ):
                listener.enterObjectCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectCase" ):
                listener.exitObjectCase(self)




    def objectCase(self):

        localctx = milestone_2Parser.ObjectCaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_objectCase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1406
            self.match(milestone_2Parser.CASE)
            self.state = 1407
            self.identWithPragma()
            self.state = 1408
            self.match(milestone_2Parser.COLON)
            self.state = 1409
            self.typeDesc()
            self.state = 1411
            _la = self._input.LA(1)
            if _la==milestone_2Parser.COLON:
                self.state = 1410
                self.match(milestone_2Parser.COLON)


            self.state = 1414
            _la = self._input.LA(1)
            if _la==milestone_2Parser.COMMENT:
                self.state = 1413
                self.match(milestone_2Parser.COMMENT)


            self.state = 1422
            token = self._input.LA(1)
            if token in [milestone_2Parser.T__1]:
                self.state = 1416
                self.match(milestone_2Parser.T__1)
                self.state = 1417
                self.objectBranches()
                self.state = 1418
                self.match(milestone_2Parser.T__10)

            elif token in [milestone_2Parser.T__2]:
                self.state = 1420
                self.match(milestone_2Parser.T__2)
                self.state = 1421
                self.objectBranches()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ObjectPartContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def objectPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ObjectPartContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ObjectPartContext,i)


        def objectWhen(self):
            return self.getTypedRuleContext(milestone_2Parser.ObjectWhenContext,0)


        def objectCase(self):
            return self.getTypedRuleContext(milestone_2Parser.ObjectCaseContext,0)


        def declColonEquals(self):
            return self.getTypedRuleContext(milestone_2Parser.DeclColonEqualsContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_objectPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectPart" ):
                listener.enterObjectPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectPart" ):
                listener.exitObjectPart(self)




    def objectPart(self):

        localctx = milestone_2Parser.ObjectPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_objectPart)
        self._la = 0 # Token type
        try:
            self.state = 1440
            token = self._input.LA(1)
            if token in [milestone_2Parser.T__1]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1424
                self.match(milestone_2Parser.T__1)
                self.state = 1425
                self.objectPart()
                self.state = 1430
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==milestone_2Parser.T__2:
                    self.state = 1426
                    self.match(milestone_2Parser.T__2)
                    self.state = 1427
                    self.objectPart()
                    self.state = 1432
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1433
                self.match(milestone_2Parser.T__10)

            elif token in [milestone_2Parser.WHEN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1435
                self.objectWhen()

            elif token in [milestone_2Parser.CASE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1436
                self.objectCase()

            elif token in [milestone_2Parser.NIL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1437
                self.match(milestone_2Parser.NIL)

            elif token in [milestone_2Parser.DISCARD]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1438
                self.match(milestone_2Parser.DISCARD)

            elif token in [milestone_2Parser.T__3, milestone_2Parser.IDENT, milestone_2Parser.KEYW]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1439
                self.declColonEquals()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ObjectXContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def objectPart(self):
            return self.getTypedRuleContext(milestone_2Parser.ObjectPartContext,0)


        def pragma(self):
            return self.getTypedRuleContext(milestone_2Parser.PragmaContext,0)


        def typeDesc(self):
            return self.getTypedRuleContext(milestone_2Parser.TypeDescContext,0)


        def COMMENT(self):
            return self.getToken(milestone_2Parser.COMMENT, 0)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_objectX

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectX" ):
                listener.enterObjectX(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectX" ):
                listener.exitObjectX(self)




    def objectX(self):

        localctx = milestone_2Parser.ObjectXContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_objectX)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1442
            self.match(milestone_2Parser.OBJECT)
            self.state = 1444
            _la = self._input.LA(1)
            if _la==milestone_2Parser.T__6:
                self.state = 1443
                self.pragma()


            self.state = 1448
            _la = self._input.LA(1)
            if _la==milestone_2Parser.OF:
                self.state = 1446
                self.match(milestone_2Parser.OF)
                self.state = 1447
                self.typeDesc()


            self.state = 1451
            _la = self._input.LA(1)
            if _la==milestone_2Parser.COMMENT:
                self.state = 1450
                self.match(milestone_2Parser.COMMENT)


            self.state = 1453
            self.objectPart()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeClassParamContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(milestone_2Parser.SymbolContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_typeClassParam

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeClassParam" ):
                listener.enterTypeClassParam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeClassParam" ):
                listener.exitTypeClassParam(self)




    def typeClassParam(self):

        localctx = milestone_2Parser.TypeClassParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_typeClassParam)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1456
            _la = self._input.LA(1)
            if _la==milestone_2Parser.VARIABLE or _la==milestone_2Parser.OUT:
                self.state = 1455
                _la = self._input.LA(1)
                if not(_la==milestone_2Parser.VARIABLE or _la==milestone_2Parser.OUT):
                    self._errHandler.recoverInline(self)
                else:
                    self.consume()


            self.state = 1458
            self.symbol()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeClassContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeClassParam(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.TypeClassParamContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.TypeClassParamContext,i)


        def pragma(self):
            return self.getTypedRuleContext(milestone_2Parser.PragmaContext,0)


        def typeDesc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.TypeDescContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.TypeDescContext,i)


        def stmt(self):
            return self.getTypedRuleContext(milestone_2Parser.StmtContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_typeClass

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeClass" ):
                listener.enterTypeClass(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeClass" ):
                listener.exitTypeClass(self)




    def typeClass(self):

        localctx = milestone_2Parser.TypeClassContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_typeClass)
        self._la = 0 # Token type
        try:
            self.state = 1487
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,171,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1468
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << milestone_2Parser.T__3) | (1 << milestone_2Parser.IDENT) | (1 << milestone_2Parser.KEYW) | (1 << milestone_2Parser.VARIABLE))) != 0) or _la==milestone_2Parser.OUT:
                    self.state = 1460
                    self.typeClassParam()
                    self.state = 1465
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==milestone_2Parser.COMMA:
                        self.state = 1461
                        self.match(milestone_2Parser.COMMA)
                        self.state = 1462
                        self.typeClassParam()
                        self.state = 1467
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1471
                _la = self._input.LA(1)
                if _la==milestone_2Parser.T__6:
                    self.state = 1470
                    self.pragma()


                self.state = 1484
                _la = self._input.LA(1)
                if _la==milestone_2Parser.OF:
                    self.state = 1473
                    self.match(milestone_2Parser.OF)
                    self.state = 1482
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << milestone_2Parser.T__3) | (1 << milestone_2Parser.T__9) | (1 << milestone_2Parser.OP9) | (1 << milestone_2Parser.OP8) | (1 << milestone_2Parser.OP7) | (1 << milestone_2Parser.OP6) | (1 << milestone_2Parser.OP5) | (1 << milestone_2Parser.OP4) | (1 << milestone_2Parser.OP3) | (1 << milestone_2Parser.OP2) | (1 << milestone_2Parser.OP1) | (1 << milestone_2Parser.OP0) | (1 << milestone_2Parser.IDENT) | (1 << milestone_2Parser.TRIPLESTR_LIT) | (1 << milestone_2Parser.STR_LIT) | (1 << milestone_2Parser.CHAR_LIT) | (1 << milestone_2Parser.RSTR_LIT) | (1 << milestone_2Parser.GENERALIZED_STR_LIT) | (1 << milestone_2Parser.GENERALIZED_TRIPLESTR_LIT) | (1 << milestone_2Parser.OPEN_PAREN) | (1 << milestone_2Parser.OPEN_BRACE) | (1 << milestone_2Parser.OPEN_BRACK) | (1 << milestone_2Parser.KEYW) | (1 << milestone_2Parser.AND) | (1 << milestone_2Parser.VARIABLE))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (milestone_2Parser.BIND - 66)) | (1 << (milestone_2Parser.CAST - 66)) | (1 << (milestone_2Parser.DISTINCT - 66)) | (1 << (milestone_2Parser.DIV - 66)) | (1 << (milestone_2Parser.ENUM - 66)) | (1 << (milestone_2Parser.IN - 66)) | (1 << (milestone_2Parser.IS - 66)) | (1 << (milestone_2Parser.ISNOT - 66)) | (1 << (milestone_2Parser.ITERATOR - 66)) | (1 << (milestone_2Parser.MOD - 66)) | (1 << (milestone_2Parser.NIL - 66)) | (1 << (milestone_2Parser.NOT - 66)) | (1 << (milestone_2Parser.NOTIN - 66)) | (1 << (milestone_2Parser.OBJECT - 66)) | (1 << (milestone_2Parser.OF - 66)) | (1 << (milestone_2Parser.OR - 66)) | (1 << (milestone_2Parser.OUT - 66)) | (1 << (milestone_2Parser.PROC - 66)) | (1 << (milestone_2Parser.PTR - 66)) | (1 << (milestone_2Parser.REF - 66)) | (1 << (milestone_2Parser.SHL - 66)) | (1 << (milestone_2Parser.SHR - 66)) | (1 << (milestone_2Parser.STATIC - 66)) | (1 << (milestone_2Parser.TUPLE - 66)) | (1 << (milestone_2Parser.XOR - 66)))) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & ((1 << (milestone_2Parser.INT_LIT - 130)) | (1 << (milestone_2Parser.INT8_LIT - 130)) | (1 << (milestone_2Parser.INT16_LIT - 130)) | (1 << (milestone_2Parser.INT32_LIT - 130)) | (1 << (milestone_2Parser.INT64_LIT - 130)) | (1 << (milestone_2Parser.UINT_LIT - 130)) | (1 << (milestone_2Parser.UINT8_LIT - 130)) | (1 << (milestone_2Parser.UINT16_LIT - 130)) | (1 << (milestone_2Parser.UINT32_LIT - 130)) | (1 << (milestone_2Parser.UINT64_LIT - 130)) | (1 << (milestone_2Parser.FLOAT_LIT - 130)) | (1 << (milestone_2Parser.FLOAT32_LIT - 130)) | (1 << (milestone_2Parser.FLOAT64_LIT - 130)))) != 0):
                        self.state = 1474
                        self.typeDesc()
                        self.state = 1479
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==milestone_2Parser.COMMA:
                            self.state = 1475
                            self.match(milestone_2Parser.COMMA)
                            self.state = 1476
                            self.typeDesc()
                            self.state = 1481
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)





                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1486
                self.stmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeDefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identWithPragmaDot(self):
            return self.getTypedRuleContext(milestone_2Parser.IdentWithPragmaDotContext,0)


        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def typeDefAux(self):
            return self.getTypedRuleContext(milestone_2Parser.TypeDefAuxContext,0)


        def genericParamList(self):
            return self.getTypedRuleContext(milestone_2Parser.GenericParamListContext,0)


        def indAndComment(self):
            return self.getTypedRuleContext(milestone_2Parser.IndAndCommentContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_typeDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeDef" ):
                listener.enterTypeDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeDef" ):
                listener.exitTypeDef(self)




    def typeDef(self):

        localctx = milestone_2Parser.TypeDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_typeDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1489
            self.identWithPragmaDot()
            self.state = 1491
            _la = self._input.LA(1)
            if _la==milestone_2Parser.OPEN_BRACK:
                self.state = 1490
                self.genericParamList()


            self.state = 1493
            self.match(milestone_2Parser.T__4)
            self.state = 1494
            self.optInd()
            self.state = 1495
            self.typeDefAux()
            self.state = 1497
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,173,self._ctx)
            if la_ == 1:
                self.state = 1496
                self.indAndComment()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VarTupleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.OptIndContext,i)


        def identWithPragma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.IdentWithPragmaContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.IdentWithPragmaContext,i)


        def optPar(self):
            return self.getTypedRuleContext(milestone_2Parser.OptParContext,0)


        def expr(self):
            return self.getTypedRuleContext(milestone_2Parser.ExprContext,0)


        def comma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.CommaContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.CommaContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_varTuple

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarTuple" ):
                listener.enterVarTuple(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarTuple" ):
                listener.exitVarTuple(self)




    def varTuple(self):

        localctx = milestone_2Parser.VarTupleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_varTuple)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1499
            self.match(milestone_2Parser.OPEN_PAREN)
            self.state = 1500
            self.optInd()
            self.state = 1501
            self.identWithPragma()
            self.state = 1507
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==milestone_2Parser.COMMA:
                self.state = 1502
                self.comma()
                self.state = 1503
                self.identWithPragma()
                self.state = 1509
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1510
            self.optPar()
            self.state = 1511
            self.match(milestone_2Parser.CLOSE_PAREN)
            self.state = 1512
            self.match(milestone_2Parser.T__4)
            self.state = 1513
            self.optInd()
            self.state = 1514
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ColonBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colcom(self):
            return self.getTypedRuleContext(milestone_2Parser.ColcomContext,0)


        def stmt(self):
            return self.getTypedRuleContext(milestone_2Parser.StmtContext,0)


        def doBlocks(self):
            return self.getTypedRuleContext(milestone_2Parser.DoBlocksContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_colonBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColonBody" ):
                listener.enterColonBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColonBody" ):
                listener.exitColonBody(self)




    def colonBody(self):

        localctx = milestone_2Parser.ColonBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_colonBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1516
            self.colcom()
            self.state = 1517
            self.stmt()
            self.state = 1519
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,175,self._ctx)
            if la_ == 1:
                self.state = 1518
                self.doBlocks()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VariableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def indAndComment(self):
            return self.getTypedRuleContext(milestone_2Parser.IndAndCommentContext,0)


        def varTuple(self):
            return self.getTypedRuleContext(milestone_2Parser.VarTupleContext,0)


        def identColonEquals(self):
            return self.getTypedRuleContext(milestone_2Parser.IdentColonEqualsContext,0)


        def colonBody(self):
            return self.getTypedRuleContext(milestone_2Parser.ColonBodyContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_variable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable" ):
                listener.enterVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable" ):
                listener.exitVariable(self)




    def variable(self):

        localctx = milestone_2Parser.VariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_variable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1523
            token = self._input.LA(1)
            if token in [milestone_2Parser.OPEN_PAREN]:
                self.state = 1521
                self.varTuple()

            elif token in [milestone_2Parser.IDENT]:
                self.state = 1522
                self.identColonEquals()

            else:
                raise NoViableAltException(self)

            self.state = 1526
            _la = self._input.LA(1)
            if _la==milestone_2Parser.COLON:
                self.state = 1525
                self.colonBody()


            self.state = 1528
            self.indAndComment()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BindStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def qualifiedIdent(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.QualifiedIdentContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.QualifiedIdentContext,i)


        def comma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.CommaContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.CommaContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_bindStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBindStmt" ):
                listener.enterBindStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBindStmt" ):
                listener.exitBindStmt(self)




    def bindStmt(self):

        localctx = milestone_2Parser.BindStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_bindStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1530
            self.match(milestone_2Parser.BIND)
            self.state = 1531
            self.optInd()
            self.state = 1532
            self.qualifiedIdent()
            self.state = 1538
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==milestone_2Parser.COMMA:
                self.state = 1533
                self.comma()
                self.state = 1534
                self.qualifiedIdent()
                self.state = 1540
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MixinStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def qualifiedIdent(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.QualifiedIdentContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.QualifiedIdentContext,i)


        def comma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.CommaContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.CommaContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_mixinStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMixinStmt" ):
                listener.enterMixinStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMixinStmt" ):
                listener.exitMixinStmt(self)




    def mixinStmt(self):

        localctx = milestone_2Parser.MixinStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_mixinStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1541
            self.match(milestone_2Parser.MIXIN)
            self.state = 1542
            self.optInd()
            self.state = 1543
            self.qualifiedIdent()
            self.state = 1549
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==milestone_2Parser.COMMA:
                self.state = 1544
                self.comma()
                self.state = 1545
                self.qualifiedIdent()
                self.state = 1551
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PragmaStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pragma(self):
            return self.getTypedRuleContext(milestone_2Parser.PragmaContext,0)


        def stmt(self):
            return self.getTypedRuleContext(milestone_2Parser.StmtContext,0)


        def COMMENT(self):
            return self.getToken(milestone_2Parser.COMMENT, 0)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_pragmaStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragmaStmt" ):
                listener.enterPragmaStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragmaStmt" ):
                listener.exitPragmaStmt(self)




    def pragmaStmt(self):

        localctx = milestone_2Parser.PragmaStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_pragmaStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1552
            self.pragma()
            self.state = 1558
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,181,self._ctx)
            if la_ == 1:
                self.state = 1553
                self.match(milestone_2Parser.COLON)
                self.state = 1555
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,180,self._ctx)
                if la_ == 1:
                    self.state = 1554
                    self.match(milestone_2Parser.COMMENT)


                self.state = 1557
                self.stmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SimpleStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exprStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.ExprStmtContext,0)


        def COMMENT(self):
            return self.getToken(milestone_2Parser.COMMENT, 0)

        def returnStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.ReturnStmtContext,0)


        def raiseStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.RaiseStmtContext,0)


        def yieldStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.YieldStmtContext,0)


        def discardStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.DiscardStmtContext,0)


        def breakStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.BreakStmtContext,0)


        def continueStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.ContinueStmtContext,0)


        def pragmaStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.PragmaStmtContext,0)


        def importStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.ImportStmtContext,0)


        def exportStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.ExportStmtContext,0)


        def fromStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.FromStmtContext,0)


        def includeStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.IncludeStmtContext,0)


        def commentStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.CommentStmtContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_simpleStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleStmt" ):
                listener.enterSimpleStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleStmt" ):
                listener.exitSimpleStmt(self)




    def simpleStmt(self):

        localctx = milestone_2Parser.SimpleStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_simpleStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1575
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,183,self._ctx)
            if la_ == 1:
                self.state = 1572
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,182,self._ctx)
                if la_ == 1:
                    self.state = 1560
                    self.returnStmt()
                    pass

                elif la_ == 2:
                    self.state = 1561
                    self.raiseStmt()
                    pass

                elif la_ == 3:
                    self.state = 1562
                    self.yieldStmt()
                    pass

                elif la_ == 4:
                    self.state = 1563
                    self.discardStmt()
                    pass

                elif la_ == 5:
                    self.state = 1564
                    self.breakStmt()
                    pass

                elif la_ == 6:
                    self.state = 1565
                    self.continueStmt()
                    pass

                elif la_ == 7:
                    self.state = 1566
                    self.pragmaStmt()
                    pass

                elif la_ == 8:
                    self.state = 1567
                    self.importStmt()
                    pass

                elif la_ == 9:
                    self.state = 1568
                    self.exportStmt()
                    pass

                elif la_ == 10:
                    self.state = 1569
                    self.fromStmt()
                    pass

                elif la_ == 11:
                    self.state = 1570
                    self.includeStmt()
                    pass

                elif la_ == 12:
                    self.state = 1571
                    self.commentStmt()
                    pass


                pass

            elif la_ == 2:
                self.state = 1574
                self.exprStmt()
                pass


            self.state = 1578
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,184,self._ctx)
            if la_ == 1:
                self.state = 1577
                self.match(milestone_2Parser.COMMENT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ComplexOrSimpleStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ifStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.IfStmtContext,0)


        def whenStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.WhenStmtContext,0)


        def whileStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.WhileStmtContext,0)


        def tryStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.TryStmtContext,0)


        def forStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.ForStmtContext,0)


        def blockStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.BlockStmtContext,0)


        def staticStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.StaticStmtContext,0)


        def deferStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.DeferStmtContext,0)


        def asmStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.AsmStmtContext,0)


        def routine(self):
            return self.getTypedRuleContext(milestone_2Parser.RoutineContext,0)


        def sectionTypeDef(self):
            return self.getTypedRuleContext(milestone_2Parser.SectionTypeDefContext,0)


        def sectionConstant(self):
            return self.getTypedRuleContext(milestone_2Parser.SectionConstantContext,0)


        def sectionVariable(self):
            return self.getTypedRuleContext(milestone_2Parser.SectionVariableContext,0)


        def bindStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.BindStmtContext,0)


        def mixinStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.MixinStmtContext,0)


        def simpleStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.SimpleStmtContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_complexOrSimpleStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComplexOrSimpleStmt" ):
                listener.enterComplexOrSimpleStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComplexOrSimpleStmt" ):
                listener.exitComplexOrSimpleStmt(self)




    def complexOrSimpleStmt(self):

        localctx = milestone_2Parser.ComplexOrSimpleStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_complexOrSimpleStmt)
        self._la = 0 # Token type
        try:
            self.state = 1612
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,186,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1609
                token = self._input.LA(1)
                if token in [milestone_2Parser.IF]:
                    self.state = 1580
                    self.ifStmt()

                elif token in [milestone_2Parser.WHEN]:
                    self.state = 1581
                    self.whenStmt()

                elif token in [milestone_2Parser.WHILE]:
                    self.state = 1582
                    self.whileStmt()

                elif token in [milestone_2Parser.TRY]:
                    self.state = 1583
                    self.tryStmt()

                elif token in [milestone_2Parser.FOR]:
                    self.state = 1584
                    self.forStmt()

                elif token in [milestone_2Parser.BLOCK]:
                    self.state = 1585
                    self.blockStmt()

                elif token in [milestone_2Parser.STATIC]:
                    self.state = 1586
                    self.staticStmt()

                elif token in [milestone_2Parser.DEFER]:
                    self.state = 1587
                    self.deferStmt()

                elif token in [milestone_2Parser.ASM]:
                    self.state = 1588
                    self.asmStmt()

                elif token in [milestone_2Parser.PROC]:
                    self.state = 1589
                    self.match(milestone_2Parser.PROC)
                    self.state = 1590
                    self.routine()

                elif token in [milestone_2Parser.METHOD]:
                    self.state = 1591
                    self.match(milestone_2Parser.METHOD)
                    self.state = 1592
                    self.routine()

                elif token in [milestone_2Parser.ITERATOR]:
                    self.state = 1593
                    self.match(milestone_2Parser.ITERATOR)
                    self.state = 1594
                    self.routine()

                elif token in [milestone_2Parser.MACRO]:
                    self.state = 1595
                    self.match(milestone_2Parser.MACRO)
                    self.state = 1596
                    self.routine()

                elif token in [milestone_2Parser.TEMPLATE]:
                    self.state = 1597
                    self.match(milestone_2Parser.TEMPLATE)
                    self.state = 1598
                    self.routine()

                elif token in [milestone_2Parser.CONVERTER]:
                    self.state = 1599
                    self.match(milestone_2Parser.CONVERTER)
                    self.state = 1600
                    self.routine()

                elif token in [milestone_2Parser.TYPE]:
                    self.state = 1601
                    self.match(milestone_2Parser.TYPE)
                    self.state = 1602
                    self.sectionTypeDef()

                elif token in [milestone_2Parser.CONST]:
                    self.state = 1603
                    self.match(milestone_2Parser.CONST)
                    self.state = 1604
                    self.sectionConstant()

                elif token in [milestone_2Parser.VARIABLE, milestone_2Parser.LET, milestone_2Parser.USING]:
                    self.state = 1605
                    _la = self._input.LA(1)
                    if not(((((_la - 62)) & ~0x3f) == 0 and ((1 << (_la - 62)) & ((1 << (milestone_2Parser.VARIABLE - 62)) | (1 << (milestone_2Parser.LET - 62)) | (1 << (milestone_2Parser.USING - 62)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self.consume()
                    self.state = 1606
                    self.sectionVariable()

                elif token in [milestone_2Parser.BIND]:
                    self.state = 1607
                    self.bindStmt()

                elif token in [milestone_2Parser.MIXIN]:
                    self.state = 1608
                    self.mixinStmt()

                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1611
                self.simpleStmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def complexOrSimpleStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ComplexOrSimpleStmtContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ComplexOrSimpleStmtContext,i)


        def simpleStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.SimpleStmtContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.SimpleStmtContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStmt" ):
                listener.enterStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStmt" ):
                listener.exitStmt(self)




    def stmt(self):

        localctx = milestone_2Parser.StmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_stmt)
        self._la = 0 # Token type
        try:
            self.state = 1633
            token = self._input.LA(1)
            if token in [milestone_2Parser.T__1]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1614
                self.match(milestone_2Parser.T__1)
                self.state = 1615
                self.complexOrSimpleStmt()
                self.state = 1620
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==milestone_2Parser.T__2 or _la==milestone_2Parser.SEMI_COLON:
                    self.state = 1616
                    _la = self._input.LA(1)
                    if not(_la==milestone_2Parser.T__2 or _la==milestone_2Parser.SEMI_COLON):
                        self._errHandler.recoverInline(self)
                    else:
                        self.consume()
                    self.state = 1617
                    self.complexOrSimpleStmt()
                    self.state = 1622
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1623
                self.match(milestone_2Parser.T__10)

            elif token in [milestone_2Parser.T__3, milestone_2Parser.T__6, milestone_2Parser.T__9, milestone_2Parser.OP9, milestone_2Parser.OP8, milestone_2Parser.OP7, milestone_2Parser.OP6, milestone_2Parser.OP5, milestone_2Parser.OP4, milestone_2Parser.OP3, milestone_2Parser.OP2, milestone_2Parser.OP1, milestone_2Parser.OP0, milestone_2Parser.IDENT, milestone_2Parser.COMMENT, milestone_2Parser.TRIPLESTR_LIT, milestone_2Parser.STR_LIT, milestone_2Parser.CHAR_LIT, milestone_2Parser.RSTR_LIT, milestone_2Parser.GENERALIZED_STR_LIT, milestone_2Parser.GENERALIZED_TRIPLESTR_LIT, milestone_2Parser.OPEN_PAREN, milestone_2Parser.OPEN_BRACE, milestone_2Parser.OPEN_BRACK, milestone_2Parser.KEYW, milestone_2Parser.AND, milestone_2Parser.VARIABLE, milestone_2Parser.BIND, milestone_2Parser.BREAK, milestone_2Parser.CAST, milestone_2Parser.DISCARD, milestone_2Parser.DISTINCT, milestone_2Parser.DIV, milestone_2Parser.ENUM, milestone_2Parser.FROM, milestone_2Parser.IMPORT, milestone_2Parser.IN, milestone_2Parser.INCLUDE, milestone_2Parser.IS, milestone_2Parser.ISNOT, milestone_2Parser.ITERATOR, milestone_2Parser.MOD, milestone_2Parser.NIL, milestone_2Parser.NOT, milestone_2Parser.NOTIN, milestone_2Parser.OBJECT, milestone_2Parser.OF, milestone_2Parser.OR, milestone_2Parser.OUT, milestone_2Parser.PROC, milestone_2Parser.PTR, milestone_2Parser.RAISE, milestone_2Parser.REF, milestone_2Parser.RETURN, milestone_2Parser.SHL, milestone_2Parser.SHR, milestone_2Parser.STATIC, milestone_2Parser.TUPLE, milestone_2Parser.XOR, milestone_2Parser.YIELD, milestone_2Parser.INT_LIT, milestone_2Parser.INT8_LIT, milestone_2Parser.INT16_LIT, milestone_2Parser.INT32_LIT, milestone_2Parser.INT64_LIT, milestone_2Parser.UINT_LIT, milestone_2Parser.UINT8_LIT, milestone_2Parser.UINT16_LIT, milestone_2Parser.UINT32_LIT, milestone_2Parser.UINT64_LIT, milestone_2Parser.FLOAT_LIT, milestone_2Parser.FLOAT32_LIT, milestone_2Parser.FLOAT64_LIT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1625
                self.simpleStmt()
                self.state = 1630
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,188,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1626
                        self.match(milestone_2Parser.SEMI_COLON)
                        self.state = 1627
                        self.simpleStmt() 
                    self.state = 1632
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,188,self._ctx)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StartContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def module(self):
            return self.getTypedRuleContext(milestone_2Parser.ModuleContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_start

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStart" ):
                listener.enterStart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStart" ):
                listener.exitStart(self)




    def start(self):

        localctx = milestone_2Parser.StartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_start)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1635
            self.module()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





