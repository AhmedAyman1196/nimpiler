# Generated from milestone_2.g4 by ANTLR 4.5.3
# encoding: utf-8
from antlr4 import *
from io import StringIO

def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\3\u0099")
        buf.write("\u0587\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\3")
        buf.write("\2\3\2\3\2\7\2\u00f6\n\2\f\2\16\2\u00f9\13\2\5\2\u00fb")
        buf.write("\n\2\3\3\3\3\5\3\u00ff\n\3\3\4\3\4\5\4\u0103\n\4\3\5\3")
        buf.write("\5\5\5\u0107\n\5\3\6\3\6\5\6\u010b\n\6\3\7\3\7\3\b\3\b")
        buf.write("\3\t\5\t\u0112\n\t\3\t\5\t\u0115\n\t\3\n\5\n\u0118\n\n")
        buf.write("\3\13\3\13\3\f\3\f\3\f\3\f\5\f\u0120\n\f\3\r\3\r\3\r\3")
        buf.write("\r\7\r\u0126\n\r\f\r\16\r\u0129\13\r\3\16\3\16\3\16\3")
        buf.write("\16\7\16\u012f\n\16\f\16\16\16\u0132\13\16\3\16\5\16\u0135")
        buf.write("\n\16\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\5\17\u013f")
        buf.write("\n\17\3\20\3\20\3\20\3\20\3\20\3\20\3\20\5\20\u0148\n")
        buf.write("\20\3\21\3\21\3\21\3\21\3\21\5\21\u014f\n\21\3\22\3\22")
        buf.write("\3\22\3\22\7\22\u0155\n\22\f\22\16\22\u0158\13\22\3\22")
        buf.write("\5\22\u015b\n\22\3\22\3\22\3\23\3\23\3\23\3\23\3\23\3")
        buf.write("\23\3\23\3\23\3\23\3\23\3\23\3\23\3\24\3\24\3\25\3\25")
        buf.write("\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26")
        buf.write("\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\5\26\u0182\n")
        buf.write("\26\3\27\3\27\3\30\3\30\3\30\3\30\3\30\3\30\3\30\5\30")
        buf.write("\u018d\n\30\3\31\3\31\3\31\3\31\5\31\u0193\n\31\7\31\u0195")
        buf.write("\n\31\f\31\16\31\u0198\13\31\3\31\3\31\3\31\3\32\3\32")
        buf.write("\3\32\3\32\5\32\u01a1\n\32\7\32\u01a3\n\32\f\32\16\32")
        buf.write("\u01a6\13\32\3\32\3\32\3\32\3\33\3\33\3\33\5\33\u01ae")
        buf.write("\n\33\7\33\u01b0\n\33\f\33\16\33\u01b3\13\33\3\33\3\33")
        buf.write("\5\33\u01b7\n\33\3\33\3\33\3\33\3\33\3\33\5\33\u01be\n")
        buf.write("\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33")
        buf.write("\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\5\33\u01d2\n")
        buf.write("\33\3\33\5\33\u01d5\n\33\3\34\3\34\3\35\3\35\3\36\3\36")
        buf.write("\3\37\3\37\3 \3 \3!\3!\3\"\3\"\3#\3#\3$\3$\3%\3%\3&\3")
        buf.write("&\3\'\3\'\3(\3(\3)\3)\3*\3*\3+\3+\3,\3,\3-\3-\3.\3.\3")
        buf.write("/\3/\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60")
        buf.write("\7\60\u0209\n\60\f\60\16\60\u020c\13\60\3\60\3\60\3\60")
        buf.write("\3\60\3\61\3\61\3\61\3\62\3\62\3\62\3\63\3\63\3\63\3\63")
        buf.write("\5\63\u021c\n\63\7\63\u021e\n\63\f\63\16\63\u0221\13\63")
        buf.write("\3\63\3\63\3\63\3\64\3\64\5\64\u0228\n\64\3\65\3\65\3")
        buf.write("\65\3\65\3\65\5\65\u022f\n\65\3\66\3\66\5\66\u0233\n\66")
        buf.write("\3\67\3\67\5\67\u0237\n\67\38\38\38\38\78\u023d\n8\f8")
        buf.write("\168\u0240\138\38\58\u0243\n8\38\38\38\38\58\u0249\n8")
        buf.write("\38\38\38\38\58\u024f\n8\39\39\39\39\79\u0255\n9\f9\16")
        buf.write("9\u0258\139\39\59\u025b\n9\39\39\39\39\59\u0261\n9\39")
        buf.write("\39\39\39\59\u0267\n9\3:\3:\3:\3:\3:\3:\3:\5:\u0270\n")
        buf.write(":\7:\u0272\n:\f:\16:\u0275\13:\3:\3:\3:\3;\3;\5;\u027c")
        buf.write("\n;\3;\3;\3;\3;\7;\u0282\n;\f;\16;\u0285\13;\5;\u0287")
        buf.write("\n;\3<\3<\3=\3=\3=\3=\3=\3=\3=\3=\7=\u0293\n=\f=\16=\u0296")
        buf.write("\13=\5=\u0298\n=\3=\3=\3>\5>\u029d\n>\3>\3>\3>\3>\5>\u02a3")
        buf.write("\n>\3?\5?\u02a6\n?\3?\3?\3?\3?\5?\u02ac\n?\3@\3@\3@\5")
        buf.write("@\u02b1\n@\3@\3@\3@\3A\3A\3A\5A\u02b9\nA\3A\3A\5A\u02bd")
        buf.write("\nA\3A\5A\u02c0\nA\3B\3B\3B\3B\3C\3C\3C\3C\3C\7C\u02cb")
        buf.write("\nC\fC\16C\u02ce\13C\3C\3C\3C\3C\3C\3D\3D\3E\3E\3E\3E")
        buf.write("\7E\u02db\nE\fE\16E\u02de\13E\3E\3E\7E\u02e2\nE\fE\16")
        buf.write("E\u02e5\13E\3E\3E\5E\u02e9\nE\3F\3F\3F\3F\3F\3F\7F\u02f1")
        buf.write("\nF\fF\16F\u02f4\13F\3F\3F\3F\3F\3F\3F\7F\u02fc\nF\fF")
        buf.write("\16F\u02ff\13F\5F\u0301\nF\3G\3G\3G\3G\3G\3G\7G\u0309")
        buf.write("\nG\fG\16G\u030c\13G\3H\3H\3H\3H\3H\3H\3H\3H\7H\u0316")
        buf.write("\nH\fH\16H\u0319\13H\3I\3I\3I\5I\u031e\nI\3J\3J\3J\5J")
        buf.write("\u0323\nJ\3K\3K\3K\5K\u0328\nK\3L\3L\3L\5L\u032d\nL\3")
        buf.write("M\3M\3M\5M\u0332\nM\3N\3N\3N\5N\u0337\nN\3O\3O\3O\3O\5")
        buf.write("O\u033d\nO\3O\3O\3O\3O\3O\3O\7O\u0345\nO\fO\16O\u0348")
        buf.write("\13O\3O\3O\3O\3O\3O\5O\u034f\nO\3P\3P\3P\3Q\3Q\3Q\3R\3")
        buf.write("R\3R\3R\3R\3S\3S\3S\3S\3S\3T\3T\3T\7T\u0364\nT\fT\16T")
        buf.write("\u0367\13T\3T\3T\3T\3T\3T\3T\7T\u036f\nT\fT\16T\u0372")
        buf.write("\13T\3T\3T\3T\3T\3T\5T\u0379\nT\3U\3U\3U\5U\u037e\nU\3")
        buf.write("U\5U\u0381\nU\3U\3U\3U\3U\3U\3U\5U\u0389\nU\3V\3V\3V\3")
        buf.write("V\5V\u038f\nV\3V\3V\5V\u0393\nV\3V\5V\u0396\nV\3V\3V\3")
        buf.write("V\3V\3V\7V\u039d\nV\fV\16V\u03a0\13V\3V\5V\u03a3\nV\3")
        buf.write("V\3V\3V\3V\5V\u03a9\nV\3W\3W\3W\3W\3W\3W\3W\5W\u03b2\n")
        buf.write("W\3W\3W\3W\3W\3W\3W\7W\u03ba\nW\fW\16W\u03bd\13W\3W\3")
        buf.write("W\3W\3W\3W\5W\u03c4\nW\3X\3X\3X\3X\3Y\3Y\5Y\u03cc\nY\3")
        buf.write("Y\3Y\3Y\3Z\3Z\5Z\u03d3\nZ\3Z\3Z\3Z\3[\3[\3[\3[\3\\\3\\")
        buf.write("\3\\\3\\\3]\3]\5]\u03e2\n]\3]\3]\3^\3^\3^\3^\7^\u03ea")
        buf.write("\n^\f^\16^\u03ed\13^\3^\3^\3^\5^\u03f2\n^\3^\3^\3^\3^")
        buf.write("\5^\u03f8\n^\3_\3_\3_\3_\3_\5_\u03ff\n_\3_\3_\7_\u0403")
        buf.write("\n_\f_\16_\u0406\13_\5_\u0408\n_\3_\3_\3_\3`\3`\3`\3`")
        buf.write("\3a\3a\5a\u0413\na\3a\5a\u0416\na\5a\u0418\na\3b\3b\3")
        buf.write("b\5b\u041d\nb\3b\5b\u0420\nb\3b\3b\5b\u0424\nb\3b\3b\5")
        buf.write("b\u0428\nb\3b\5b\u042b\nb\3b\3b\3c\3c\3d\5d\u0432\nd\3")
        buf.write("d\3d\3d\3d\5d\u0438\nd\3d\3d\3d\5d\u043d\nd\7d\u043f\n")
        buf.write("d\fd\16d\u0442\13d\3d\5d\u0445\nd\3e\3e\3e\3e\5e\u044b")
        buf.write("\ne\3e\3e\3e\3e\3e\3f\3f\3f\3f\3f\3f\3f\3f\5f\u045a\n")
        buf.write("f\5f\u045c\nf\3f\5f\u045f\nf\6f\u0461\nf\rf\16f\u0462")
        buf.write("\3g\3g\3g\3g\3g\5g\u046a\ng\3g\3g\3g\3g\3g\5g\u0471\n")
        buf.write("g\7g\u0473\ng\fg\16g\u0476\13g\3g\3g\3g\3g\5g\u047c\n")
        buf.write("g\5g\u047e\ng\3h\3h\3h\3h\3h\3i\3i\3i\7i\u0488\ni\fi\16")
        buf.write("i\u048b\13i\3i\3i\3i\3i\3i\3i\7i\u0493\ni\fi\16i\u0496")
        buf.write("\13i\3i\3i\3i\3i\3i\5i\u049d\ni\3j\3j\3j\3j\3j\5j\u04a4")
        buf.write("\nj\3j\5j\u04a7\nj\3j\3j\3j\3j\3j\3j\5j\u04af\nj\3k\3")
        buf.write("k\3k\3k\7k\u04b5\nk\fk\16k\u04b8\13k\3k\3k\3k\3k\3k\3")
        buf.write("k\3k\5k\u04c1\nk\3l\3l\5l\u04c5\nl\3l\3l\5l\u04c9\nl\3")
        buf.write("l\5l\u04cc\nl\3l\3l\3m\5m\u04d1\nm\3m\3m\3n\3n\3n\7n\u04d8")
        buf.write("\nn\fn\16n\u04db\13n\5n\u04dd\nn\3n\5n\u04e0\nn\3n\3n")
        buf.write("\3n\3n\7n\u04e6\nn\fn\16n\u04e9\13n\5n\u04eb\nn\5n\u04ed")
        buf.write("\nn\3n\3n\5n\u04f1\nn\3o\3o\5o\u04f5\no\3o\3o\3o\3o\5")
        buf.write("o\u04fb\no\3p\3p\3p\3p\3p\3p\7p\u0503\np\fp\16p\u0506")
        buf.write("\13p\3p\3p\3p\3p\3p\3p\3q\3q\3q\5q\u0511\nq\3r\3r\5r\u0515")
        buf.write("\nr\3r\5r\u0518\nr\3r\3r\3s\3s\3s\3s\3s\3s\7s\u0522\n")
        buf.write("s\fs\16s\u0525\13s\3t\3t\3t\3t\3t\3t\7t\u052d\nt\ft\16")
        buf.write("t\u0530\13t\3u\3u\3u\5u\u0535\nu\3u\5u\u0538\nu\3v\3v")
        buf.write("\3v\3v\3v\3v\3v\3v\3v\3v\3v\3v\5v\u0546\nv\3v\5v\u0549")
        buf.write("\nv\3v\5v\u054c\nv\3w\3w\3w\3w\3w\3w\3w\3w\3w\3w\3w\3")
        buf.write("w\3w\3w\3w\3w\3w\3w\3w\3w\3w\3w\3w\3w\3w\3w\3w\3w\3w\5")
        buf.write("w\u056b\nw\3w\5w\u056e\nw\3x\3x\3x\3x\7x\u0574\nx\fx\16")
        buf.write("x\u0577\13x\3x\3x\3x\3x\3x\7x\u057e\nx\fx\16x\u0581\13")
        buf.write("x\5x\u0583\nx\3y\3y\3y\2\2z\2\4\6\b\n\f\16\20\22\24\26")
        buf.write("\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\")
        buf.write("^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a")
        buf.write("\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c")
        buf.write("\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae")
        buf.write("\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0")
        buf.write("\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2")
        buf.write("\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4")
        buf.write("\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\2\13\4\2\3\3\61\61")
        buf.write("\r\2\4\4\63\63DDRRUV\\\\^_abikss\u008f\u0098\4\2\3\3\5")
        buf.write("\5\17\2\64\6499;;>>BBJJLMPPSSXX[[mmqr\3\2\30\31\4\2\n")
        buf.write("\n--\4\2\24\25\27\27\4\2\64\64cc\5\2\64\64XXpp\u05f0\2")
        buf.write("\u00fa\3\2\2\2\4\u00fc\3\2\2\2\6\u0100\3\2\2\2\b\u0104")
        buf.write("\3\2\2\2\n\u0108\3\2\2\2\f\u010c\3\2\2\2\16\u010e\3\2")
        buf.write("\2\2\20\u0111\3\2\2\2\22\u0117\3\2\2\2\24\u0119\3\2\2")
        buf.write("\2\26\u011b\3\2\2\2\30\u0121\3\2\2\2\32\u012a\3\2\2\2")
        buf.write("\34\u0136\3\2\2\2\36\u0140\3\2\2\2 \u0149\3\2\2\2\"\u0150")
        buf.write("\3\2\2\2$\u015e\3\2\2\2&\u016a\3\2\2\2(\u016c\3\2\2\2")
        buf.write("*\u0181\3\2\2\2,\u0183\3\2\2\2.\u018c\3\2\2\2\60\u018e")
        buf.write("\3\2\2\2\62\u019c\3\2\2\2\64\u01d4\3\2\2\2\66\u01d6\3")
        buf.write("\2\2\28\u01d8\3\2\2\2:\u01da\3\2\2\2<\u01dc\3\2\2\2>\u01de")
        buf.write("\3\2\2\2@\u01e0\3\2\2\2B\u01e2\3\2\2\2D\u01e4\3\2\2\2")
        buf.write("F\u01e6\3\2\2\2H\u01e8\3\2\2\2J\u01ea\3\2\2\2L\u01ec\3")
        buf.write("\2\2\2N\u01ee\3\2\2\2P\u01f0\3\2\2\2R\u01f2\3\2\2\2T\u01f4")
        buf.write("\3\2\2\2V\u01f6\3\2\2\2X\u01f8\3\2\2\2Z\u01fa\3\2\2\2")
        buf.write("\\\u01fc\3\2\2\2^\u01fe\3\2\2\2`\u0211\3\2\2\2b\u0214")
        buf.write("\3\2\2\2d\u0217\3\2\2\2f\u0225\3\2\2\2h\u0229\3\2\2\2")
        buf.write("j\u0230\3\2\2\2l\u0234\3\2\2\2n\u0238\3\2\2\2p\u0250\3")
        buf.write("\2\2\2r\u0268\3\2\2\2t\u0279\3\2\2\2v\u0288\3\2\2\2x\u028a")
        buf.write("\3\2\2\2z\u029c\3\2\2\2|\u02a5\3\2\2\2~\u02ad\3\2\2\2")
        buf.write("\u0080\u02b5\3\2\2\2\u0082\u02c1\3\2\2\2\u0084\u02c5\3")
        buf.write("\2\2\2\u0086\u02d4\3\2\2\2\u0088\u02e8\3\2\2\2\u008a\u02ea")
        buf.write("\3\2\2\2\u008c\u0302\3\2\2\2\u008e\u030d\3\2\2\2\u0090")
        buf.write("\u031a\3\2\2\2\u0092\u031f\3\2\2\2\u0094\u0324\3\2\2\2")
        buf.write("\u0096\u0329\3\2\2\2\u0098\u032e\3\2\2\2\u009a\u0333\3")
        buf.write("\2\2\2\u009c\u0338\3\2\2\2\u009e\u0350\3\2\2\2\u00a0\u0353")
        buf.write("\3\2\2\2\u00a2\u0356\3\2\2\2\u00a4\u035b\3\2\2\2\u00a6")
        buf.write("\u0360\3\2\2\2\u00a8\u037a\3\2\2\2\u00aa\u038a\3\2\2\2")
        buf.write("\u00ac\u03aa\3\2\2\2\u00ae\u03c5\3\2\2\2\u00b0\u03c9\3")
        buf.write("\2\2\2\u00b2\u03d0\3\2\2\2\u00b4\u03d7\3\2\2\2\u00b6\u03db")
        buf.write("\3\2\2\2\u00b8\u03df\3\2\2\2\u00ba\u03e5\3\2\2\2\u00bc")
        buf.write("\u03f9\3\2\2\2\u00be\u040c\3\2\2\2\u00c0\u0417\3\2\2\2")
        buf.write("\u00c2\u0419\3\2\2\2\u00c4\u042e\3\2\2\2\u00c6\u0444\3")
        buf.write("\2\2\2\u00c8\u0446\3\2\2\2\u00ca\u0451\3\2\2\2\u00cc\u0464")
        buf.write("\3\2\2\2\u00ce\u047f\3\2\2\2\u00d0\u0484\3\2\2\2\u00d2")
        buf.write("\u049e\3\2\2\2\u00d4\u04c0\3\2\2\2\u00d6\u04c2\3\2\2\2")
        buf.write("\u00d8\u04d0\3\2\2\2\u00da\u04f0\3\2\2\2\u00dc\u04f2\3")
        buf.write("\2\2\2\u00de\u04fc\3\2\2\2\u00e0\u050d\3\2\2\2\u00e2\u0514")
        buf.write("\3\2\2\2\u00e4\u051b\3\2\2\2\u00e6\u0526\3\2\2\2\u00e8")
        buf.write("\u0531\3\2\2\2\u00ea\u0548\3\2\2\2\u00ec\u056d\3\2\2\2")
        buf.write("\u00ee\u0582\3\2\2\2\u00f0\u0584\3\2\2\2\u00f2\u00f7\5")
        buf.write("\u00eex\2\u00f3\u00f4\t\2\2\2\u00f4\u00f6\5\u00eex\2\u00f5")
        buf.write("\u00f3\3\2\2\2\u00f6\u00f9\3\2\2\2\u00f7\u00f5\3\2\2\2")
        buf.write("\u00f7\u00f8\3\2\2\2\u00f8\u00fb\3\2\2\2\u00f9\u00f7\3")
        buf.write("\2\2\2\u00fa\u00f2\3\2\2\2\u00fa\u00fb\3\2\2\2\u00fb\3")
        buf.write("\3\2\2\2\u00fc\u00fe\7\60\2\2\u00fd\u00ff\7\23\2\2\u00fe")
        buf.write("\u00fd\3\2\2\2\u00fe\u00ff\3\2\2\2\u00ff\5\3\2\2\2\u0100")
        buf.write("\u0102\7\61\2\2\u0101\u0103\7\23\2\2\u0102\u0101\3\2\2")
        buf.write("\2\u0102\u0103\3\2\2\2\u0103\7\3\2\2\2\u0104\u0106\7)")
        buf.write("\2\2\u0105\u0107\7\23\2\2\u0106\u0105\3\2\2\2\u0106\u0107")
        buf.write("\3\2\2\2\u0107\t\3\2\2\2\u0108\u010a\7)\2\2\u0109\u010b")
        buf.write("\7\23\2\2\u010a\u0109\3\2\2\2\u010a\u010b\3\2\2\2\u010b")
        buf.write("\13\3\2\2\2\u010c\u010d\t\3\2\2\u010d\r\3\2\2\2\u010e")
        buf.write("\u010f\5\f\7\2\u010f\17\3\2\2\2\u0110\u0112\7\23\2\2\u0111")
        buf.write("\u0110\3\2\2\2\u0111\u0112\3\2\2\2\u0112\u0114\3\2\2\2")
        buf.write("\u0113\u0115\7\u0099\2\2\u0114\u0113\3\2\2\2\u0114\u0115")
        buf.write("\3\2\2\2\u0115\21\3\2\2\2\u0116\u0118\t\4\2\2\u0117\u0116")
        buf.write("\3\2\2\2\u0117\u0118\3\2\2\2\u0118\23\3\2\2\2\u0119\u011a")
        buf.write("\7\r\2\2\u011a\25\3\2\2\2\u011b\u011f\5N(\2\u011c\u0120")
        buf.write("\7)\2\2\u011d\u011e\7\6\2\2\u011e\u0120\5N(\2\u011f\u011c")
        buf.write("\3\2\2\2\u011f\u011d\3\2\2\2\u011f\u0120\3\2\2\2\u0120")
        buf.write("\27\3\2\2\2\u0121\u0127\5N(\2\u0122\u0123\5\4\3\2\u0123")
        buf.write("\u0124\5N(\2\u0124\u0126\3\2\2\2\u0125\u0122\3\2\2\2\u0126")
        buf.write("\u0129\3\2\2\2\u0127\u0125\3\2\2\2\u0127\u0128\3\2\2\2")
        buf.write("\u0128\31\3\2\2\2\u0129\u0127\3\2\2\2\u012a\u0130\5\26")
        buf.write("\f\2\u012b\u012c\5\4\3\2\u012c\u012d\5\26\f\2\u012d\u012f")
        buf.write("\3\2\2\2\u012e\u012b\3\2\2\2\u012f\u0132\3\2\2\2\u0130")
        buf.write("\u012e\3\2\2\2\u0130\u0131\3\2\2\2\u0131\u0134\3\2\2\2")
        buf.write("\u0132\u0130\3\2\2\2\u0133\u0135\5\4\3\2\u0134\u0133\3")
        buf.write("\2\2\2\u0134\u0135\3\2\2\2\u0135\33\3\2\2\2\u0136\u0137")
        buf.write("\5N(\2\u0137\u0138\7(\2\2\u0138\u013e\5\20\t\2\u0139\u013f")
        buf.write("\5\24\13\2\u013a\u013b\7\7\2\2\u013b\u013c\5\30\r\2\u013c")
        buf.write("\u013d\7/\2\2\u013d\u013f\3\2\2\2\u013e\u0139\3\2\2\2")
        buf.write("\u013e\u013a\3\2\2\2\u013f\35\3\2\2\2\u0140\u0141\7\7")
        buf.write("\2\2\u0141\u0142\5\30\r\2\u0142\u0147\7/\2\2\u0143\u0144")
        buf.write("\7*\2\2\u0144\u0145\5\26\f\2\u0145\u0146\7+\2\2\u0146")
        buf.write("\u0148\3\2\2\2\u0147\u0143\3\2\2\2\u0147\u0148\3\2\2\2")
        buf.write("\u0148\37\3\2\2\2\u0149\u014e\5\24\13\2\u014a\u014b\7")
        buf.write("(\2\2\u014b\u014c\5\20\t\2\u014c\u014d\5\24\13\2\u014d")
        buf.write("\u014f\3\2\2\2\u014e\u014a\3\2\2\2\u014e\u014f\3\2\2\2")
        buf.write("\u014f!\3\2\2\2\u0150\u015a\7,\2\2\u0151\u0152\5\26\f")
        buf.write("\2\u0152\u0153\5\4\3\2\u0153\u0155\3\2\2\2\u0154\u0151")
        buf.write("\3\2\2\2\u0155\u0158\3\2\2\2\u0156\u0154\3\2\2\2\u0156")
        buf.write("\u0157\3\2\2\2\u0157\u015b\3\2\2\2\u0158\u0156\3\2\2\2")
        buf.write("\u0159\u015b\7)\2\2\u015a\u0156\3\2\2\2\u015a\u0159\3")
        buf.write("\2\2\2\u015b\u015c\3\2\2\2\u015c\u015d\7-\2\2\u015d#\3")
        buf.write("\2\2\2\u015e\u015f\7<\2\2\u015f\u0160\7.\2\2\u0160\u0161")
        buf.write("\5\20\t\2\u0161\u0162\5@!\2\u0162\u0163\5\22\n\2\u0163")
        buf.write("\u0164\7/\2\2\u0164\u0165\7*\2\2\u0165\u0166\5\20\t\2")
        buf.write("\u0166\u0167\5N(\2\u0167\u0168\5\22\n\2\u0168\u0169\7")
        buf.write("+\2\2\u0169%\3\2\2\2\u016a\u016b\t\5\2\2\u016b\'\3\2\2")
        buf.write("\2\u016c\u016d\7\r\2\2\u016d)\3\2\2\2\u016e\u0182\3\2")
        buf.write("\2\2\u016f\u0182\7x\2\2\u0170\u0182\7\u0080\2\2\u0171")
        buf.write("\u0182\7\u0081\2\2\u0172\u0182\7\u0082\2\2\u0173\u0182")
        buf.write("\7\u0083\2\2\u0174\u0182\7\u0084\2\2\u0175\u0182\7\u0085")
        buf.write("\2\2\u0176\u0182\7\u0086\2\2\u0177\u0182\7\u0087\2\2\u0178")
        buf.write("\u0182\7\u0088\2\2\u0179\u0182\7\u008a\2\2\u017a\u0182")
        buf.write("\7\u008c\2\2\u017b\u0182\7\u008e\2\2\u017c\u0182\7\25")
        buf.write("\2\2\u017d\u0182\7\27\2\2\u017e\u0182\7\24\2\2\u017f\u0182")
        buf.write("\7\26\2\2\u0180\u0182\7]\2\2\u0181\u016e\3\2\2\2\u0181")
        buf.write("\u016f\3\2\2\2\u0181\u0170\3\2\2\2\u0181\u0171\3\2\2\2")
        buf.write("\u0181\u0172\3\2\2\2\u0181\u0173\3\2\2\2\u0181\u0174\3")
        buf.write("\2\2\2\u0181\u0175\3\2\2\2\u0181\u0176\3\2\2\2\u0181\u0177")
        buf.write("\3\2\2\2\u0181\u0178\3\2\2\2\u0181\u0179\3\2\2\2\u0181")
        buf.write("\u017a\3\2\2\2\u0181\u017b\3\2\2\2\u0181\u017c\3\2\2\2")
        buf.write("\u0181\u017d\3\2\2\2\u0181\u017e\3\2\2\2\u0181\u017f\3")
        buf.write("\2\2\2\u0181\u0180\3\2\2\2\u0182+\3\2\2\2\u0183\u0184")
        buf.write("\t\6\2\2\u0184-\3\2\2\2\u0185\u018d\5,\27\2\u0186\u018d")
        buf.write("\5\24\13\2\u0187\u018d\5*\26\2\u0188\u018d\5V,\2\u0189")
        buf.write("\u018d\5\62\32\2\u018a\u018d\5\"\22\2\u018b\u018d\5$\23")
        buf.write("\2\u018c\u0185\3\2\2\2\u018c\u0186\3\2\2\2\u018c\u0187")
        buf.write("\3\2\2\2\u018c\u0188\3\2\2\2\u018c\u0189\3\2\2\2\u018c")
        buf.write("\u018a\3\2\2\2\u018c\u018b\3\2\2\2\u018d/\3\2\2\2\u018e")
        buf.write("\u018f\7*\2\2\u018f\u0196\5\20\t\2\u0190\u0192\5\26\f")
        buf.write("\2\u0191\u0193\5\4\3\2\u0192\u0191\3\2\2\2\u0192\u0193")
        buf.write("\3\2\2\2\u0193\u0195\3\2\2\2\u0194\u0190\3\2\2\2\u0195")
        buf.write("\u0198\3\2\2\2\u0196\u0194\3\2\2\2\u0196\u0197\3\2\2\2")
        buf.write("\u0197\u0199\3\2\2\2\u0198\u0196\3\2\2\2\u0199\u019a\5")
        buf.write("\22\n\2\u019a\u019b\7+\2\2\u019b\61\3\2\2\2\u019c\u019d")
        buf.write("\7.\2\2\u019d\u01a4\5\20\t\2\u019e\u01a0\5\26\f\2\u019f")
        buf.write("\u01a1\5\4\3\2\u01a0\u019f\3\2\2\2\u01a0\u01a1\3\2\2\2")
        buf.write("\u01a1\u01a3\3\2\2\2\u01a2\u019e\3\2\2\2\u01a3\u01a6\3")
        buf.write("\2\2\2\u01a4\u01a2\3\2\2\2\u01a4\u01a5\3\2\2\2\u01a5\u01a7")
        buf.write("\3\2\2\2\u01a6\u01a4\3\2\2\2\u01a7\u01a8\5\22\n\2\u01a8")
        buf.write("\u01a9\7/\2\2\u01a9\63\3\2\2\2\u01aa\u01b1\7*\2\2\u01ab")
        buf.write("\u01ad\5\26\f\2\u01ac\u01ae\5\4\3\2\u01ad\u01ac\3\2\2")
        buf.write("\2\u01ad\u01ae\3\2\2\2\u01ae\u01b0\3\2\2\2\u01af\u01ab")
        buf.write("\3\2\2\2\u01b0\u01b3\3\2\2\2\u01b1\u01af\3\2\2\2\u01b1")
        buf.write("\u01b2\3\2\2\2\u01b2\u01b4\3\2\2\2\u01b3\u01b1\3\2\2\2")
        buf.write("\u01b4\u01b6\7+\2\2\u01b5\u01b7\5Z.\2\u01b6\u01b5\3\2")
        buf.write("\2\2\u01b6\u01b7\3\2\2\2\u01b7\u01d5\3\2\2\2\u01b8\u01d5")
        buf.write("\5Z.\2\u01b9\u01ba\7(\2\2\u01ba\u01bb\5\20\t\2\u01bb\u01bd")
        buf.write("\5\24\13\2\u01bc\u01be\5,\27\2\u01bd\u01bc\3\2\2\2\u01bd")
        buf.write("\u01be\3\2\2\2\u01be\u01d5\3\2\2\2\u01bf\u01c0\7.\2\2")
        buf.write("\u01c0\u01c1\5\20\t\2\u01c1\u01c2\5\66\34\2\u01c2\u01c3")
        buf.write("\5\22\n\2\u01c3\u01c4\7/\2\2\u01c4\u01d5\3\2\2\2\u01c5")
        buf.write("\u01c6\7,\2\2\u01c6\u01c7\5\20\t\2\u01c7\u01c8\5\66\34")
        buf.write("\2\u01c8\u01c9\5\22\n\2\u01c9\u01ca\7-\2\2\u01ca\u01d5")
        buf.write("\3\2\2\2\u01cb\u01d2\7\b\2\2\u01cc\u01d2\7\r\2\2\u01cd")
        buf.write("\u01d2\5*\26\2\u01ce\u01d2\7<\2\2\u01cf\u01d2\7\65\2\2")
        buf.write("\u01d0\u01d2\7o\2\2\u01d1\u01cb\3\2\2\2\u01d1\u01cc\3")
        buf.write("\2\2\2\u01d1\u01cd\3\2\2\2\u01d1\u01ce\3\2\2\2\u01d1\u01cf")
        buf.write("\3\2\2\2\u01d1\u01d0\3\2\2\2\u01d2\u01d3\3\2\2\2\u01d3")
        buf.write("\u01d5\5N(\2\u01d4\u01aa\3\2\2\2\u01d4\u01b8\3\2\2\2\u01d4")
        buf.write("\u01b9\3\2\2\2\u01d4\u01bf\3\2\2\2\u01d4\u01c5\3\2\2\2")
        buf.write("\u01d4\u01d1\3\2\2\2\u01d5\65\3\2\2\2\u01d6\u01d7\7\r")
        buf.write("\2\2\u01d7\67\3\2\2\2\u01d8\u01d9\7\r\2\2\u01d99\3\2\2")
        buf.write("\2\u01da\u01db\7\r\2\2\u01db;\3\2\2\2\u01dc\u01dd\7\r")
        buf.write("\2\2\u01dd=\3\2\2\2\u01de\u01df\7\r\2\2\u01df?\3\2\2\2")
        buf.write("\u01e0\u01e1\7\r\2\2\u01e1A\3\2\2\2\u01e2\u01e3\7\r\2")
        buf.write("\2\u01e3C\3\2\2\2\u01e4\u01e5\7\r\2\2\u01e5E\3\2\2\2\u01e6")
        buf.write("\u01e7\7\r\2\2\u01e7G\3\2\2\2\u01e8\u01e9\7\r\2\2\u01e9")
        buf.write("I\3\2\2\2\u01ea\u01eb\7\r\2\2\u01ebK\3\2\2\2\u01ec\u01ed")
        buf.write("\7\r\2\2\u01edM\3\2\2\2\u01ee\u01ef\7\r\2\2\u01efO\3\2")
        buf.write("\2\2\u01f0\u01f1\7\r\2\2\u01f1Q\3\2\2\2\u01f2\u01f3\7")
        buf.write("\r\2\2\u01f3S\3\2\2\2\u01f4\u01f5\7\r\2\2\u01f5U\3\2\2")
        buf.write("\2\u01f6\u01f7\7\r\2\2\u01f7W\3\2\2\2\u01f8\u01f9\7\r")
        buf.write("\2\2\u01f9Y\3\2\2\2\u01fa\u01fb\7\r\2\2\u01fb[\3\2\2\2")
        buf.write("\u01fc\u01fd\7\r\2\2\u01fd]\3\2\2\2\u01fe\u01ff\5N(\2")
        buf.write("\u01ff\u0200\5\n\6\2\u0200\u0201\5N(\2\u0201\u020a\5\20")
        buf.write("\t\2\u0202\u0203\7F\2\2\u0203\u0204\5N(\2\u0204\u0205")
        buf.write("\5\n\6\2\u0205\u0206\5N(\2\u0206\u0207\5\20\t\2\u0207")
        buf.write("\u0209\3\2\2\2\u0208\u0202\3\2\2\2\u0209\u020c\3\2\2\2")
        buf.write("\u020a\u0208\3\2\2\2\u020a\u020b\3\2\2\2\u020b\u020d\3")
        buf.write("\2\2\2\u020c\u020a\3\2\2\2\u020d\u020e\7G\2\2\u020e\u020f")
        buf.write("\5\n\6\2\u020f\u0210\5N(\2\u0210_\3\2\2\2\u0211\u0212")
        buf.write("\7P\2\2\u0212\u0213\5^\60\2\u0213a\3\2\2\2\u0214\u0215")
        buf.write("\7q\2\2\u0215\u0216\5^\60\2\u0216c\3\2\2\2\u0217\u0218")
        buf.write("\7\t\2\2\u0218\u021f\5\20\t\2\u0219\u021b\5(\25\2\u021a")
        buf.write("\u021c\5\4\3\2\u021b\u021a\3\2\2\2\u021b\u021c\3\2\2\2")
        buf.write("\u021c\u021e\3\2\2\2\u021d\u0219\3\2\2\2\u021e\u0221\3")
        buf.write("\2\2\2\u021f\u021d\3\2\2\2\u021f\u0220\3\2\2\2\u0220\u0222")
        buf.write("\3\2\2\2\u0221\u021f\3\2\2\2\u0222\u0223\5\22\n\2\u0223")
        buf.write("\u0224\t\7\2\2\u0224e\3\2\2\2\u0225\u0227\5\24\13\2\u0226")
        buf.write("\u0228\5X-\2\u0227\u0226\3\2\2\2\u0227\u0228\3\2\2\2\u0228")
        buf.write("g\3\2\2\2\u0229\u022a\5\24\13\2\u022a\u022b\7(\2\2\u022b")
        buf.write("\u022c\5\20\t\2\u022c\u022e\5\24\13\2\u022d\u022f\5X-")
        buf.write("\2\u022e\u022d\3\2\2\2\u022e\u022f\3\2\2\2\u022fi\3\2")
        buf.write("\2\2\u0230\u0232\5f\64\2\u0231\u0233\5d\63\2\u0232\u0231")
        buf.write("\3\2\2\2\u0232\u0233\3\2\2\2\u0233k\3\2\2\2\u0234\u0236")
        buf.write("\5h\65\2\u0235\u0237\5d\63\2\u0236\u0235\3\2\2\2\u0236")
        buf.write("\u0237\3\2\2\2\u0237m\3\2\2\2\u0238\u023e\5j\66\2\u0239")
        buf.write("\u023a\5\4\3\2\u023a\u023b\5j\66\2\u023b\u023d\3\2\2\2")
        buf.write("\u023c\u0239\3\2\2\2\u023d\u0240\3\2\2\2\u023e\u023c\3")
        buf.write("\2\2\2\u023e\u023f\3\2\2\2\u023f\u0242\3\2\2\2\u0240\u023e")
        buf.write("\3\2\2\2\u0241\u0243\5\4\3\2\u0242\u0241\3\2\2\2\u0242")
        buf.write("\u0243\3\2\2\2\u0243\u0248\3\2\2\2\u0244\u0245\7)\2\2")
        buf.write("\u0245\u0246\5\20\t\2\u0246\u0247\5@!\2\u0247\u0249\3")
        buf.write("\2\2\2\u0248\u0244\3\2\2\2\u0248\u0249\3\2\2\2\u0249\u024e")
        buf.write("\3\2\2\2\u024a\u024b\7\6\2\2\u024b\u024c\5\20\t\2\u024c")
        buf.write("\u024d\5N(\2\u024d\u024f\3\2\2\2\u024e\u024a\3\2\2\2\u024e")
        buf.write("\u024f\3\2\2\2\u024fo\3\2\2\2\u0250\u0256\7\r\2\2\u0251")
        buf.write("\u0252\5\4\3\2\u0252\u0253\7\r\2\2\u0253\u0255\3\2\2\2")
        buf.write("\u0254\u0251\3\2\2\2\u0255\u0258\3\2\2\2\u0256\u0254\3")
        buf.write("\2\2\2\u0256\u0257\3\2\2\2\u0257\u025a\3\2\2\2\u0258\u0256")
        buf.write("\3\2\2\2\u0259\u025b\5\4\3\2\u025a\u0259\3\2\2\2\u025a")
        buf.write("\u025b\3\2\2\2\u025b\u0260\3\2\2\2\u025c\u025d\7)\2\2")
        buf.write("\u025d\u025e\5\20\t\2\u025e\u025f\5@!\2\u025f\u0261\3")
        buf.write("\2\2\2\u0260\u025c\3\2\2\2\u0260\u0261\3\2\2\2\u0261\u0266")
        buf.write("\3\2\2\2\u0262\u0263\7\6\2\2\u0263\u0264\5\20\t\2\u0264")
        buf.write("\u0265\5N(\2\u0265\u0267\3\2\2\2\u0266\u0262\3\2\2\2\u0266")
        buf.write("\u0267\3\2\2\2\u0267q\3\2\2\2\u0268\u0269\7n\2\2\u0269")
        buf.write("\u026a\7.\2\2\u026a\u0273\5\20\t\2\u026b\u026f\5p9\2\u026c")
        buf.write("\u026d\5\4\3\2\u026d\u026e\5\6\4\2\u026e\u0270\3\2\2\2")
        buf.write("\u026f\u026c\3\2\2\2\u026f\u0270\3\2\2\2\u0270\u0272\3")
        buf.write("\2\2\2\u0271\u026b\3\2\2\2\u0272\u0275\3\2\2\2\u0273\u0271")
        buf.write("\3\2\2\2\u0273\u0274\3\2\2\2\u0274\u0276\3\2\2\2\u0275")
        buf.write("\u0273\3\2\2\2\u0276\u0277\5\22\n\2\u0277\u0278\7/\2\2")
        buf.write("\u0278s\3\2\2\2\u0279\u027b\7n\2\2\u027a\u027c\7\23\2")
        buf.write("\2\u027b\u027a\3\2\2\2\u027b\u027c\3\2\2\2\u027c\u0286")
        buf.write("\3\2\2\2\u027d\u027e\7\5\2\2\u027e\u0283\5p9\2\u027f\u0280")
        buf.write("\7\3\2\2\u0280\u0282\5p9\2\u0281\u027f\3\2\2\2\u0282\u0285")
        buf.write("\3\2\2\2\u0283\u0281\3\2\2\2\u0283\u0284\3\2\2\2\u0284")
        buf.write("\u0287\3\2\2\2\u0285\u0283\3\2\2\2\u0286\u027d\3\2\2\2")
        buf.write("\u0286\u0287\3\2\2\2\u0287u\3\2\2\2\u0288\u0289\7n\2\2")
        buf.write("\u0289w\3\2\2\2\u028a\u0297\7*\2\2\u028b\u0294\5n8\2\u028c")
        buf.write("\u028d\5\4\3\2\u028d\u028e\7\36\2\2\u028e\u028f\5\6\4")
        buf.write("\2\u028f\u0290\3\2\2\2\u0290\u0291\5n8\2\u0291\u0293\3")
        buf.write("\2\2\2\u0292\u028c\3\2\2\2\u0293\u0296\3\2\2\2\u0294\u0292")
        buf.write("\3\2\2\2\u0294\u0295\3\2\2\2\u0295\u0298\3\2\2\2\u0296")
        buf.write("\u0294\3\2\2\2\u0297\u028b\3\2\2\2\u0297\u0298\3\2\2\2")
        buf.write("\u0298\u0299\3\2\2\2\u0299\u029a\7+\2\2\u029ay\3\2\2\2")
        buf.write("\u029b\u029d\5x=\2\u029c\u029b\3\2\2\2\u029c\u029d\3\2")
        buf.write("\2\2\u029d\u02a2\3\2\2\2\u029e\u029f\7\13\2\2\u029f\u02a0")
        buf.write("\5\20\t\2\u02a0\u02a1\5@!\2\u02a1\u02a3\3\2\2\2\u02a2")
        buf.write("\u029e\3\2\2\2\u02a2\u02a3\3\2\2\2\u02a3{\3\2\2\2\u02a4")
        buf.write("\u02a6\5x=\2\u02a5\u02a4\3\2\2\2\u02a5\u02a6\3\2\2\2\u02a6")
        buf.write("\u02ab\3\2\2\2\u02a7\u02a8\7)\2\2\u02a8\u02a9\5\20\t\2")
        buf.write("\u02a9\u02aa\5@!\2\u02aa\u02ac\3\2\2\2\u02ab\u02a7\3\2")
        buf.write("\2\2\u02ab\u02ac\3\2\2\2\u02ac}\3\2\2\2\u02ad\u02ae\7")
        buf.write("E\2\2\u02ae\u02b0\5z>\2\u02af\u02b1\58\35\2\u02b0\u02af")
        buf.write("\3\2\2\2\u02b0\u02b1\3\2\2\2\u02b1\u02b2\3\2\2\2\u02b2")
        buf.write("\u02b3\5\n\6\2\u02b3\u02b4\5\u00eex\2\u02b4\177\3\2\2")
        buf.write("\2\u02b5\u02b6\7d\2\2\u02b6\u02b8\5|?\2\u02b7\u02b9\5")
        buf.write("8\35\2\u02b8\u02b7\3\2\2\2\u02b8\u02b9\3\2\2\2\u02b9\u02bf")
        buf.write("\3\2\2\2\u02ba\u02bc\7\6\2\2\u02bb\u02bd\7\23\2\2\u02bc")
        buf.write("\u02bb\3\2\2\2\u02bc\u02bd\3\2\2\2\u02bd\u02be\3\2\2\2")
        buf.write("\u02be\u02c0\5\u00eex\2\u02bf\u02ba\3\2\2\2\u02bf\u02c0")
        buf.write("\3\2\2\2\u02c0\u0081\3\2\2\2\u02c1\u02c2\7C\2\2\u02c2")
        buf.write("\u02c3\5\20\t\2\u02c3\u02c4\5@!\2\u02c4\u0083\3\2\2\2")
        buf.write("\u02c5\u02c6\7M\2\2\u02c6\u02cc\5j\66\2\u02c7\u02c8\5")
        buf.write("\4\3\2\u02c8\u02c9\5:\36\2\u02c9\u02cb\3\2\2\2\u02ca\u02c7")
        buf.write("\3\2\2\2\u02cb\u02ce\3\2\2\2\u02cc\u02ca\3\2\2\2\u02cc")
        buf.write("\u02cd\3\2\2\2\u02cd\u02cf\3\2\2\2\u02ce\u02cc\3\2\2\2")
        buf.write("\u02cf\u02d0\7R\2\2\u02d0\u02d1\5N(\2\u02d1\u02d2\5\n")
        buf.write("\6\2\u02d2\u02d3\5\u00eex\2\u02d3\u0085\3\2\2\2\u02d4")
        buf.write("\u02d5\5\u0084C\2\u02d5\u0087\3\2\2\2\u02d6\u02d7\5P)")
        buf.write("\2\u02d7\u02d8\5> \2\u02d8\u02e9\3\2\2\2\u02d9\u02db\5")
        buf.write("\16\b\2\u02da\u02d9\3\2\2\2\u02db\u02de\3\2\2\2\u02dc")
        buf.write("\u02da\3\2\2\2\u02dc\u02dd\3\2\2\2\u02dd\u02df\3\2\2\2")
        buf.write("\u02de\u02dc\3\2\2\2\u02df\u02e3\5.\30\2\u02e0\u02e2\5")
        buf.write("\64\33\2\u02e1\u02e0\3\2\2\2\u02e2\u02e5\3\2\2\2\u02e3")
        buf.write("\u02e1\3\2\2\2\u02e3\u02e4\3\2\2\2\u02e4\u02e9\3\2\2\2")
        buf.write("\u02e5\u02e3\3\2\2\2\u02e6\u02e7\78\2\2\u02e7\u02e9\5")
        buf.write("\u0088E\2\u02e8\u02d6\3\2\2\2\u02e8\u02dc\3\2\2\2\u02e8")
        buf.write("\u02e6\3\2\2\2\u02e9\u0089\3\2\2\2\u02ea\u02eb\7Q\2\2")
        buf.write("\u02eb\u02ec\5\20\t\2\u02ec\u0300\5N(\2\u02ed\u02ee\5")
        buf.write("\4\3\2\u02ee\u02ef\5N(\2\u02ef\u02f1\3\2\2\2\u02f0\u02ed")
        buf.write("\3\2\2\2\u02f1\u02f4\3\2\2\2\u02f2\u02f0\3\2\2\2\u02f2")
        buf.write("\u02f3\3\2\2\2\u02f3\u0301\3\2\2\2\u02f4\u02f2\3\2\2\2")
        buf.write("\u02f5\u02f6\7J\2\2\u02f6\u02f7\5\20\t\2\u02f7\u02fd\5")
        buf.write("N(\2\u02f8\u02f9\5\4\3\2\u02f9\u02fa\5N(\2\u02fa\u02fc")
        buf.write("\3\2\2\2\u02fb\u02f8\3\2\2\2\u02fc\u02ff\3\2\2\2\u02fd")
        buf.write("\u02fb\3\2\2\2\u02fd\u02fe\3\2\2\2\u02fe\u0301\3\2\2\2")
        buf.write("\u02ff\u02fd\3\2\2\2\u0300\u02f2\3\2\2\2\u0300\u02f5\3")
        buf.write("\2\2\2\u0301\u008b\3\2\2\2\u0302\u0303\7S\2\2\u0303\u0304")
        buf.write("\5\20\t\2\u0304\u030a\5N(\2\u0305\u0306\5\4\3\2\u0306")
        buf.write("\u0307\5N(\2\u0307\u0309\3\2\2\2\u0308\u0305\3\2\2\2\u0309")
        buf.write("\u030c\3\2\2\2\u030a\u0308\3\2\2\2\u030a\u030b\3\2\2\2")
        buf.write("\u030b\u008d\3\2\2\2\u030c\u030a\3\2\2\2\u030d\u030e\7")
        buf.write("N\2\2\u030e\u030f\5D#\2\u030f\u0310\7Q\2\2\u0310\u0311")
        buf.write("\5\20\t\2\u0311\u0317\5N(\2\u0312\u0313\5\4\3\2\u0313")
        buf.write("\u0314\5N(\2\u0314\u0316\3\2\2\2\u0315\u0312\3\2\2\2\u0316")
        buf.write("\u0319\3\2\2\2\u0317\u0315\3\2\2\2\u0317\u0318\3\2\2\2")
        buf.write("\u0318\u008f\3\2\2\2\u0319\u0317\3\2\2\2\u031a\u031b\7")
        buf.write("h\2\2\u031b\u031d\5\20\t\2\u031c\u031e\5N(\2\u031d\u031c")
        buf.write("\3\2\2\2\u031d\u031e\3\2\2\2\u031e\u0091\3\2\2\2\u031f")
        buf.write("\u0320\7f\2\2\u0320\u0322\5\20\t\2\u0321\u0323\5N(\2\u0322")
        buf.write("\u0321\3\2\2\2\u0322\u0323\3\2\2\2\u0323\u0093\3\2\2\2")
        buf.write("\u0324\u0325\7t\2\2\u0325\u0327\5\20\t\2\u0326\u0328\5")
        buf.write("N(\2\u0327\u0326\3\2\2\2\u0327\u0328\3\2\2\2\u0328\u0095")
        buf.write("\3\2\2\2\u0329\u032a\7B\2\2\u032a\u032c\5\20\t\2\u032b")
        buf.write("\u032d\5N(\2\u032c\u032b\3\2\2\2\u032c\u032d\3\2\2\2\u032d")
        buf.write("\u0097\3\2\2\2\u032e\u032f\7:\2\2\u032f\u0331\5\20\t\2")
        buf.write("\u0330\u0332\5N(\2\u0331\u0330\3\2\2\2\u0331\u0332\3\2")
        buf.write("\2\2\u0332\u0099\3\2\2\2\u0333\u0334\7:\2\2\u0334\u0336")
        buf.write("\5\20\t\2\u0335\u0337\5N(\2\u0336\u0335\3\2\2\2\u0336")
        buf.write("\u0337\3\2\2\2\u0337\u009b\3\2\2\2\u0338\u0339\5N(\2\u0339")
        buf.write("\u033a\5\n\6\2\u033a\u033c\5\u00eex\2\u033b\u033d\7\23")
        buf.write("\2\2\u033c\u033b\3\2\2\2\u033c\u033d\3\2\2\2\u033d\u0346")
        buf.write("\3\2\2\2\u033e\u033f\7\3\2\2\u033f\u0340\7F\2\2\u0340")
        buf.write("\u0341\5N(\2\u0341\u0342\5\n\6\2\u0342\u0343\5\u00eex")
        buf.write("\2\u0343\u0345\3\2\2\2\u0344\u033e\3\2\2\2\u0345\u0348")
        buf.write("\3\2\2\2\u0346\u0344\3\2\2\2\u0346\u0347\3\2\2\2\u0347")
        buf.write("\u034e\3\2\2\2\u0348\u0346\3\2\2\2\u0349\u034a\7\3\2\2")
        buf.write("\u034a\u034b\7G\2\2\u034b\u034c\5\n\6\2\u034c\u034d\5")
        buf.write("\u00eex\2\u034d\u034f\3\2\2\2\u034e\u0349\3\2\2\2\u034e")
        buf.write("\u034f\3\2\2\2\u034f\u009d\3\2\2\2\u0350\u0351\7P\2\2")
        buf.write("\u0351\u0352\5\u009cO\2\u0352\u009f\3\2\2\2\u0353\u0354")
        buf.write("\7q\2\2\u0354\u0355\5\u009cO\2\u0355\u00a1\3\2\2\2\u0356")
        buf.write("\u0357\7r\2\2\u0357\u0358\5N(\2\u0358\u0359\5\n\6\2\u0359")
        buf.write("\u035a\5\u00eex\2\u035a\u00a3\3\2\2\2\u035b\u035c\7a\2")
        buf.write("\2\u035c\u035d\5\30\r\2\u035d\u035e\5\n\6\2\u035e\u035f")
        buf.write("\5\u00eex\2\u035f\u00a5\3\2\2\2\u0360\u0365\5\u00a4S\2")
        buf.write("\u0361\u0362\7\3\2\2\u0362\u0364\5\u00a4S\2\u0363\u0361")
        buf.write("\3\2\2\2\u0364\u0367\3\2\2\2\u0365\u0363\3\2\2\2\u0365")
        buf.write("\u0366\3\2\2\2\u0366\u0370\3\2\2\2\u0367\u0365\3\2\2\2")
        buf.write("\u0368\u0369\7\3\2\2\u0369\u036a\7F\2\2\u036a\u036b\5")
        buf.write("N(\2\u036b\u036c\5\n\6\2\u036c\u036d\5\u00eex\2\u036d")
        buf.write("\u036f\3\2\2\2\u036e\u0368\3\2\2\2\u036f\u0372\3\2\2\2")
        buf.write("\u0370\u036e\3\2\2\2\u0370\u0371\3\2\2\2\u0371\u0378\3")
        buf.write("\2\2\2\u0372\u0370\3\2\2\2\u0373\u0374\7\3\2\2\u0374\u0375")
        buf.write("\7G\2\2\u0375\u0376\5\n\6\2\u0376\u0377\5\u00eex\2\u0377")
        buf.write("\u0379\3\2\2\2\u0378\u0373\3\2\2\2\u0378\u0379\3\2\2\2")
        buf.write("\u0379\u00a7\3\2\2\2\u037a\u037b\7;\2\2\u037b\u037d\5")
        buf.write("N(\2\u037c\u037e\7)\2\2\u037d\u037c\3\2\2\2\u037d\u037e")
        buf.write("\3\2\2\2\u037e\u0380\3\2\2\2\u037f\u0381\7\23\2\2\u0380")
        buf.write("\u037f\3\2\2\2\u0380\u0381\3\2\2\2\u0381\u0388\3\2\2\2")
        buf.write("\u0382\u0383\7\5\2\2\u0383\u0384\5\u00a6T\2\u0384\u0385")
        buf.write("\7\f\2\2\u0385\u0389\3\2\2\2\u0386\u0387\7\3\2\2\u0387")
        buf.write("\u0389\5\u00a6T\2\u0388\u0382\3\2\2\2\u0388\u0386\3\2")
        buf.write("\2\2\u0389\u00a9\3\2\2\2\u038a\u038b\7m\2\2\u038b\u038c")
        buf.write("\5\n\6\2\u038c\u0392\5\u00eex\2\u038d\u038f\7\3\2\2\u038e")
        buf.write("\u038d\3\2\2\2\u038e\u038f\3\2\2\2\u038f\u0390\3\2\2\2")
        buf.write("\u0390\u0393\7J\2\2\u0391\u0393\7L\2\2\u0392\u038e\3\2")
        buf.write("\2\2\u0392\u0391\3\2\2\2\u0393\u039e\3\2\2\2\u0394\u0396")
        buf.write("\7\3\2\2\u0395\u0394\3\2\2\2\u0395\u0396\3\2\2\2\u0396")
        buf.write("\u0397\3\2\2\2\u0397\u0398\7J\2\2\u0398\u0399\5\30\r\2")
        buf.write("\u0399\u039a\5\n\6\2\u039a\u039b\5\u00eex\2\u039b\u039d")
        buf.write("\3\2\2\2\u039c\u0395\3\2\2\2\u039d\u03a0\3\2\2\2\u039e")
        buf.write("\u039c\3\2\2\2\u039e\u039f\3\2\2\2\u039f\u03a8\3\2\2\2")
        buf.write("\u03a0\u039e\3\2\2\2\u03a1\u03a3\7\3\2\2\u03a2\u03a1\3")
        buf.write("\2\2\2\u03a2\u03a3\3\2\2\2\u03a3\u03a4\3\2\2\2\u03a4\u03a5")
        buf.write("\7L\2\2\u03a5\u03a6\5\n\6\2\u03a6\u03a7\5\u00eex\2\u03a7")
        buf.write("\u03a9\3\2\2\2\u03a8\u03a2\3\2\2\2\u03a8\u03a9\3\2\2\2")
        buf.write("\u03a9\u00ab\3\2\2\2\u03aa\u03ab\7m\2\2\u03ab\u03ac\5")
        buf.write("\n\6\2\u03ac\u03b1\5\u00eex\2\u03ad\u03ae\5\20\t\2\u03ae")
        buf.write("\u03af\7J\2\2\u03af\u03b2\3\2\2\2\u03b0\u03b2\7L\2\2\u03b1")
        buf.write("\u03ad\3\2\2\2\u03b1\u03b0\3\2\2\2\u03b2\u03bb\3\2\2\2")
        buf.write("\u03b3\u03b4\5\20\t\2\u03b4\u03b5\7J\2\2\u03b5\u03b6\5")
        buf.write("\30\r\2\u03b6\u03b7\5\n\6\2\u03b7\u03b8\5\u00eex\2\u03b8")
        buf.write("\u03ba\3\2\2\2\u03b9\u03b3\3\2\2\2\u03ba\u03bd\3\2\2\2")
        buf.write("\u03bb\u03b9\3\2\2\2\u03bb\u03bc\3\2\2\2\u03bc\u03c3\3")
        buf.write("\2\2\2\u03bd\u03bb\3\2\2\2\u03be\u03bf\5\20\t\2\u03bf")
        buf.write("\u03c0\7L\2\2\u03c0\u03c1\5\n\6\2\u03c1\u03c2\5\u00ee")
        buf.write("x\2\u03c2\u03c4\3\2\2\2\u03c3\u03be\3\2\2\2\u03c3\u03c4")
        buf.write("\3\2\2\2\u03c4\u00ad\3\2\2\2\u03c5\u03c6\7J\2\2\u03c6")
        buf.write("\u03c7\5\n\6\2\u03c7\u03c8\5\u00eex\2\u03c8\u00af\3\2")
        buf.write("\2\2\u03c9\u03cb\79\2\2\u03ca\u03cc\5\24\13\2\u03cb\u03ca")
        buf.write("\3\2\2\2\u03cb\u03cc\3\2\2\2\u03cc\u03cd\3\2\2\2\u03cd")
        buf.write("\u03ce\5\n\6\2\u03ce\u03cf\5\u00eex\2\u03cf\u00b1\3\2")
        buf.write("\2\2\u03d0\u03d2\79\2\2\u03d1\u03d3\5\24\13\2\u03d2\u03d1")
        buf.write("\3\2\2\2\u03d2\u03d3\3\2\2\2\u03d3\u03d4\3\2\2\2\u03d4")
        buf.write("\u03d5\5\n\6\2\u03d5\u03d6\5\u00eex\2\u03d6\u00b3\3\2")
        buf.write("\2\2\u03d7\u03d8\7k\2\2\u03d8\u03d9\5\n\6\2\u03d9\u03da")
        buf.write("\5\u00eex\2\u03da\u00b5\3\2\2\2\u03db\u03dc\7A\2\2\u03dc")
        buf.write("\u03dd\5\n\6\2\u03dd\u03de\5\u00eex\2\u03de\u00b7\3\2")
        buf.write("\2\2\u03df\u03e1\7\67\2\2\u03e0\u03e2\5d\63\2\u03e1\u03e0")
        buf.write("\3\2\2\2\u03e1\u03e2\3\2\2\2\u03e2\u03e3\3\2\2\2\u03e3")
        buf.write("\u03e4\t\b\2\2\u03e4\u00b9\3\2\2\2\u03e5\u03eb\5\24\13")
        buf.write("\2\u03e6\u03e7\5\4\3\2\u03e7\u03e8\5\24\13\2\u03e8\u03ea")
        buf.write("\3\2\2\2\u03e9\u03e6\3\2\2\2\u03ea\u03ed\3\2\2\2\u03eb")
        buf.write("\u03e9\3\2\2\2\u03eb\u03ec\3\2\2\2\u03ec\u03f1\3\2\2\2")
        buf.write("\u03ed\u03eb\3\2\2\2\u03ee\u03ef\5\b\5\2\u03ef\u03f0\5")
        buf.write("N(\2\u03f0\u03f2\3\2\2\2\u03f1\u03ee\3\2\2\2\u03f1\u03f2")
        buf.write("\3\2\2\2\u03f2\u03f7\3\2\2\2\u03f3\u03f4\7\6\2\2\u03f4")
        buf.write("\u03f5\5\20\t\2\u03f5\u03f6\5N(\2\u03f6\u03f8\3\2\2\2")
        buf.write("\u03f7\u03f3\3\2\2\2\u03f7\u03f8\3\2\2\2\u03f8\u00bb\3")
        buf.write("\2\2\2\u03f9\u03fa\7.\2\2\u03fa\u0407\5\20\t\2\u03fb\u0404")
        buf.write("\5\u00ba^\2\u03fc\u03ff\5\4\3\2\u03fd\u03ff\5\6\4\2\u03fe")
        buf.write("\u03fc\3\2\2\2\u03fe\u03fd\3\2\2\2\u03ff\u0400\3\2\2\2")
        buf.write("\u0400\u0401\5\u00ba^\2\u0401\u0403\3\2\2\2\u0402\u03fe")
        buf.write("\3\2\2\2\u0403\u0406\3\2\2\2\u0404\u0402\3\2\2\2\u0404")
        buf.write("\u0405\3\2\2\2\u0405\u0408\3\2\2\2\u0406\u0404\3\2\2\2")
        buf.write("\u0407\u03fb\3\2\2\2\u0407\u0408\3\2\2\2\u0408\u0409\3")
        buf.write("\2\2\2\u0409\u040a\5\22\n\2\u040a\u040b\7/\2\2\u040b\u00bd")
        buf.write("\3\2\2\2\u040c\u040d\7,\2\2\u040d\u040e\5\u00eex\2\u040e")
        buf.write("\u040f\7-\2\2\u040f\u00bf\3\2\2\2\u0410\u0411\7\5\2\2")
        buf.write("\u0411\u0413\7\23\2\2\u0412\u0410\3\2\2\2\u0412\u0413")
        buf.write("\3\2\2\2\u0413\u0418\3\2\2\2\u0414\u0416\7\23\2\2\u0415")
        buf.write("\u0414\3\2\2\2\u0415\u0416\3\2\2\2\u0416\u0418\3\2\2\2")
        buf.write("\u0417\u0412\3\2\2\2\u0417\u0415\3\2\2\2\u0418\u00c1\3")
        buf.write("\2\2\2\u0419\u041a\5\20\t\2\u041a\u041c\5f\64\2\u041b")
        buf.write("\u041d\5\u00be`\2\u041c\u041b\3\2\2\2\u041c\u041d\3\2")
        buf.write("\2\2\u041d\u041f\3\2\2\2\u041e\u0420\5\u00bc_\2\u041f")
        buf.write("\u041e\3\2\2\2\u041f\u0420\3\2\2\2\u0420\u0421\3\2\2\2")
        buf.write("\u0421\u0423\5|?\2\u0422\u0424\5d\63\2\u0423\u0422\3\2")
        buf.write("\2\2\u0423\u0424\3\2\2\2\u0424\u042a\3\2\2\2\u0425\u0427")
        buf.write("\7\6\2\2\u0426\u0428\7\23\2\2\u0427\u0426\3\2\2\2\u0427")
        buf.write("\u0428\3\2\2\2\u0428\u0429\3\2\2\2\u0429\u042b\5\u00ee")
        buf.write("x\2\u042a\u0425\3\2\2\2\u042a\u042b\3\2\2\2\u042b\u042c")
        buf.write("\3\2\2\2\u042c\u042d\5\u00c0a\2\u042d\u00c3\3\2\2\2\u042e")
        buf.write("\u042f\7\23\2\2\u042f\u00c5\3\2\2\2\u0430\u0432\7\23\2")
        buf.write("\2\u0431\u0430\3\2\2\2\u0431\u0432\3\2\2\2\u0432\u0433")
        buf.write("\3\2\2\2\u0433\u0445\5\\/\2\u0434\u0437\7\5\2\2\u0435")
        buf.write("\u0438\5\\/\2\u0436\u0438\7\23\2\2\u0437\u0435\3\2\2\2")
        buf.write("\u0437\u0436\3\2\2\2\u0438\u0440\3\2\2\2\u0439\u043c\7")
        buf.write("\3\2\2\u043a\u043d\5\\/\2\u043b\u043d\7\23\2\2\u043c\u043a")
        buf.write("\3\2\2\2\u043c\u043b\3\2\2\2\u043d\u043f\3\2\2\2\u043e")
        buf.write("\u0439\3\2\2\2\u043f\u0442\3\2\2\2\u0440\u043e\3\2\2\2")
        buf.write("\u0440\u0441\3\2\2\2\u0441\u0443\3\2\2\2\u0442\u0440\3")
        buf.write("\2\2\2\u0443\u0445\7\f\2\2\u0444\u0431\3\2\2\2\u0444\u0434")
        buf.write("\3\2\2\2\u0445\u00c7\3\2\2\2\u0446\u044a\5j\66\2\u0447")
        buf.write("\u0448\5\b\5\2\u0448\u0449\5@!\2\u0449\u044b\3\2\2\2\u044a")
        buf.write("\u0447\3\2\2\2\u044a\u044b\3\2\2\2\u044b\u044c\3\2\2\2")
        buf.write("\u044c\u044d\7\6\2\2\u044d\u044e\5\20\t\2\u044e\u044f")
        buf.write("\5N(\2\u044f\u0450\5\u00c0a\2\u0450\u00c9\3\2\2\2\u0451")
        buf.write("\u0452\7I\2\2\u0452\u0460\5\20\t\2\u0453\u0454\5\24\13")
        buf.write("\2\u0454\u045b\5\20\t\2\u0455\u0456\7\6\2\2\u0456\u0457")
        buf.write("\5\20\t\2\u0457\u0459\5N(\2\u0458\u045a\7\23\2\2\u0459")
        buf.write("\u0458\3\2\2\2\u0459\u045a\3\2\2\2\u045a\u045c\3\2\2\2")
        buf.write("\u045b\u0455\3\2\2\2\u045b\u045c\3\2\2\2\u045c\u045e\3")
        buf.write("\2\2\2\u045d\u045f\5\4\3\2\u045e\u045d\3\2\2\2\u045e\u045f")
        buf.write("\3\2\2\2\u045f\u0461\3\2\2\2\u0460\u0453\3\2\2\2\u0461")
        buf.write("\u0462\3\2\2\2\u0462\u0460\3\2\2\2\u0462\u0463\3\2\2\2")
        buf.write("\u0463\u00cb\3\2\2\2\u0464\u0465\7q\2\2\u0465\u0466\5")
        buf.write("N(\2\u0466\u0467\5\n\6\2\u0467\u0469\5\u00d4k\2\u0468")
        buf.write("\u046a\7\23\2\2\u0469\u0468\3\2\2\2\u0469\u046a\3\2\2")
        buf.write("\2\u046a\u0474\3\2\2\2\u046b\u046c\7F\2\2\u046c\u046d")
        buf.write("\5N(\2\u046d\u046e\5\n\6\2\u046e\u0470\5\u00d4k\2\u046f")
        buf.write("\u0471\7\23\2\2\u0470\u046f\3\2\2\2\u0470\u0471\3\2\2")
        buf.write("\2\u0471\u0473\3\2\2\2\u0472\u046b\3\2\2\2\u0473\u0476")
        buf.write("\3\2\2\2\u0474\u0472\3\2\2\2\u0474\u0475\3\2\2\2\u0475")
        buf.write("\u047d\3\2\2\2\u0476\u0474\3\2\2\2\u0477\u0478\7G\2\2")
        buf.write("\u0478\u0479\5\n\6\2\u0479\u047b\5\u00d4k\2\u047a\u047c")
        buf.write("\7\23\2\2\u047b\u047a\3\2\2\2\u047b\u047c\3\2\2\2\u047c")
        buf.write("\u047e\3\2\2\2\u047d\u0477\3\2\2\2\u047d\u047e\3\2\2\2")
        buf.write("\u047e\u00cd\3\2\2\2\u047f\u0480\7a\2\2\u0480\u0481\5")
        buf.write("\30\r\2\u0481\u0482\5\n\6\2\u0482\u0483\5\u00d4k\2\u0483")
        buf.write("\u00cf\3\2\2\2\u0484\u0489\5\u00ceh\2\u0485\u0486\7\3")
        buf.write("\2\2\u0486\u0488\5\u00ceh\2\u0487\u0485\3\2\2\2\u0488")
        buf.write("\u048b\3\2\2\2\u0489\u0487\3\2\2\2\u0489\u048a\3\2\2\2")
        buf.write("\u048a\u0494\3\2\2\2\u048b\u0489\3\2\2\2\u048c\u048d\7")
        buf.write("\3\2\2\u048d\u048e\7F\2\2\u048e\u048f\5N(\2\u048f\u0490")
        buf.write("\5\n\6\2\u0490\u0491\5\u00d4k\2\u0491\u0493\3\2\2\2\u0492")
        buf.write("\u048c\3\2\2\2\u0493\u0496\3\2\2\2\u0494\u0492\3\2\2\2")
        buf.write("\u0494\u0495\3\2\2\2\u0495\u049c\3\2\2\2\u0496\u0494\3")
        buf.write("\2\2\2\u0497\u0498\7\3\2\2\u0498\u0499\7G\2\2\u0499\u049a")
        buf.write("\5\n\6\2\u049a\u049b\5\u00d4k\2\u049b\u049d\3\2\2\2\u049c")
        buf.write("\u0497\3\2\2\2\u049c\u049d\3\2\2\2\u049d\u00d1\3\2\2\2")
        buf.write("\u049e\u049f\7;\2\2\u049f\u04a0\5j\66\2\u04a0\u04a1\7")
        buf.write(")\2\2\u04a1\u04a3\5@!\2\u04a2\u04a4\7)\2\2\u04a3\u04a2")
        buf.write("\3\2\2\2\u04a3\u04a4\3\2\2\2\u04a4\u04a6\3\2\2\2\u04a5")
        buf.write("\u04a7\7\23\2\2\u04a6\u04a5\3\2\2\2\u04a6\u04a7\3\2\2")
        buf.write("\2\u04a7\u04ae\3\2\2\2\u04a8\u04a9\7\5\2\2\u04a9\u04aa")
        buf.write("\5\u00d0i\2\u04aa\u04ab\7\f\2\2\u04ab\u04af\3\2\2\2\u04ac")
        buf.write("\u04ad\7\3\2\2\u04ad\u04af\5\u00d0i\2\u04ae\u04a8\3\2")
        buf.write("\2\2\u04ae\u04ac\3\2\2\2\u04af\u00d3\3\2\2\2\u04b0\u04b1")
        buf.write("\7\5\2\2\u04b1\u04b6\5\u00d4k\2\u04b2\u04b3\7\3\2\2\u04b3")
        buf.write("\u04b5\5\u00d4k\2\u04b4\u04b2\3\2\2\2\u04b5\u04b8\3\2")
        buf.write("\2\2\u04b6\u04b4\3\2\2\2\u04b6\u04b7\3\2\2\2\u04b7\u04b9")
        buf.write("\3\2\2\2\u04b8\u04b6\3\2\2\2\u04b9\u04ba\7\f\2\2\u04ba")
        buf.write("\u04c1\3\2\2\2\u04bb\u04c1\5\u00ccg\2\u04bc\u04c1\5\u00d2")
        buf.write("j\2\u04bd\u04c1\7]\2\2\u04be\u04c1\7B\2\2\u04bf\u04c1")
        buf.write("\5n8\2\u04c0\u04b0\3\2\2\2\u04c0\u04bb\3\2\2\2\u04c0\u04bc")
        buf.write("\3\2\2\2\u04c0\u04bd\3\2\2\2\u04c0\u04be\3\2\2\2\u04c0")
        buf.write("\u04bf\3\2\2\2\u04c1\u00d5\3\2\2\2\u04c2\u04c4\7`\2\2")
        buf.write("\u04c3\u04c5\5d\63\2\u04c4\u04c3\3\2\2\2\u04c4\u04c5\3")
        buf.write("\2\2\2\u04c5\u04c8\3\2\2\2\u04c6\u04c7\7a\2\2\u04c7\u04c9")
        buf.write("\5@!\2\u04c8\u04c6\3\2\2\2\u04c8\u04c9\3\2\2\2\u04c9\u04cb")
        buf.write("\3\2\2\2\u04ca\u04cc\7\23\2\2\u04cb\u04ca\3\2\2\2\u04cb")
        buf.write("\u04cc\3\2\2\2\u04cc\u04cd\3\2\2\2\u04cd\u04ce\5\u00d4")
        buf.write("k\2\u04ce\u00d7\3\2\2\2\u04cf\u04d1\t\t\2\2\u04d0\u04cf")
        buf.write("\3\2\2\2\u04d0\u04d1\3\2\2\2\u04d1\u04d2\3\2\2\2\u04d2")
        buf.write("\u04d3\5\24\13\2\u04d3\u00d9\3\2\2\2\u04d4\u04d9\5\u00d8")
        buf.write("m\2\u04d5\u04d6\7\60\2\2\u04d6\u04d8\5\u00d8m\2\u04d7")
        buf.write("\u04d5\3\2\2\2\u04d8\u04db\3\2\2\2\u04d9\u04d7\3\2\2\2")
        buf.write("\u04d9\u04da\3\2\2\2\u04da\u04dd\3\2\2\2\u04db\u04d9\3")
        buf.write("\2\2\2\u04dc\u04d4\3\2\2\2\u04dc\u04dd\3\2\2\2\u04dd\u04df")
        buf.write("\3\2\2\2\u04de\u04e0\5d\63\2\u04df\u04de\3\2\2\2\u04df")
        buf.write("\u04e0\3\2\2\2\u04e0\u04ec\3\2\2\2\u04e1\u04ea\7a\2\2")
        buf.write("\u04e2\u04e7\5@!\2\u04e3\u04e4\7\60\2\2\u04e4\u04e6\5")
        buf.write("@!\2\u04e5\u04e3\3\2\2\2\u04e6\u04e9\3\2\2\2\u04e7\u04e5")
        buf.write("\3\2\2\2\u04e7\u04e8\3\2\2\2\u04e8\u04eb\3\2\2\2\u04e9")
        buf.write("\u04e7\3\2\2\2\u04ea\u04e2\3\2\2\2\u04ea\u04eb\3\2\2\2")
        buf.write("\u04eb\u04ed\3\2\2\2\u04ec\u04e1\3\2\2\2\u04ec\u04ed\3")
        buf.write("\2\2\2\u04ed\u04f1\3\2\2\2\u04ee\u04ef\7\5\2\2\u04ef\u04f1")
        buf.write("\5\u00eex\2\u04f0\u04dc\3\2\2\2\u04f0\u04ee\3\2\2\2\u04f1")
        buf.write("\u00db\3\2\2\2\u04f2\u04f4\5l\67\2\u04f3\u04f5\5\u00bc")
        buf.write("_\2\u04f4\u04f3\3\2\2\2\u04f4\u04f5\3\2\2\2\u04f5\u04f6")
        buf.write("\3\2\2\2\u04f6\u04f7\7\6\2\2\u04f7\u04f8\5\20\t\2\u04f8")
        buf.write("\u04fa\5T+\2\u04f9\u04fb\5\u00c0a\2\u04fa\u04f9\3\2\2")
        buf.write("\2\u04fa\u04fb\3\2\2\2\u04fb\u00dd\3\2\2\2\u04fc\u04fd")
        buf.write("\7*\2\2\u04fd\u04fe\5\20\t\2\u04fe\u0504\5j\66\2\u04ff")
        buf.write("\u0500\5\4\3\2\u0500\u0501\5j\66\2\u0501\u0503\3\2\2\2")
        buf.write("\u0502\u04ff\3\2\2\2\u0503\u0506\3\2\2\2\u0504\u0502\3")
        buf.write("\2\2\2\u0504\u0505\3\2\2\2\u0505\u0507\3\2\2\2\u0506\u0504")
        buf.write("\3\2\2\2\u0507\u0508\5\22\n\2\u0508\u0509\7+\2\2\u0509")
        buf.write("\u050a\7\6\2\2\u050a\u050b\5\20\t\2\u050b\u050c\5N(\2")
        buf.write("\u050c\u00df\3\2\2\2\u050d\u050e\5\n\6\2\u050e\u0510\5")
        buf.write("\u00eex\2\u050f\u0511\5Z.\2\u0510\u050f\3\2\2\2\u0510")
        buf.write("\u0511\3\2\2\2\u0511\u00e1\3\2\2\2\u0512\u0515\5\u00de")
        buf.write("p\2\u0513\u0515\5p9\2\u0514\u0512\3\2\2\2\u0514\u0513")
        buf.write("\3\2\2\2\u0515\u0517\3\2\2\2\u0516\u0518\5\u00e0q\2\u0517")
        buf.write("\u0516\3\2\2\2\u0517\u0518\3\2\2\2\u0518\u0519\3\2\2\2")
        buf.write("\u0519\u051a\5\u00c0a\2\u051a\u00e3\3\2\2\2\u051b\u051c")
        buf.write("\78\2\2\u051c\u051d\5\20\t\2\u051d\u0523\5 \21\2\u051e")
        buf.write("\u051f\5\4\3\2\u051f\u0520\5 \21\2\u0520\u0522\3\2\2\2")
        buf.write("\u0521\u051e\3\2\2\2\u0522\u0525\3\2\2\2\u0523\u0521\3")
        buf.write("\2\2\2\u0523\u0524\3\2\2\2\u0524\u00e5\3\2\2\2\u0525\u0523")
        buf.write("\3\2\2\2\u0526\u0527\7[\2\2\u0527\u0528\5\20\t\2\u0528")
        buf.write("\u052e\5 \21\2\u0529\u052a\5\4\3\2\u052a\u052b\5 \21\2")
        buf.write("\u052b\u052d\3\2\2\2\u052c\u0529\3\2\2\2\u052d\u0530\3")
        buf.write("\2\2\2\u052e\u052c\3\2\2\2\u052e\u052f\3\2\2\2\u052f\u00e7")
        buf.write("\3\2\2\2\u0530\u052e\3\2\2\2\u0531\u0537\5d\63\2\u0532")
        buf.write("\u0534\7)\2\2\u0533\u0535\7\23\2\2\u0534\u0533\3\2\2\2")
        buf.write("\u0534\u0535\3\2\2\2\u0535\u0536\3\2\2\2\u0536\u0538\5")
        buf.write("\u00eex\2\u0537\u0532\3\2\2\2\u0537\u0538\3\2\2\2\u0538")
        buf.write("\u00e9\3\2\2\2\u0539\u0546\5\u0090I\2\u053a\u0546\5\u0092")
        buf.write("J\2\u053b\u0546\5\u0094K\2\u053c\u0546\5\u0096L\2\u053d")
        buf.write("\u0546\5\u0098M\2\u053e\u0546\5\u009aN\2\u053f\u0546\5")
        buf.write("\u00e8u\2\u0540\u0546\5\u008aF\2\u0541\u0546\5L\'\2\u0542")
        buf.write("\u0546\5\u008eH\2\u0543\u0546\5\u008cG\2\u0544\u0546\5")
        buf.write("\u00c4c\2\u0545\u0539\3\2\2\2\u0545\u053a\3\2\2\2\u0545")
        buf.write("\u053b\3\2\2\2\u0545\u053c\3\2\2\2\u0545\u053d\3\2\2\2")
        buf.write("\u0545\u053e\3\2\2\2\u0545\u053f\3\2\2\2\u0545\u0540\3")
        buf.write("\2\2\2\u0545\u0541\3\2\2\2\u0545\u0542\3\2\2\2\u0545\u0543")
        buf.write("\3\2\2\2\u0545\u0544\3\2\2\2\u0546\u0549\3\2\2\2\u0547")
        buf.write("\u0549\5R*\2\u0548\u0545\3\2\2\2\u0548\u0547\3\2\2\2\u0549")
        buf.write("\u054b\3\2\2\2\u054a\u054c\7\23\2\2\u054b\u054a\3\2\2")
        buf.write("\2\u054b\u054c\3\2\2\2\u054c\u00eb\3\2\2\2\u054d\u056b")
        buf.write("\5\u009eP\2\u054e\u056b\5\u00a0Q\2\u054f\u056b\5\u00a2")
        buf.write("R\2\u0550\u056b\5\u00aaV\2\u0551\u056b\5\u0084C\2\u0552")
        buf.write("\u056b\5\u00b0Y\2\u0553\u056b\5\u00b4[\2\u0554\u056b\5")
        buf.write("\u00b6\\\2\u0555\u056b\5\u00b8]\2\u0556\u0557\7d\2\2\u0557")
        buf.write("\u056b\5\u00c2b\2\u0558\u0559\7Z\2\2\u0559\u056b\5\u00c2")
        buf.write("b\2\u055a\u055b\7W\2\2\u055b\u056b\5\u00c2b\2\u055c\u055d")
        buf.write("\7Y\2\2\u055d\u056b\5\u00c2b\2\u055e\u055f\7l\2\2\u055f")
        buf.write("\u056b\5\u00c2b\2\u0560\u0561\7@\2\2\u0561\u056b\5\u00c2")
        buf.write("b\2\u0562\u0563\7o\2\2\u0563\u056b\5F$\2\u0564\u0565\7")
        buf.write(">\2\2\u0565\u056b\5H%\2\u0566\u0567\t\n\2\2\u0567\u056b")
        buf.write("\5J&\2\u0568\u056b\5\u00e4s\2\u0569\u056b\5\u00e6t\2\u056a")
        buf.write("\u054d\3\2\2\2\u056a\u054e\3\2\2\2\u056a\u054f\3\2\2\2")
        buf.write("\u056a\u0550\3\2\2\2\u056a\u0551\3\2\2\2\u056a\u0552\3")
        buf.write("\2\2\2\u056a\u0553\3\2\2\2\u056a\u0554\3\2\2\2\u056a\u0555")
        buf.write("\3\2\2\2\u056a\u0556\3\2\2\2\u056a\u0558\3\2\2\2\u056a")
        buf.write("\u055a\3\2\2\2\u056a\u055c\3\2\2\2\u056a\u055e\3\2\2\2")
        buf.write("\u056a\u0560\3\2\2\2\u056a\u0562\3\2\2\2\u056a\u0564\3")
        buf.write("\2\2\2\u056a\u0566\3\2\2\2\u056a\u0568\3\2\2\2\u056a\u0569")
        buf.write("\3\2\2\2\u056b\u056e\3\2\2\2\u056c\u056e\5\u00eav\2\u056d")
        buf.write("\u056a\3\2\2\2\u056d\u056c\3\2\2\2\u056e\u00ed\3\2\2\2")
        buf.write("\u056f\u0570\7\5\2\2\u0570\u0575\5\u00ecw\2\u0571\u0572")
        buf.write("\t\2\2\2\u0572\u0574\5\u00ecw\2\u0573\u0571\3\2\2\2\u0574")
        buf.write("\u0577\3\2\2\2\u0575\u0573\3\2\2\2\u0575\u0576\3\2\2\2")
        buf.write("\u0576\u0578\3\2\2\2\u0577\u0575\3\2\2\2\u0578\u0579\7")
        buf.write("\f\2\2\u0579\u0583\3\2\2\2\u057a\u057f\5\u00eav\2\u057b")
        buf.write("\u057c\7\61\2\2\u057c\u057e\5\u00eav\2\u057d\u057b\3\2")
        buf.write("\2\2\u057e\u0581\3\2\2\2\u057f\u057d\3\2\2\2\u057f\u0580")
        buf.write("\3\2\2\2\u0580\u0583\3\2\2\2\u0581\u057f\3\2\2\2\u0582")
        buf.write("\u056f\3\2\2\2\u0582\u057a\3\2\2\2\u0583\u00ef\3\2\2\2")
        buf.write("\u0584\u0585\5\2\2\2\u0585\u00f1\3\2\2\2\u00a4\u00f7\u00fa")
        buf.write("\u00fe\u0102\u0106\u010a\u0111\u0114\u0117\u011f\u0127")
        buf.write("\u0130\u0134\u013e\u0147\u014e\u0156\u015a\u0181\u018c")
        buf.write("\u0192\u0196\u01a0\u01a4\u01ad\u01b1\u01b6\u01bd\u01d1")
        buf.write("\u01d4\u020a\u021b\u021f\u0227\u022e\u0232\u0236\u023e")
        buf.write("\u0242\u0248\u024e\u0256\u025a\u0260\u0266\u026f\u0273")
        buf.write("\u027b\u0283\u0286\u0294\u0297\u029c\u02a2\u02a5\u02ab")
        buf.write("\u02b0\u02b8\u02bc\u02bf\u02cc\u02dc\u02e3\u02e8\u02f2")
        buf.write("\u02fd\u0300\u030a\u0317\u031d\u0322\u0327\u032c\u0331")
        buf.write("\u0336\u033c\u0346\u034e\u0365\u0370\u0378\u037d\u0380")
        buf.write("\u0388\u038e\u0392\u0395\u039e\u03a2\u03a8\u03b1\u03bb")
        buf.write("\u03c3\u03cb\u03d2\u03e1\u03eb\u03f1\u03f7\u03fe\u0404")
        buf.write("\u0407\u0412\u0415\u0417\u041c\u041f\u0423\u0427\u042a")
        buf.write("\u0431\u0437\u043c\u0440\u0444\u044a\u0459\u045b\u045e")
        buf.write("\u0462\u0469\u0470\u0474\u047b\u047d\u0489\u0494\u049c")
        buf.write("\u04a3\u04a6\u04ae\u04b6\u04c0\u04c4\u04c8\u04cb\u04d0")
        buf.write("\u04d9\u04dc\u04df\u04e7\u04ea\u04ec\u04f0\u04f4\u04fa")
        buf.write("\u0504\u0510\u0514\u0517\u0523\u052e\u0534\u0537\u0545")
        buf.write("\u0548\u054b\u056a\u056d\u0575\u057f\u0582")
        return buf.getvalue()


class milestone_2Parser ( Parser ):

    grammarFileName = "milestone_2.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'IND{=}'", "'..'", "'IND{>}'", "'='", 
                     "'[:'", "'`'", "'{.'", "'.}'", "'->'", "'DED'", "'x'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'+'", "'*'", "'-'", "'/'", "'~'", "'&'", 
                     "'|'", "'<'", "'>'", "'@'", "'%'", "'!'", "'^'", "'.'", 
                     "':'", "'('", "')'", "'{'", "'}'", "'['", "']'", "','", 
                     "';'", "<INVALID>", "'and'", "'var'", "'addr'", "'as'", 
                     "'asm'", "'bind'", "'block'", "'break'", "'case'", 
                     "'cast'", "'concept'", "'const'", "'continue'", "'converter'", 
                     "'defer'", "'discard'", "'distinct'", "'div'", "'do'", 
                     "'elif'", "'else'", "'end'", "'enum'", "'except'", 
                     "'export'", "'finally'", "'for'", "'from'", "'func'", 
                     "'if'", "'import'", "'in'", "'include'", "'interface'", 
                     "'is'", "'isnot'", "'iterator'", "'let'", "'macro'", 
                     "'method'", "'mixin'", "'mod'", "'nil'", "'not'", "'notin'", 
                     "'object'", "'of'", "'or'", "'out'", "'proc'", "'ptr'", 
                     "'raise'", "'ref'", "'return'", "'shl'", "'shr'", "'static'", 
                     "'template'", "'try'", "'tuple'", "'type'", "'using'", 
                     "'when'", "'while'", "'xor'", "'yield'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "IDENT", "SKIPINDENT", 
                      "INDENT", "SPACE", "MULTILINECOMMENT", "MULTILINEDOCUMENTATION", 
                      "COMMENT", "TRIPLESTR_LIT", "STR_LIT", "CHAR_LIT", 
                      "RSTR_LIT", "GENERALIZED_STR_LIT", "GENERALIZED_TRIPLESTR_LIT", 
                      "EQUALS_OPERATOR", "ADD_OPERATOR", "MUL_OPERATOR", 
                      "MINUS_OPERATOR", "DIV_OPERATOR", "BITWISE_NOT_OPERATOR", 
                      "AND_OPERATOR", "OR_OPERATOR", "LESS_THAN", "GREATER_THAN", 
                      "AT", "MODULUS", "NOT_OPERATOR", "XOR_OPERATOR", "DOT", 
                      "COLON", "OPEN_PAREN", "CLOSE_PAREN", "OPEN_BRACE", 
                      "CLOSE_BRACE", "OPEN_BRACK", "CLOSE_BRACK", "COMMA", 
                      "SEMI_COLON", "KEYW", "AND", "VARIABLE", "ADDR", "AS", 
                      "ASM", "BIND", "BLOCK", "BREAK", "CASE", "CAST", "CONCEPT", 
                      "CONST", "CONTINUE", "CONVERTER", "DEFER", "DISCARD", 
                      "DISTINCT", "DIV", "DO", "ELIF", "ELSE", "END", "ENUM", 
                      "EXCEPT", "EXPORT", "FINALLY", "FOR", "FROM", "FUNC", 
                      "IF", "IMPORT", "IN", "INCLUDE", "INTERFACE", "IS", 
                      "ISNOT", "ITERATOR", "LET", "MACRO", "METHOD", "MIXIN", 
                      "MOD", "NIL", "NOT", "NOTIN", "OBJECT", "OF", "OR", 
                      "OUT", "PROC", "PTR", "RAISE", "REF", "RETURN", "SHL", 
                      "SHR", "STATIC", "TEMPLATE", "TRY", "TUPLE", "TYPE", 
                      "USING", "WHEN", "WHILE", "XOR", "YIELD", "IDENTIFIER", 
                      "DIGIT", "LETTER", "INT_LIT", "HEXDIGIT", "OCTDIGIT", 
                      "BINDIGIT", "HEX_LIT", "DEC_LIT", "OCT_LIT", "BIN_LIT", 
                      "INT8_LIT", "INT16_LIT", "INT32_LIT", "INT64_LIT", 
                      "UINT_LIT", "UINT8_LIT", "UINT16_LIT", "UINT32_LIT", 
                      "UINT64_LIT", "EXP", "FLOAT_LIT", "FLOAT32_SUFFIX", 
                      "FLOAT32_LIT", "FLOAT64_SUFFIX", "FLOAT64_LIT", "OP0", 
                      "OP1", "OP2", "OP3", "OP4", "OP5", "OP6", "OP7", "OP8", 
                      "OP9", "IND" ]

    RULE_module = 0
    RULE_comma = 1
    RULE_semicolon = 2
    RULE_colon = 3
    RULE_colcom = 4
    RULE_operator = 5
    RULE_prefixOperator = 6
    RULE_optInd = 7
    RULE_optPar = 8
    RULE_symbol = 9
    RULE_exprColonEqExpr = 10
    RULE_exprList = 11
    RULE_exprColonEqExprList = 12
    RULE_dotExpr = 13
    RULE_explicitGenericInstantiation = 14
    RULE_qualifiedIdent = 15
    RULE_setOrTableConstr = 16
    RULE_castExpr = 17
    RULE_parKeyw = 18
    RULE_exprColonExpr = 19
    RULE_literal = 20
    RULE_generalizedLit = 21
    RULE_identOrLiteral = 22
    RULE_tupleConstr = 23
    RULE_arrayConstr = 24
    RULE_primarySuffix = 25
    RULE_indexExprList = 26
    RULE_pragmas = 27
    RULE_indentWithPragma = 28
    RULE_caseExpr = 29
    RULE_typeDescK = 30
    RULE_typeDesc = 31
    RULE_macroColon = 32
    RULE_moduleName = 33
    RULE_sectionTypeDef = 34
    RULE_sectionConstant = 35
    RULE_sectionVariable = 36
    RULE_exportStmt = 37
    RULE_expr = 38
    RULE_typeKeyw = 39
    RULE_exprStmt = 40
    RULE_typeDefAux = 41
    RULE_par = 42
    RULE_opr = 43
    RULE_doBlocks = 44
    RULE_p = 45
    RULE_condExpr = 46
    RULE_ifExpr = 47
    RULE_whenExpr = 48
    RULE_pragma = 49
    RULE_identVis = 50
    RULE_identVisDot = 51
    RULE_identWithPragma = 52
    RULE_identWithPragmaDot = 53
    RULE_declColonEquals = 54
    RULE_identColonEquals = 55
    RULE_inlTupleDecl = 56
    RULE_extTupleDecl = 57
    RULE_tupleClass = 58
    RULE_paramList = 59
    RULE_paramListArrow = 60
    RULE_paramListColon = 61
    RULE_doBlock = 62
    RULE_procExpr = 63
    RULE_distinct = 64
    RULE_forStmt = 65
    RULE_forExpr = 66
    RULE_primary = 67
    RULE_importStmt = 68
    RULE_includeStmt = 69
    RULE_fromStmt = 70
    RULE_returnStmt = 71
    RULE_raiseStmt = 72
    RULE_yieldStmt = 73
    RULE_discardStmt = 74
    RULE_breakStmt = 75
    RULE_continueStmt = 76
    RULE_condStmt = 77
    RULE_ifStmt = 78
    RULE_whenStmt = 79
    RULE_whileStmt = 80
    RULE_ofBranch = 81
    RULE_ofBranches = 82
    RULE_caseStmt = 83
    RULE_tryStmt = 84
    RULE_tryExpr = 85
    RULE_exceptBlock = 86
    RULE_blockStmt = 87
    RULE_blockExpr = 88
    RULE_staticStmt = 89
    RULE_deferStmt = 90
    RULE_asmStmt = 91
    RULE_genericParam = 92
    RULE_genericParamList = 93
    RULE_pattern = 94
    RULE_indAndComment = 95
    RULE_routine = 96
    RULE_commentStmt = 97
    RULE_sectionp = 98
    RULE_constant = 99
    RULE_enum = 100
    RULE_objectWhen = 101
    RULE_objectBranch = 102
    RULE_objectBranches = 103
    RULE_objectCase = 104
    RULE_objectPart = 105
    RULE_objectX = 106
    RULE_typeClassParam = 107
    RULE_typeClass = 108
    RULE_typeDef = 109
    RULE_varTuple = 110
    RULE_colonBody = 111
    RULE_variable = 112
    RULE_bindStmt = 113
    RULE_mixinStmt = 114
    RULE_pragmaStmt = 115
    RULE_simpleStmt = 116
    RULE_complexOrSimpleStmt = 117
    RULE_stmt = 118
    RULE_start = 119

    ruleNames =  [ "module", "comma", "semicolon", "colon", "colcom", "operator", 
                   "prefixOperator", "optInd", "optPar", "symbol", "exprColonEqExpr", 
                   "exprList", "exprColonEqExprList", "dotExpr", "explicitGenericInstantiation", 
                   "qualifiedIdent", "setOrTableConstr", "castExpr", "parKeyw", 
                   "exprColonExpr", "literal", "generalizedLit", "identOrLiteral", 
                   "tupleConstr", "arrayConstr", "primarySuffix", "indexExprList", 
                   "pragmas", "indentWithPragma", "caseExpr", "typeDescK", 
                   "typeDesc", "macroColon", "moduleName", "sectionTypeDef", 
                   "sectionConstant", "sectionVariable", "exportStmt", "expr", 
                   "typeKeyw", "exprStmt", "typeDefAux", "par", "opr", "doBlocks", 
                   "p", "condExpr", "ifExpr", "whenExpr", "pragma", "identVis", 
                   "identVisDot", "identWithPragma", "identWithPragmaDot", 
                   "declColonEquals", "identColonEquals", "inlTupleDecl", 
                   "extTupleDecl", "tupleClass", "paramList", "paramListArrow", 
                   "paramListColon", "doBlock", "procExpr", "distinct", 
                   "forStmt", "forExpr", "primary", "importStmt", "includeStmt", 
                   "fromStmt", "returnStmt", "raiseStmt", "yieldStmt", "discardStmt", 
                   "breakStmt", "continueStmt", "condStmt", "ifStmt", "whenStmt", 
                   "whileStmt", "ofBranch", "ofBranches", "caseStmt", "tryStmt", 
                   "tryExpr", "exceptBlock", "blockStmt", "blockExpr", "staticStmt", 
                   "deferStmt", "asmStmt", "genericParam", "genericParamList", 
                   "pattern", "indAndComment", "routine", "commentStmt", 
                   "sectionp", "constant", "enum", "objectWhen", "objectBranch", 
                   "objectBranches", "objectCase", "objectPart", "objectX", 
                   "typeClassParam", "typeClass", "typeDef", "varTuple", 
                   "colonBody", "variable", "bindStmt", "mixinStmt", "pragmaStmt", 
                   "simpleStmt", "complexOrSimpleStmt", "stmt", "start" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    IDENT=11
    SKIPINDENT=12
    INDENT=13
    SPACE=14
    MULTILINECOMMENT=15
    MULTILINEDOCUMENTATION=16
    COMMENT=17
    TRIPLESTR_LIT=18
    STR_LIT=19
    CHAR_LIT=20
    RSTR_LIT=21
    GENERALIZED_STR_LIT=22
    GENERALIZED_TRIPLESTR_LIT=23
    EQUALS_OPERATOR=24
    ADD_OPERATOR=25
    MUL_OPERATOR=26
    MINUS_OPERATOR=27
    DIV_OPERATOR=28
    BITWISE_NOT_OPERATOR=29
    AND_OPERATOR=30
    OR_OPERATOR=31
    LESS_THAN=32
    GREATER_THAN=33
    AT=34
    MODULUS=35
    NOT_OPERATOR=36
    XOR_OPERATOR=37
    DOT=38
    COLON=39
    OPEN_PAREN=40
    CLOSE_PAREN=41
    OPEN_BRACE=42
    CLOSE_BRACE=43
    OPEN_BRACK=44
    CLOSE_BRACK=45
    COMMA=46
    SEMI_COLON=47
    KEYW=48
    AND=49
    VARIABLE=50
    ADDR=51
    AS=52
    ASM=53
    BIND=54
    BLOCK=55
    BREAK=56
    CASE=57
    CAST=58
    CONCEPT=59
    CONST=60
    CONTINUE=61
    CONVERTER=62
    DEFER=63
    DISCARD=64
    DISTINCT=65
    DIV=66
    DO=67
    ELIF=68
    ELSE=69
    END=70
    ENUM=71
    EXCEPT=72
    EXPORT=73
    FINALLY=74
    FOR=75
    FROM=76
    FUNC=77
    IF=78
    IMPORT=79
    IN=80
    INCLUDE=81
    INTERFACE=82
    IS=83
    ISNOT=84
    ITERATOR=85
    LET=86
    MACRO=87
    METHOD=88
    MIXIN=89
    MOD=90
    NIL=91
    NOT=92
    NOTIN=93
    OBJECT=94
    OF=95
    OR=96
    OUT=97
    PROC=98
    PTR=99
    RAISE=100
    REF=101
    RETURN=102
    SHL=103
    SHR=104
    STATIC=105
    TEMPLATE=106
    TRY=107
    TUPLE=108
    TYPE=109
    USING=110
    WHEN=111
    WHILE=112
    XOR=113
    YIELD=114
    IDENTIFIER=115
    DIGIT=116
    LETTER=117
    INT_LIT=118
    HEXDIGIT=119
    OCTDIGIT=120
    BINDIGIT=121
    HEX_LIT=122
    DEC_LIT=123
    OCT_LIT=124
    BIN_LIT=125
    INT8_LIT=126
    INT16_LIT=127
    INT32_LIT=128
    INT64_LIT=129
    UINT_LIT=130
    UINT8_LIT=131
    UINT16_LIT=132
    UINT32_LIT=133
    UINT64_LIT=134
    EXP=135
    FLOAT_LIT=136
    FLOAT32_SUFFIX=137
    FLOAT32_LIT=138
    FLOAT64_SUFFIX=139
    FLOAT64_LIT=140
    OP0=141
    OP1=142
    OP2=143
    OP3=144
    OP4=145
    OP5=146
    OP6=147
    OP7=148
    OP8=149
    OP9=150
    IND=151

    def __init__(self, input:TokenStream):
        super().__init__(input)
        self.checkVersion("4.5.3")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    class ModuleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.StmtContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.StmtContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_module

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModule" ):
                listener.enterModule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModule" ):
                listener.exitModule(self)




    def module(self):

        localctx = milestone_2Parser.ModuleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_module)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 248
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << milestone_2Parser.T__2) | (1 << milestone_2Parser.T__6) | (1 << milestone_2Parser.IDENT) | (1 << milestone_2Parser.COMMENT) | (1 << milestone_2Parser.BREAK))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (milestone_2Parser.DISCARD - 64)) | (1 << (milestone_2Parser.FROM - 64)) | (1 << (milestone_2Parser.IMPORT - 64)) | (1 << (milestone_2Parser.INCLUDE - 64)) | (1 << (milestone_2Parser.RAISE - 64)) | (1 << (milestone_2Parser.RETURN - 64)) | (1 << (milestone_2Parser.YIELD - 64)))) != 0):
                self.state = 240
                self.stmt()
                self.state = 245
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==milestone_2Parser.T__0 or _la==milestone_2Parser.SEMI_COLON:
                    self.state = 241
                    _la = self._input.LA(1)
                    if not(_la==milestone_2Parser.T__0 or _la==milestone_2Parser.SEMI_COLON):
                        self._errHandler.recoverInline(self)
                    else:
                        self.consume()
                    self.state = 242
                    self.stmt()
                    self.state = 247
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CommaContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMENT(self):
            return self.getToken(milestone_2Parser.COMMENT, 0)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_comma

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComma" ):
                listener.enterComma(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComma" ):
                listener.exitComma(self)




    def comma(self):

        localctx = milestone_2Parser.CommaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_comma)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 250
            self.match(milestone_2Parser.COMMA)
            self.state = 252
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.state = 251
                self.match(milestone_2Parser.COMMENT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SemicolonContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMENT(self):
            return self.getToken(milestone_2Parser.COMMENT, 0)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_semicolon

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSemicolon" ):
                listener.enterSemicolon(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSemicolon" ):
                listener.exitSemicolon(self)




    def semicolon(self):

        localctx = milestone_2Parser.SemicolonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_semicolon)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 254
            self.match(milestone_2Parser.SEMI_COLON)
            self.state = 256
            _la = self._input.LA(1)
            if _la==milestone_2Parser.COMMENT:
                self.state = 255
                self.match(milestone_2Parser.COMMENT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ColonContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMENT(self):
            return self.getToken(milestone_2Parser.COMMENT, 0)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_colon

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColon" ):
                listener.enterColon(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColon" ):
                listener.exitColon(self)




    def colon(self):

        localctx = milestone_2Parser.ColonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_colon)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 258
            self.match(milestone_2Parser.COLON)
            self.state = 260
            _la = self._input.LA(1)
            if _la==milestone_2Parser.COMMENT:
                self.state = 259
                self.match(milestone_2Parser.COMMENT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ColcomContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMENT(self):
            return self.getToken(milestone_2Parser.COMMENT, 0)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_colcom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColcom" ):
                listener.enterColcom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColcom" ):
                listener.exitColcom(self)




    def colcom(self):

        localctx = milestone_2Parser.ColcomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_colcom)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 262
            self.match(milestone_2Parser.COLON)
            self.state = 264
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.state = 263
                self.match(milestone_2Parser.COMMENT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP0(self):
            return self.getToken(milestone_2Parser.OP0, 0)

        def OP1(self):
            return self.getToken(milestone_2Parser.OP1, 0)

        def OP2(self):
            return self.getToken(milestone_2Parser.OP2, 0)

        def OP3(self):
            return self.getToken(milestone_2Parser.OP3, 0)

        def OP4(self):
            return self.getToken(milestone_2Parser.OP4, 0)

        def OP5(self):
            return self.getToken(milestone_2Parser.OP5, 0)

        def OP6(self):
            return self.getToken(milestone_2Parser.OP6, 0)

        def OP7(self):
            return self.getToken(milestone_2Parser.OP7, 0)

        def OP8(self):
            return self.getToken(milestone_2Parser.OP8, 0)

        def OP9(self):
            return self.getToken(milestone_2Parser.OP9, 0)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperator" ):
                listener.enterOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperator" ):
                listener.exitOperator(self)




    def operator(self):

        localctx = milestone_2Parser.OperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 266
            _la = self._input.LA(1)
            if not(_la==milestone_2Parser.T__1 or _la==milestone_2Parser.AND or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (milestone_2Parser.DIV - 66)) | (1 << (milestone_2Parser.IN - 66)) | (1 << (milestone_2Parser.IS - 66)) | (1 << (milestone_2Parser.ISNOT - 66)) | (1 << (milestone_2Parser.MOD - 66)) | (1 << (milestone_2Parser.NOT - 66)) | (1 << (milestone_2Parser.NOTIN - 66)) | (1 << (milestone_2Parser.OF - 66)) | (1 << (milestone_2Parser.OR - 66)) | (1 << (milestone_2Parser.SHL - 66)) | (1 << (milestone_2Parser.SHR - 66)) | (1 << (milestone_2Parser.STATIC - 66)) | (1 << (milestone_2Parser.XOR - 66)))) != 0) or ((((_la - 141)) & ~0x3f) == 0 and ((1 << (_la - 141)) & ((1 << (milestone_2Parser.OP0 - 141)) | (1 << (milestone_2Parser.OP1 - 141)) | (1 << (milestone_2Parser.OP2 - 141)) | (1 << (milestone_2Parser.OP3 - 141)) | (1 << (milestone_2Parser.OP4 - 141)) | (1 << (milestone_2Parser.OP5 - 141)) | (1 << (milestone_2Parser.OP6 - 141)) | (1 << (milestone_2Parser.OP7 - 141)) | (1 << (milestone_2Parser.OP8 - 141)) | (1 << (milestone_2Parser.OP9 - 141)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrefixOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def operator(self):
            return self.getTypedRuleContext(milestone_2Parser.OperatorContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_prefixOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrefixOperator" ):
                listener.enterPrefixOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrefixOperator" ):
                listener.exitPrefixOperator(self)




    def prefixOperator(self):

        localctx = milestone_2Parser.PrefixOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_prefixOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 268
            self.operator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OptIndContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMENT(self):
            return self.getToken(milestone_2Parser.COMMENT, 0)

        def IND(self):
            return self.getToken(milestone_2Parser.IND, 0)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_optInd

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptInd" ):
                listener.enterOptInd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptInd" ):
                listener.exitOptInd(self)




    def optInd(self):

        localctx = milestone_2Parser.OptIndContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_optInd)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 271
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.state = 270
                self.match(milestone_2Parser.COMMENT)


            self.state = 274
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.state = 273
                self.match(milestone_2Parser.IND)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OptParContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return milestone_2Parser.RULE_optPar

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptPar" ):
                listener.enterOptPar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptPar" ):
                listener.exitOptPar(self)




    def optPar(self):

        localctx = milestone_2Parser.OptParContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_optPar)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 277
            _la = self._input.LA(1)
            if _la==milestone_2Parser.T__0 or _la==milestone_2Parser.T__2:
                self.state = 276
                _la = self._input.LA(1)
                if not(_la==milestone_2Parser.T__0 or _la==milestone_2Parser.T__2):
                    self._errHandler.recoverInline(self)
                else:
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SymbolContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return milestone_2Parser.RULE_symbol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSymbol" ):
                listener.enterSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSymbol" ):
                listener.exitSymbol(self)




    def symbol(self):

        localctx = milestone_2Parser.SymbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_symbol)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 279
            self.match(milestone_2Parser.IDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExprColonEqExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ExprContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_exprColonEqExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprColonEqExpr" ):
                listener.enterExprColonEqExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprColonEqExpr" ):
                listener.exitExprColonEqExpr(self)




    def exprColonEqExpr(self):

        localctx = milestone_2Parser.ExprColonEqExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_exprColonEqExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 281
            self.expr()
            self.state = 285
            token = self._input.LA(1)
            if token in [milestone_2Parser.COLON]:
                self.state = 282
                self.match(milestone_2Parser.COLON)
                pass
            elif token in [milestone_2Parser.T__3]:
                self.state = 283
                self.match(milestone_2Parser.T__3)
                self.state = 284
                self.expr()
                pass
            elif token in [milestone_2Parser.EOF, milestone_2Parser.T__0, milestone_2Parser.T__2, milestone_2Parser.IDENT, milestone_2Parser.CLOSE_PAREN, milestone_2Parser.CLOSE_BRACK, milestone_2Parser.COMMA]:
                pass
            else:
                raise NoViableAltException(self)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExprListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ExprContext,i)


        def comma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.CommaContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.CommaContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_exprList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprList" ):
                listener.enterExprList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprList" ):
                listener.exitExprList(self)




    def exprList(self):

        localctx = milestone_2Parser.ExprListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_exprList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 287
            self.expr()
            self.state = 293
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==milestone_2Parser.COMMA:
                self.state = 288
                self.comma()
                self.state = 289
                self.expr()
                self.state = 295
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExprColonEqExprListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exprColonEqExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ExprColonEqExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ExprColonEqExprContext,i)


        def comma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.CommaContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.CommaContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_exprColonEqExprList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprColonEqExprList" ):
                listener.enterExprColonEqExprList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprColonEqExprList" ):
                listener.exitExprColonEqExprList(self)




    def exprColonEqExprList(self):

        localctx = milestone_2Parser.ExprColonEqExprListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_exprColonEqExprList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 296
            self.exprColonEqExpr()
            self.state = 302
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,11,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 297
                    self.comma()
                    self.state = 298
                    self.exprColonEqExpr() 
                self.state = 304
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,11,self._ctx)

            self.state = 306
            _la = self._input.LA(1)
            if _la==milestone_2Parser.COMMA:
                self.state = 305
                self.comma()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DotExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(milestone_2Parser.ExprContext,0)


        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def symbol(self):
            return self.getTypedRuleContext(milestone_2Parser.SymbolContext,0)


        def exprList(self):
            return self.getTypedRuleContext(milestone_2Parser.ExprListContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_dotExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotExpr" ):
                listener.enterDotExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotExpr" ):
                listener.exitDotExpr(self)




    def dotExpr(self):

        localctx = milestone_2Parser.DotExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_dotExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 308
            self.expr()
            self.state = 309
            self.match(milestone_2Parser.DOT)
            self.state = 310
            self.optInd()
            self.state = 316
            token = self._input.LA(1)
            if token in [milestone_2Parser.IDENT]:
                self.state = 311
                self.symbol()

            elif token in [milestone_2Parser.T__4]:
                self.state = 312
                self.match(milestone_2Parser.T__4)
                self.state = 313
                self.exprList()
                self.state = 314
                self.match(milestone_2Parser.CLOSE_BRACK)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExplicitGenericInstantiationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exprList(self):
            return self.getTypedRuleContext(milestone_2Parser.ExprListContext,0)


        def exprColonEqExpr(self):
            return self.getTypedRuleContext(milestone_2Parser.ExprColonEqExprContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_explicitGenericInstantiation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicitGenericInstantiation" ):
                listener.enterExplicitGenericInstantiation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicitGenericInstantiation" ):
                listener.exitExplicitGenericInstantiation(self)




    def explicitGenericInstantiation(self):

        localctx = milestone_2Parser.ExplicitGenericInstantiationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_explicitGenericInstantiation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 318
            self.match(milestone_2Parser.T__4)
            self.state = 319
            self.exprList()
            self.state = 320
            self.match(milestone_2Parser.CLOSE_BRACK)
            self.state = 325
            _la = self._input.LA(1)
            if _la==milestone_2Parser.OPEN_PAREN:
                self.state = 321
                self.match(milestone_2Parser.OPEN_PAREN)
                self.state = 322
                self.exprColonEqExpr()
                self.state = 323
                self.match(milestone_2Parser.CLOSE_PAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QualifiedIdentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.SymbolContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.SymbolContext,i)


        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_qualifiedIdent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedIdent" ):
                listener.enterQualifiedIdent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedIdent" ):
                listener.exitQualifiedIdent(self)




    def qualifiedIdent(self):

        localctx = milestone_2Parser.QualifiedIdentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_qualifiedIdent)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 327
            self.symbol()
            self.state = 332
            _la = self._input.LA(1)
            if _la==milestone_2Parser.DOT:
                self.state = 328
                self.match(milestone_2Parser.DOT)
                self.state = 329
                self.optInd()
                self.state = 330
                self.symbol()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SetOrTableConstrContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exprColonEqExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ExprColonEqExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ExprColonEqExprContext,i)


        def comma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.CommaContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.CommaContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_setOrTableConstr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetOrTableConstr" ):
                listener.enterSetOrTableConstr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetOrTableConstr" ):
                listener.exitSetOrTableConstr(self)




    def setOrTableConstr(self):

        localctx = milestone_2Parser.SetOrTableConstrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_setOrTableConstr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 334
            self.match(milestone_2Parser.OPEN_BRACE)
            self.state = 344
            token = self._input.LA(1)
            if token in [milestone_2Parser.IDENT, milestone_2Parser.CLOSE_BRACE]:
                self.state = 340
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==milestone_2Parser.IDENT:
                    self.state = 335
                    self.exprColonEqExpr()
                    self.state = 336
                    self.comma()
                    self.state = 342
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)


            elif token in [milestone_2Parser.COLON]:
                self.state = 343
                self.match(milestone_2Parser.COLON)

            else:
                raise NoViableAltException(self)

            self.state = 346
            self.match(milestone_2Parser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CastExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.OptIndContext,i)


        def typeDesc(self):
            return self.getTypedRuleContext(milestone_2Parser.TypeDescContext,0)


        def optPar(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.OptParContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.OptParContext,i)


        def expr(self):
            return self.getTypedRuleContext(milestone_2Parser.ExprContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_castExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCastExpr" ):
                listener.enterCastExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCastExpr" ):
                listener.exitCastExpr(self)




    def castExpr(self):

        localctx = milestone_2Parser.CastExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_castExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 348
            self.match(milestone_2Parser.CAST)
            self.state = 349
            self.match(milestone_2Parser.OPEN_BRACK)
            self.state = 350
            self.optInd()
            self.state = 351
            self.typeDesc()
            self.state = 352
            self.optPar()
            self.state = 353
            self.match(milestone_2Parser.CLOSE_BRACK)
            self.state = 354
            self.match(milestone_2Parser.OPEN_PAREN)
            self.state = 355
            self.optInd()
            self.state = 356
            self.expr()
            self.state = 357
            self.optPar()
            self.state = 358
            self.match(milestone_2Parser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParKeywContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return milestone_2Parser.RULE_parKeyw

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParKeyw" ):
                listener.enterParKeyw(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParKeyw" ):
                listener.exitParKeyw(self)




    def parKeyw(self):

        localctx = milestone_2Parser.ParKeywContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_parKeyw)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 360
            _la = self._input.LA(1)
            if not(((((_la - 50)) & ~0x3f) == 0 and ((1 << (_la - 50)) & ((1 << (milestone_2Parser.VARIABLE - 50)) | (1 << (milestone_2Parser.BLOCK - 50)) | (1 << (milestone_2Parser.CASE - 50)) | (1 << (milestone_2Parser.CONST - 50)) | (1 << (milestone_2Parser.DISCARD - 50)) | (1 << (milestone_2Parser.EXCEPT - 50)) | (1 << (milestone_2Parser.FINALLY - 50)) | (1 << (milestone_2Parser.FOR - 50)) | (1 << (milestone_2Parser.IF - 50)) | (1 << (milestone_2Parser.INCLUDE - 50)) | (1 << (milestone_2Parser.LET - 50)) | (1 << (milestone_2Parser.MIXIN - 50)) | (1 << (milestone_2Parser.TRY - 50)) | (1 << (milestone_2Parser.WHEN - 50)) | (1 << (milestone_2Parser.WHILE - 50)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExprColonExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return milestone_2Parser.RULE_exprColonExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprColonExpr" ):
                listener.enterExprColonExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprColonExpr" ):
                listener.exitExprColonExpr(self)




    def exprColonExpr(self):

        localctx = milestone_2Parser.ExprColonExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_exprColonExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 362
            self.match(milestone_2Parser.IDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT_LIT(self):
            return self.getToken(milestone_2Parser.INT_LIT, 0)

        def INT8_LIT(self):
            return self.getToken(milestone_2Parser.INT8_LIT, 0)

        def INT16_LIT(self):
            return self.getToken(milestone_2Parser.INT16_LIT, 0)

        def INT32_LIT(self):
            return self.getToken(milestone_2Parser.INT32_LIT, 0)

        def INT64_LIT(self):
            return self.getToken(milestone_2Parser.INT64_LIT, 0)

        def UINT_LIT(self):
            return self.getToken(milestone_2Parser.UINT_LIT, 0)

        def UINT8_LIT(self):
            return self.getToken(milestone_2Parser.UINT8_LIT, 0)

        def UINT16_LIT(self):
            return self.getToken(milestone_2Parser.UINT16_LIT, 0)

        def UINT32_LIT(self):
            return self.getToken(milestone_2Parser.UINT32_LIT, 0)

        def UINT64_LIT(self):
            return self.getToken(milestone_2Parser.UINT64_LIT, 0)

        def FLOAT_LIT(self):
            return self.getToken(milestone_2Parser.FLOAT_LIT, 0)

        def FLOAT32_LIT(self):
            return self.getToken(milestone_2Parser.FLOAT32_LIT, 0)

        def FLOAT64_LIT(self):
            return self.getToken(milestone_2Parser.FLOAT64_LIT, 0)

        def STR_LIT(self):
            return self.getToken(milestone_2Parser.STR_LIT, 0)

        def RSTR_LIT(self):
            return self.getToken(milestone_2Parser.RSTR_LIT, 0)

        def TRIPLESTR_LIT(self):
            return self.getToken(milestone_2Parser.TRIPLESTR_LIT, 0)

        def CHAR_LIT(self):
            return self.getToken(milestone_2Parser.CHAR_LIT, 0)

        def NIL(self):
            return self.getToken(milestone_2Parser.NIL, 0)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)




    def literal(self):

        localctx = milestone_2Parser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_literal)
        try:
            self.state = 383
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 365
                self.match(milestone_2Parser.INT_LIT)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 366
                self.match(milestone_2Parser.INT8_LIT)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 367
                self.match(milestone_2Parser.INT16_LIT)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 368
                self.match(milestone_2Parser.INT32_LIT)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 369
                self.match(milestone_2Parser.INT64_LIT)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 370
                self.match(milestone_2Parser.UINT_LIT)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 371
                self.match(milestone_2Parser.UINT8_LIT)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 372
                self.match(milestone_2Parser.UINT16_LIT)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 373
                self.match(milestone_2Parser.UINT32_LIT)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 374
                self.match(milestone_2Parser.UINT64_LIT)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 375
                self.match(milestone_2Parser.FLOAT_LIT)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 376
                self.match(milestone_2Parser.FLOAT32_LIT)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 377
                self.match(milestone_2Parser.FLOAT64_LIT)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 378
                self.match(milestone_2Parser.STR_LIT)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 379
                self.match(milestone_2Parser.RSTR_LIT)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 380
                self.match(milestone_2Parser.TRIPLESTR_LIT)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 381
                self.match(milestone_2Parser.CHAR_LIT)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 382
                self.match(milestone_2Parser.NIL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GeneralizedLitContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GENERALIZED_STR_LIT(self):
            return self.getToken(milestone_2Parser.GENERALIZED_STR_LIT, 0)

        def GENERALIZED_TRIPLESTR_LIT(self):
            return self.getToken(milestone_2Parser.GENERALIZED_TRIPLESTR_LIT, 0)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_generalizedLit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneralizedLit" ):
                listener.enterGeneralizedLit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneralizedLit" ):
                listener.exitGeneralizedLit(self)




    def generalizedLit(self):

        localctx = milestone_2Parser.GeneralizedLitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_generalizedLit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 385
            _la = self._input.LA(1)
            if not(_la==milestone_2Parser.GENERALIZED_STR_LIT or _la==milestone_2Parser.GENERALIZED_TRIPLESTR_LIT):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdentOrLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def generalizedLit(self):
            return self.getTypedRuleContext(milestone_2Parser.GeneralizedLitContext,0)


        def symbol(self):
            return self.getTypedRuleContext(milestone_2Parser.SymbolContext,0)


        def literal(self):
            return self.getTypedRuleContext(milestone_2Parser.LiteralContext,0)


        def par(self):
            return self.getTypedRuleContext(milestone_2Parser.ParContext,0)


        def arrayConstr(self):
            return self.getTypedRuleContext(milestone_2Parser.ArrayConstrContext,0)


        def setOrTableConstr(self):
            return self.getTypedRuleContext(milestone_2Parser.SetOrTableConstrContext,0)


        def castExpr(self):
            return self.getTypedRuleContext(milestone_2Parser.CastExprContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_identOrLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentOrLiteral" ):
                listener.enterIdentOrLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentOrLiteral" ):
                listener.exitIdentOrLiteral(self)




    def identOrLiteral(self):

        localctx = milestone_2Parser.IdentOrLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_identOrLiteral)
        try:
            self.state = 394
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 387
                self.generalizedLit()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 388
                self.symbol()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 389
                self.literal()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 390
                self.par()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 391
                self.arrayConstr()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 392
                self.setOrTableConstr()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 393
                self.castExpr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TupleConstrContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def optPar(self):
            return self.getTypedRuleContext(milestone_2Parser.OptParContext,0)


        def exprColonEqExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ExprColonEqExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ExprColonEqExprContext,i)


        def comma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.CommaContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.CommaContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_tupleConstr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTupleConstr" ):
                listener.enterTupleConstr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTupleConstr" ):
                listener.exitTupleConstr(self)




    def tupleConstr(self):

        localctx = milestone_2Parser.TupleConstrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_tupleConstr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 396
            self.match(milestone_2Parser.OPEN_PAREN)
            self.state = 397
            self.optInd()
            self.state = 404
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==milestone_2Parser.IDENT:
                self.state = 398
                self.exprColonEqExpr()
                self.state = 400
                _la = self._input.LA(1)
                if _la==milestone_2Parser.COMMA:
                    self.state = 399
                    self.comma()


                self.state = 406
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 407
            self.optPar()
            self.state = 408
            self.match(milestone_2Parser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArrayConstrContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def optPar(self):
            return self.getTypedRuleContext(milestone_2Parser.OptParContext,0)


        def exprColonEqExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ExprColonEqExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ExprColonEqExprContext,i)


        def comma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.CommaContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.CommaContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_arrayConstr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayConstr" ):
                listener.enterArrayConstr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayConstr" ):
                listener.exitArrayConstr(self)




    def arrayConstr(self):

        localctx = milestone_2Parser.ArrayConstrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_arrayConstr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 410
            self.match(milestone_2Parser.OPEN_BRACK)
            self.state = 411
            self.optInd()
            self.state = 418
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==milestone_2Parser.IDENT:
                self.state = 412
                self.exprColonEqExpr()
                self.state = 414
                _la = self._input.LA(1)
                if _la==milestone_2Parser.COMMA:
                    self.state = 413
                    self.comma()


                self.state = 420
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 421
            self.optPar()
            self.state = 422
            self.match(milestone_2Parser.CLOSE_BRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrimarySuffixContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exprColonEqExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ExprColonEqExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ExprColonEqExprContext,i)


        def doBlocks(self):
            return self.getTypedRuleContext(milestone_2Parser.DoBlocksContext,0)


        def comma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.CommaContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.CommaContext,i)


        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def symbol(self):
            return self.getTypedRuleContext(milestone_2Parser.SymbolContext,0)


        def generalizedLit(self):
            return self.getTypedRuleContext(milestone_2Parser.GeneralizedLitContext,0)


        def indexExprList(self):
            return self.getTypedRuleContext(milestone_2Parser.IndexExprListContext,0)


        def optPar(self):
            return self.getTypedRuleContext(milestone_2Parser.OptParContext,0)


        def expr(self):
            return self.getTypedRuleContext(milestone_2Parser.ExprContext,0)


        def IDENT(self):
            return self.getToken(milestone_2Parser.IDENT, 0)

        def literal(self):
            return self.getTypedRuleContext(milestone_2Parser.LiteralContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_primarySuffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimarySuffix" ):
                listener.enterPrimarySuffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimarySuffix" ):
                listener.exitPrimarySuffix(self)




    def primarySuffix(self):

        localctx = milestone_2Parser.PrimarySuffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_primarySuffix)
        self._la = 0 # Token type
        try:
            self.state = 466
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 424
                self.match(milestone_2Parser.OPEN_PAREN)
                self.state = 431
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==milestone_2Parser.IDENT:
                    self.state = 425
                    self.exprColonEqExpr()
                    self.state = 427
                    _la = self._input.LA(1)
                    if _la==milestone_2Parser.COMMA:
                        self.state = 426
                        self.comma()


                    self.state = 433
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 434
                self.match(milestone_2Parser.CLOSE_PAREN)
                self.state = 436
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
                if la_ == 1:
                    self.state = 435
                    self.doBlocks()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 438
                self.doBlocks()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 439
                self.match(milestone_2Parser.DOT)
                self.state = 440
                self.optInd()
                self.state = 441
                self.symbol()
                self.state = 443
                _la = self._input.LA(1)
                if _la==milestone_2Parser.GENERALIZED_STR_LIT or _la==milestone_2Parser.GENERALIZED_TRIPLESTR_LIT:
                    self.state = 442
                    self.generalizedLit()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 445
                self.match(milestone_2Parser.OPEN_BRACK)
                self.state = 446
                self.optInd()
                self.state = 447
                self.indexExprList()
                self.state = 448
                self.optPar()
                self.state = 449
                self.match(milestone_2Parser.CLOSE_BRACK)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 451
                self.match(milestone_2Parser.OPEN_BRACE)
                self.state = 452
                self.optInd()
                self.state = 453
                self.indexExprList()
                self.state = 454
                self.optPar()
                self.state = 455
                self.match(milestone_2Parser.CLOSE_BRACE)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 463
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
                if la_ == 1:
                    self.state = 457
                    self.match(milestone_2Parser.T__5)
                    pass

                elif la_ == 2:
                    self.state = 458
                    self.match(milestone_2Parser.IDENT)
                    pass

                elif la_ == 3:
                    self.state = 459
                    self.literal()
                    pass

                elif la_ == 4:
                    self.state = 460
                    self.match(milestone_2Parser.CAST)
                    pass

                elif la_ == 5:
                    self.state = 461
                    self.match(milestone_2Parser.ADDR)
                    pass

                elif la_ == 6:
                    self.state = 462
                    self.match(milestone_2Parser.TYPE)
                    pass


                self.state = 465
                self.expr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IndexExprListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return milestone_2Parser.RULE_indexExprList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexExprList" ):
                listener.enterIndexExprList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexExprList" ):
                listener.exitIndexExprList(self)




    def indexExprList(self):

        localctx = milestone_2Parser.IndexExprListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_indexExprList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 468
            self.match(milestone_2Parser.IDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PragmasContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return milestone_2Parser.RULE_pragmas

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragmas" ):
                listener.enterPragmas(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragmas" ):
                listener.exitPragmas(self)




    def pragmas(self):

        localctx = milestone_2Parser.PragmasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_pragmas)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 470
            self.match(milestone_2Parser.IDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IndentWithPragmaContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return milestone_2Parser.RULE_indentWithPragma

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndentWithPragma" ):
                listener.enterIndentWithPragma(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndentWithPragma" ):
                listener.exitIndentWithPragma(self)




    def indentWithPragma(self):

        localctx = milestone_2Parser.IndentWithPragmaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_indentWithPragma)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 472
            self.match(milestone_2Parser.IDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CaseExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return milestone_2Parser.RULE_caseExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseExpr" ):
                listener.enterCaseExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseExpr" ):
                listener.exitCaseExpr(self)




    def caseExpr(self):

        localctx = milestone_2Parser.CaseExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_caseExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 474
            self.match(milestone_2Parser.IDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeDescKContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return milestone_2Parser.RULE_typeDescK

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeDescK" ):
                listener.enterTypeDescK(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeDescK" ):
                listener.exitTypeDescK(self)




    def typeDescK(self):

        localctx = milestone_2Parser.TypeDescKContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_typeDescK)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 476
            self.match(milestone_2Parser.IDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeDescContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return milestone_2Parser.RULE_typeDesc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeDesc" ):
                listener.enterTypeDesc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeDesc" ):
                listener.exitTypeDesc(self)




    def typeDesc(self):

        localctx = milestone_2Parser.TypeDescContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_typeDesc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 478
            self.match(milestone_2Parser.IDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MacroColonContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return milestone_2Parser.RULE_macroColon

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroColon" ):
                listener.enterMacroColon(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroColon" ):
                listener.exitMacroColon(self)




    def macroColon(self):

        localctx = milestone_2Parser.MacroColonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_macroColon)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 480
            self.match(milestone_2Parser.IDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ModuleNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return milestone_2Parser.RULE_moduleName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleName" ):
                listener.enterModuleName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleName" ):
                listener.exitModuleName(self)




    def moduleName(self):

        localctx = milestone_2Parser.ModuleNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_moduleName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 482
            self.match(milestone_2Parser.IDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SectionTypeDefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return milestone_2Parser.RULE_sectionTypeDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSectionTypeDef" ):
                listener.enterSectionTypeDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSectionTypeDef" ):
                listener.exitSectionTypeDef(self)




    def sectionTypeDef(self):

        localctx = milestone_2Parser.SectionTypeDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_sectionTypeDef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 484
            self.match(milestone_2Parser.IDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SectionConstantContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return milestone_2Parser.RULE_sectionConstant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSectionConstant" ):
                listener.enterSectionConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSectionConstant" ):
                listener.exitSectionConstant(self)




    def sectionConstant(self):

        localctx = milestone_2Parser.SectionConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_sectionConstant)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 486
            self.match(milestone_2Parser.IDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SectionVariableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return milestone_2Parser.RULE_sectionVariable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSectionVariable" ):
                listener.enterSectionVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSectionVariable" ):
                listener.exitSectionVariable(self)




    def sectionVariable(self):

        localctx = milestone_2Parser.SectionVariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_sectionVariable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 488
            self.match(milestone_2Parser.IDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExportStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return milestone_2Parser.RULE_exportStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExportStmt" ):
                listener.enterExportStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExportStmt" ):
                listener.exitExportStmt(self)




    def exportStmt(self):

        localctx = milestone_2Parser.ExportStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_exportStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 490
            self.match(milestone_2Parser.IDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return milestone_2Parser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)




    def expr(self):

        localctx = milestone_2Parser.ExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 492
            self.match(milestone_2Parser.IDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeKeywContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return milestone_2Parser.RULE_typeKeyw

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeKeyw" ):
                listener.enterTypeKeyw(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeKeyw" ):
                listener.exitTypeKeyw(self)




    def typeKeyw(self):

        localctx = milestone_2Parser.TypeKeywContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_typeKeyw)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 494
            self.match(milestone_2Parser.IDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExprStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return milestone_2Parser.RULE_exprStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprStmt" ):
                listener.enterExprStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprStmt" ):
                listener.exitExprStmt(self)




    def exprStmt(self):

        localctx = milestone_2Parser.ExprStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_exprStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 496
            self.match(milestone_2Parser.IDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeDefAuxContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return milestone_2Parser.RULE_typeDefAux

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeDefAux" ):
                listener.enterTypeDefAux(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeDefAux" ):
                listener.exitTypeDefAux(self)




    def typeDefAux(self):

        localctx = milestone_2Parser.TypeDefAuxContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_typeDefAux)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 498
            self.match(milestone_2Parser.IDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return milestone_2Parser.RULE_par

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPar" ):
                listener.enterPar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPar" ):
                listener.exitPar(self)




    def par(self):

        localctx = milestone_2Parser.ParContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_par)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 500
            self.match(milestone_2Parser.IDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return milestone_2Parser.RULE_opr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpr" ):
                listener.enterOpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpr" ):
                listener.exitOpr(self)




    def opr(self):

        localctx = milestone_2Parser.OprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_opr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 502
            self.match(milestone_2Parser.IDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DoBlocksContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return milestone_2Parser.RULE_doBlocks

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoBlocks" ):
                listener.enterDoBlocks(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoBlocks" ):
                listener.exitDoBlocks(self)




    def doBlocks(self):

        localctx = milestone_2Parser.DoBlocksContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_doBlocks)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 504
            self.match(milestone_2Parser.IDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return milestone_2Parser.RULE_p

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterP" ):
                listener.enterP(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitP" ):
                listener.exitP(self)




    def p(self):

        localctx = milestone_2Parser.PContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 506
            self.match(milestone_2Parser.IDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CondExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ExprContext,i)


        def colcom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ColcomContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ColcomContext,i)


        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.OptIndContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_condExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondExpr" ):
                listener.enterCondExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondExpr" ):
                listener.exitCondExpr(self)




    def condExpr(self):

        localctx = milestone_2Parser.CondExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_condExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 508
            self.expr()
            self.state = 509
            self.colcom()
            self.state = 510
            self.expr()
            self.state = 511
            self.optInd()
            self.state = 520
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==milestone_2Parser.ELIF:
                self.state = 512
                self.match(milestone_2Parser.ELIF)
                self.state = 513
                self.expr()
                self.state = 514
                self.colcom()
                self.state = 515
                self.expr()
                self.state = 516
                self.optInd()
                self.state = 522
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 523
            self.match(milestone_2Parser.ELSE)
            self.state = 524
            self.colcom()
            self.state = 525
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IfExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def condExpr(self):
            return self.getTypedRuleContext(milestone_2Parser.CondExprContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_ifExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfExpr" ):
                listener.enterIfExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfExpr" ):
                listener.exitIfExpr(self)




    def ifExpr(self):

        localctx = milestone_2Parser.IfExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_ifExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 527
            self.match(milestone_2Parser.IF)
            self.state = 528
            self.condExpr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WhenExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def condExpr(self):
            return self.getTypedRuleContext(milestone_2Parser.CondExprContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_whenExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenExpr" ):
                listener.enterWhenExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenExpr" ):
                listener.exitWhenExpr(self)




    def whenExpr(self):

        localctx = milestone_2Parser.WhenExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_whenExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 530
            self.match(milestone_2Parser.WHEN)
            self.state = 531
            self.condExpr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PragmaContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def optPar(self):
            return self.getTypedRuleContext(milestone_2Parser.OptParContext,0)


        def exprColonExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ExprColonExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ExprColonExprContext,i)


        def comma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.CommaContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.CommaContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_pragma

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragma" ):
                listener.enterPragma(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragma" ):
                listener.exitPragma(self)




    def pragma(self):

        localctx = milestone_2Parser.PragmaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_pragma)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 533
            self.match(milestone_2Parser.T__6)
            self.state = 534
            self.optInd()
            self.state = 541
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==milestone_2Parser.IDENT:
                self.state = 535
                self.exprColonExpr()
                self.state = 537
                _la = self._input.LA(1)
                if _la==milestone_2Parser.COMMA:
                    self.state = 536
                    self.comma()


                self.state = 543
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 544
            self.optPar()
            self.state = 545
            _la = self._input.LA(1)
            if not(_la==milestone_2Parser.T__7 or _la==milestone_2Parser.CLOSE_BRACE):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdentVisContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(milestone_2Parser.SymbolContext,0)


        def opr(self):
            return self.getTypedRuleContext(milestone_2Parser.OprContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_identVis

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentVis" ):
                listener.enterIdentVis(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentVis" ):
                listener.exitIdentVis(self)




    def identVis(self):

        localctx = milestone_2Parser.IdentVisContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_identVis)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 547
            self.symbol()
            self.state = 549
            _la = self._input.LA(1)
            if _la==milestone_2Parser.IDENT:
                self.state = 548
                self.opr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdentVisDotContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.SymbolContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.SymbolContext,i)


        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def opr(self):
            return self.getTypedRuleContext(milestone_2Parser.OprContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_identVisDot

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentVisDot" ):
                listener.enterIdentVisDot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentVisDot" ):
                listener.exitIdentVisDot(self)




    def identVisDot(self):

        localctx = milestone_2Parser.IdentVisDotContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_identVisDot)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 551
            self.symbol()
            self.state = 552
            self.match(milestone_2Parser.DOT)
            self.state = 553
            self.optInd()
            self.state = 554
            self.symbol()
            self.state = 556
            _la = self._input.LA(1)
            if _la==milestone_2Parser.IDENT:
                self.state = 555
                self.opr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdentWithPragmaContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identVis(self):
            return self.getTypedRuleContext(milestone_2Parser.IdentVisContext,0)


        def pragma(self):
            return self.getTypedRuleContext(milestone_2Parser.PragmaContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_identWithPragma

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentWithPragma" ):
                listener.enterIdentWithPragma(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentWithPragma" ):
                listener.exitIdentWithPragma(self)




    def identWithPragma(self):

        localctx = milestone_2Parser.IdentWithPragmaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_identWithPragma)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 558
            self.identVis()
            self.state = 560
            _la = self._input.LA(1)
            if _la==milestone_2Parser.T__6:
                self.state = 559
                self.pragma()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdentWithPragmaDotContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identVisDot(self):
            return self.getTypedRuleContext(milestone_2Parser.IdentVisDotContext,0)


        def pragma(self):
            return self.getTypedRuleContext(milestone_2Parser.PragmaContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_identWithPragmaDot

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentWithPragmaDot" ):
                listener.enterIdentWithPragmaDot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentWithPragmaDot" ):
                listener.exitIdentWithPragmaDot(self)




    def identWithPragmaDot(self):

        localctx = milestone_2Parser.IdentWithPragmaDotContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_identWithPragmaDot)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 562
            self.identVisDot()
            self.state = 564
            _la = self._input.LA(1)
            if _la==milestone_2Parser.T__6:
                self.state = 563
                self.pragma()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclColonEqualsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identWithPragma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.IdentWithPragmaContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.IdentWithPragmaContext,i)


        def comma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.CommaContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.CommaContext,i)


        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.OptIndContext,i)


        def typeDesc(self):
            return self.getTypedRuleContext(milestone_2Parser.TypeDescContext,0)


        def expr(self):
            return self.getTypedRuleContext(milestone_2Parser.ExprContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_declColonEquals

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclColonEquals" ):
                listener.enterDeclColonEquals(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclColonEquals" ):
                listener.exitDeclColonEquals(self)




    def declColonEquals(self):

        localctx = milestone_2Parser.DeclColonEqualsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_declColonEquals)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 566
            self.identWithPragma()
            self.state = 572
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,37,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 567
                    self.comma()
                    self.state = 568
                    self.identWithPragma() 
                self.state = 574
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,37,self._ctx)

            self.state = 576
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
            if la_ == 1:
                self.state = 575
                self.comma()


            self.state = 582
            _la = self._input.LA(1)
            if _la==milestone_2Parser.COLON:
                self.state = 578
                self.match(milestone_2Parser.COLON)
                self.state = 579
                self.optInd()
                self.state = 580
                self.typeDesc()


            self.state = 588
            _la = self._input.LA(1)
            if _la==milestone_2Parser.T__3:
                self.state = 584
                self.match(milestone_2Parser.T__3)
                self.state = 585
                self.optInd()
                self.state = 586
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdentColonEqualsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENT(self, i:int=None):
            if i is None:
                return self.getTokens(milestone_2Parser.IDENT)
            else:
                return self.getToken(milestone_2Parser.IDENT, i)

        def comma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.CommaContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.CommaContext,i)


        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.OptIndContext,i)


        def typeDesc(self):
            return self.getTypedRuleContext(milestone_2Parser.TypeDescContext,0)


        def expr(self):
            return self.getTypedRuleContext(milestone_2Parser.ExprContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_identColonEquals

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentColonEquals" ):
                listener.enterIdentColonEquals(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentColonEquals" ):
                listener.exitIdentColonEquals(self)




    def identColonEquals(self):

        localctx = milestone_2Parser.IdentColonEqualsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_identColonEquals)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 590
            self.match(milestone_2Parser.IDENT)
            self.state = 596
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,41,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 591
                    self.comma()
                    self.state = 592
                    self.match(milestone_2Parser.IDENT) 
                self.state = 598
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,41,self._ctx)

            self.state = 600
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
            if la_ == 1:
                self.state = 599
                self.comma()


            self.state = 606
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
            if la_ == 1:
                self.state = 602
                self.match(milestone_2Parser.COLON)
                self.state = 603
                self.optInd()
                self.state = 604
                self.typeDesc()


            self.state = 612
            _la = self._input.LA(1)
            if _la==milestone_2Parser.T__3:
                self.state = 608
                self.match(milestone_2Parser.T__3)
                self.state = 609
                self.optInd()
                self.state = 610
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InlTupleDeclContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def optPar(self):
            return self.getTypedRuleContext(milestone_2Parser.OptParContext,0)


        def identColonEquals(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.IdentColonEqualsContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.IdentColonEqualsContext,i)


        def comma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.CommaContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.CommaContext,i)


        def semicolon(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.SemicolonContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.SemicolonContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_inlTupleDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInlTupleDecl" ):
                listener.enterInlTupleDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInlTupleDecl" ):
                listener.exitInlTupleDecl(self)




    def inlTupleDecl(self):

        localctx = milestone_2Parser.InlTupleDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_inlTupleDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 614
            self.match(milestone_2Parser.TUPLE)
            self.state = 615
            self.match(milestone_2Parser.OPEN_BRACK)
            self.state = 616
            self.optInd()
            self.state = 625
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==milestone_2Parser.IDENT:
                self.state = 617
                self.identColonEquals()
                self.state = 621
                _la = self._input.LA(1)
                if _la==milestone_2Parser.COMMA:
                    self.state = 618
                    self.comma()
                    self.state = 619
                    self.semicolon()


                self.state = 627
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 628
            self.optPar()
            self.state = 629
            self.match(milestone_2Parser.CLOSE_BRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExtTupleDeclContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMENT(self):
            return self.getToken(milestone_2Parser.COMMENT, 0)

        def identColonEquals(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.IdentColonEqualsContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.IdentColonEqualsContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_extTupleDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtTupleDecl" ):
                listener.enterExtTupleDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtTupleDecl" ):
                listener.exitExtTupleDecl(self)




    def extTupleDecl(self):

        localctx = milestone_2Parser.ExtTupleDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_extTupleDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 631
            self.match(milestone_2Parser.TUPLE)
            self.state = 633
            _la = self._input.LA(1)
            if _la==milestone_2Parser.COMMENT:
                self.state = 632
                self.match(milestone_2Parser.COMMENT)


            self.state = 644
            _la = self._input.LA(1)
            if _la==milestone_2Parser.T__2:
                self.state = 635
                self.match(milestone_2Parser.T__2)
                self.state = 636
                self.identColonEquals()
                self.state = 641
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==milestone_2Parser.T__0:
                    self.state = 637
                    self.match(milestone_2Parser.T__0)
                    self.state = 638
                    self.identColonEquals()
                    self.state = 643
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TupleClassContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return milestone_2Parser.RULE_tupleClass

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTupleClass" ):
                listener.enterTupleClass(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTupleClass" ):
                listener.exitTupleClass(self)




    def tupleClass(self):

        localctx = milestone_2Parser.TupleClassContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_tupleClass)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 646
            self.match(milestone_2Parser.TUPLE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParamListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declColonEquals(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.DeclColonEqualsContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.DeclColonEqualsContext,i)


        def comma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.CommaContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.CommaContext,i)


        def semicolon(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.SemicolonContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.SemicolonContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_paramList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParamList" ):
                listener.enterParamList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParamList" ):
                listener.exitParamList(self)




    def paramList(self):

        localctx = milestone_2Parser.ParamListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_paramList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 648
            self.match(milestone_2Parser.OPEN_PAREN)
            self.state = 661
            _la = self._input.LA(1)
            if _la==milestone_2Parser.IDENT:
                self.state = 649
                self.declColonEquals()
                self.state = 658
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==milestone_2Parser.COMMA:
                    self.state = 650
                    self.comma()
                    self.state = 651
                    self.match(milestone_2Parser.DIV_OPERATOR)
                    self.state = 652
                    self.semicolon()
                    self.state = 654
                    self.declColonEquals()
                    self.state = 660
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 663
            self.match(milestone_2Parser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParamListArrowContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def paramList(self):
            return self.getTypedRuleContext(milestone_2Parser.ParamListContext,0)


        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def typeDesc(self):
            return self.getTypedRuleContext(milestone_2Parser.TypeDescContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_paramListArrow

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParamListArrow" ):
                listener.enterParamListArrow(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParamListArrow" ):
                listener.exitParamListArrow(self)




    def paramListArrow(self):

        localctx = milestone_2Parser.ParamListArrowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_paramListArrow)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 666
            _la = self._input.LA(1)
            if _la==milestone_2Parser.OPEN_PAREN:
                self.state = 665
                self.paramList()


            self.state = 672
            _la = self._input.LA(1)
            if _la==milestone_2Parser.T__8:
                self.state = 668
                self.match(milestone_2Parser.T__8)
                self.state = 669
                self.optInd()
                self.state = 670
                self.typeDesc()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParamListColonContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def paramList(self):
            return self.getTypedRuleContext(milestone_2Parser.ParamListContext,0)


        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def typeDesc(self):
            return self.getTypedRuleContext(milestone_2Parser.TypeDescContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_paramListColon

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParamListColon" ):
                listener.enterParamListColon(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParamListColon" ):
                listener.exitParamListColon(self)




    def paramListColon(self):

        localctx = milestone_2Parser.ParamListColonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_paramListColon)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 675
            _la = self._input.LA(1)
            if _la==milestone_2Parser.OPEN_PAREN:
                self.state = 674
                self.paramList()


            self.state = 681
            _la = self._input.LA(1)
            if _la==milestone_2Parser.COLON:
                self.state = 677
                self.match(milestone_2Parser.COLON)
                self.state = 678
                self.optInd()
                self.state = 679
                self.typeDesc()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DoBlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def paramListArrow(self):
            return self.getTypedRuleContext(milestone_2Parser.ParamListArrowContext,0)


        def colcom(self):
            return self.getTypedRuleContext(milestone_2Parser.ColcomContext,0)


        def stmt(self):
            return self.getTypedRuleContext(milestone_2Parser.StmtContext,0)


        def pragmas(self):
            return self.getTypedRuleContext(milestone_2Parser.PragmasContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_doBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoBlock" ):
                listener.enterDoBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoBlock" ):
                listener.exitDoBlock(self)




    def doBlock(self):

        localctx = milestone_2Parser.DoBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_doBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 683
            self.match(milestone_2Parser.DO)
            self.state = 684
            self.paramListArrow()
            self.state = 686
            _la = self._input.LA(1)
            if _la==milestone_2Parser.IDENT:
                self.state = 685
                self.pragmas()


            self.state = 688
            self.colcom()
            self.state = 689
            self.stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProcExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def paramListColon(self):
            return self.getTypedRuleContext(milestone_2Parser.ParamListColonContext,0)


        def pragmas(self):
            return self.getTypedRuleContext(milestone_2Parser.PragmasContext,0)


        def stmt(self):
            return self.getTypedRuleContext(milestone_2Parser.StmtContext,0)


        def COMMENT(self):
            return self.getToken(milestone_2Parser.COMMENT, 0)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_procExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcExpr" ):
                listener.enterProcExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcExpr" ):
                listener.exitProcExpr(self)




    def procExpr(self):

        localctx = milestone_2Parser.ProcExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_procExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 691
            self.match(milestone_2Parser.PROC)
            self.state = 692
            self.paramListColon()
            self.state = 694
            _la = self._input.LA(1)
            if _la==milestone_2Parser.IDENT:
                self.state = 693
                self.pragmas()


            self.state = 701
            _la = self._input.LA(1)
            if _la==milestone_2Parser.T__3:
                self.state = 696
                self.match(milestone_2Parser.T__3)
                self.state = 698
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
                if la_ == 1:
                    self.state = 697
                    self.match(milestone_2Parser.COMMENT)


                self.state = 700
                self.stmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DistinctContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def typeDesc(self):
            return self.getTypedRuleContext(milestone_2Parser.TypeDescContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_distinct

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDistinct" ):
                listener.enterDistinct(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDistinct" ):
                listener.exitDistinct(self)




    def distinct(self):

        localctx = milestone_2Parser.DistinctContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_distinct)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 703
            self.match(milestone_2Parser.DISTINCT)
            self.state = 704
            self.optInd()
            self.state = 705
            self.typeDesc()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ForStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(milestone_2Parser.ExprContext,0)


        def colcom(self):
            return self.getTypedRuleContext(milestone_2Parser.ColcomContext,0)


        def stmt(self):
            return self.getTypedRuleContext(milestone_2Parser.StmtContext,0)


        def identWithPragma(self):
            return self.getTypedRuleContext(milestone_2Parser.IdentWithPragmaContext,0)


        def comma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.CommaContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.CommaContext,i)


        def indentWithPragma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.IndentWithPragmaContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.IndentWithPragmaContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_forStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForStmt" ):
                listener.enterForStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForStmt" ):
                listener.exitForStmt(self)




    def forStmt(self):

        localctx = milestone_2Parser.ForStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_forStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 707
            self.match(milestone_2Parser.FOR)

            self.state = 708
            self.identWithPragma()
            self.state = 714
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==milestone_2Parser.COMMA:
                self.state = 709
                self.comma()
                self.state = 710
                self.indentWithPragma()
                self.state = 716
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 717
            self.match(milestone_2Parser.IN)
            self.state = 718
            self.expr()
            self.state = 719
            self.colcom()
            self.state = 720
            self.stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ForExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def forStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.ForStmtContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_forExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForExpr" ):
                listener.enterForExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForExpr" ):
                listener.exitForExpr(self)




    def forExpr(self):

        localctx = milestone_2Parser.ForExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_forExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 722
            self.forStmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrimaryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeKeyw(self):
            return self.getTypedRuleContext(milestone_2Parser.TypeKeywContext,0)


        def typeDescK(self):
            return self.getTypedRuleContext(milestone_2Parser.TypeDescKContext,0)


        def identOrLiteral(self):
            return self.getTypedRuleContext(milestone_2Parser.IdentOrLiteralContext,0)


        def prefixOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.PrefixOperatorContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.PrefixOperatorContext,i)


        def primarySuffix(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.PrimarySuffixContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.PrimarySuffixContext,i)


        def primary(self):
            return self.getTypedRuleContext(milestone_2Parser.PrimaryContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_primary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary" ):
                listener.enterPrimary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary" ):
                listener.exitPrimary(self)




    def primary(self):

        localctx = milestone_2Parser.PrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_primary)
        self._la = 0 # Token type
        try:
            self.state = 742
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 724
                self.typeKeyw()
                self.state = 725
                self.typeDescK()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 730
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==milestone_2Parser.T__1 or _la==milestone_2Parser.AND or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (milestone_2Parser.DIV - 66)) | (1 << (milestone_2Parser.IN - 66)) | (1 << (milestone_2Parser.IS - 66)) | (1 << (milestone_2Parser.ISNOT - 66)) | (1 << (milestone_2Parser.MOD - 66)) | (1 << (milestone_2Parser.NOT - 66)) | (1 << (milestone_2Parser.NOTIN - 66)) | (1 << (milestone_2Parser.OF - 66)) | (1 << (milestone_2Parser.OR - 66)) | (1 << (milestone_2Parser.SHL - 66)) | (1 << (milestone_2Parser.SHR - 66)) | (1 << (milestone_2Parser.STATIC - 66)) | (1 << (milestone_2Parser.XOR - 66)))) != 0) or ((((_la - 141)) & ~0x3f) == 0 and ((1 << (_la - 141)) & ((1 << (milestone_2Parser.OP0 - 141)) | (1 << (milestone_2Parser.OP1 - 141)) | (1 << (milestone_2Parser.OP2 - 141)) | (1 << (milestone_2Parser.OP3 - 141)) | (1 << (milestone_2Parser.OP4 - 141)) | (1 << (milestone_2Parser.OP5 - 141)) | (1 << (milestone_2Parser.OP6 - 141)) | (1 << (milestone_2Parser.OP7 - 141)) | (1 << (milestone_2Parser.OP8 - 141)) | (1 << (milestone_2Parser.OP9 - 141)))) != 0):
                    self.state = 727
                    self.prefixOperator()
                    self.state = 732
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 733
                self.identOrLiteral()
                self.state = 737
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,62,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 734
                        self.primarySuffix() 
                    self.state = 739
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,62,self._ctx)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 740
                self.match(milestone_2Parser.BIND)
                self.state = 741
                self.primary()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ImportStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.OptIndContext,i)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ExprContext,i)


        def comma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.CommaContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.CommaContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_importStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportStmt" ):
                listener.enterImportStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportStmt" ):
                listener.exitImportStmt(self)




    def importStmt(self):

        localctx = milestone_2Parser.ImportStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_importStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 744
            self.match(milestone_2Parser.IMPORT)
            self.state = 745
            self.optInd()
            self.state = 746
            self.expr()
            self.state = 766
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                self.state = 752
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==milestone_2Parser.COMMA:
                    self.state = 747
                    self.comma()
                    self.state = 748
                    self.expr()
                    self.state = 754
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 755
                self.match(milestone_2Parser.EXCEPT)
                self.state = 756
                self.optInd()

                self.state = 757
                self.expr()
                self.state = 763
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==milestone_2Parser.COMMA:
                    self.state = 758
                    self.comma()
                    self.state = 759
                    self.expr()
                    self.state = 765
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IncludeStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ExprContext,i)


        def comma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.CommaContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.CommaContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_includeStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIncludeStmt" ):
                listener.enterIncludeStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIncludeStmt" ):
                listener.exitIncludeStmt(self)




    def includeStmt(self):

        localctx = milestone_2Parser.IncludeStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_includeStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 768
            self.match(milestone_2Parser.INCLUDE)
            self.state = 769
            self.optInd()
            self.state = 770
            self.expr()
            self.state = 776
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==milestone_2Parser.COMMA:
                self.state = 771
                self.comma()
                self.state = 772
                self.expr()
                self.state = 778
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FromStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def moduleName(self):
            return self.getTypedRuleContext(milestone_2Parser.ModuleNameContext,0)


        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ExprContext,i)


        def comma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.CommaContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.CommaContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_fromStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFromStmt" ):
                listener.enterFromStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFromStmt" ):
                listener.exitFromStmt(self)




    def fromStmt(self):

        localctx = milestone_2Parser.FromStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_fromStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 779
            self.match(milestone_2Parser.FROM)
            self.state = 780
            self.moduleName()
            self.state = 781
            self.match(milestone_2Parser.IMPORT)
            self.state = 782
            self.optInd()
            self.state = 783
            self.expr()
            self.state = 789
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==milestone_2Parser.COMMA:
                self.state = 784
                self.comma()
                self.state = 785
                self.expr()
                self.state = 791
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReturnStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def expr(self):
            return self.getTypedRuleContext(milestone_2Parser.ExprContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_returnStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStmt" ):
                listener.enterReturnStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStmt" ):
                listener.exitReturnStmt(self)




    def returnStmt(self):

        localctx = milestone_2Parser.ReturnStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_returnStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 792
            self.match(milestone_2Parser.RETURN)
            self.state = 793
            self.optInd()
            self.state = 795
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
            if la_ == 1:
                self.state = 794
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RaiseStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def expr(self):
            return self.getTypedRuleContext(milestone_2Parser.ExprContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_raiseStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRaiseStmt" ):
                listener.enterRaiseStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRaiseStmt" ):
                listener.exitRaiseStmt(self)




    def raiseStmt(self):

        localctx = milestone_2Parser.RaiseStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_raiseStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 797
            self.match(milestone_2Parser.RAISE)
            self.state = 798
            self.optInd()
            self.state = 800
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                self.state = 799
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class YieldStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def expr(self):
            return self.getTypedRuleContext(milestone_2Parser.ExprContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_yieldStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYieldStmt" ):
                listener.enterYieldStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYieldStmt" ):
                listener.exitYieldStmt(self)




    def yieldStmt(self):

        localctx = milestone_2Parser.YieldStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_yieldStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 802
            self.match(milestone_2Parser.YIELD)
            self.state = 803
            self.optInd()
            self.state = 805
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
            if la_ == 1:
                self.state = 804
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DiscardStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def expr(self):
            return self.getTypedRuleContext(milestone_2Parser.ExprContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_discardStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiscardStmt" ):
                listener.enterDiscardStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiscardStmt" ):
                listener.exitDiscardStmt(self)




    def discardStmt(self):

        localctx = milestone_2Parser.DiscardStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_discardStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 807
            self.match(milestone_2Parser.DISCARD)
            self.state = 808
            self.optInd()
            self.state = 810
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
            if la_ == 1:
                self.state = 809
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BreakStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def expr(self):
            return self.getTypedRuleContext(milestone_2Parser.ExprContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_breakStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreakStmt" ):
                listener.enterBreakStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreakStmt" ):
                listener.exitBreakStmt(self)




    def breakStmt(self):

        localctx = milestone_2Parser.BreakStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_breakStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 812
            self.match(milestone_2Parser.BREAK)
            self.state = 813
            self.optInd()
            self.state = 815
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
            if la_ == 1:
                self.state = 814
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ContinueStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def expr(self):
            return self.getTypedRuleContext(milestone_2Parser.ExprContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_continueStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinueStmt" ):
                listener.enterContinueStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinueStmt" ):
                listener.exitContinueStmt(self)




    def continueStmt(self):

        localctx = milestone_2Parser.ContinueStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_continueStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 817
            self.match(milestone_2Parser.BREAK)
            self.state = 818
            self.optInd()
            self.state = 820
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
            if la_ == 1:
                self.state = 819
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CondStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ExprContext,i)


        def colcom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ColcomContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ColcomContext,i)


        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.StmtContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.StmtContext,i)


        def COMMENT(self):
            return self.getToken(milestone_2Parser.COMMENT, 0)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_condStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondStmt" ):
                listener.enterCondStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondStmt" ):
                listener.exitCondStmt(self)




    def condStmt(self):

        localctx = milestone_2Parser.CondStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_condStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 822
            self.expr()
            self.state = 823
            self.colcom()
            self.state = 824
            self.stmt()
            self.state = 826
            _la = self._input.LA(1)
            if _la==milestone_2Parser.COMMENT:
                self.state = 825
                self.match(milestone_2Parser.COMMENT)


            self.state = 836
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,76,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 828
                    self.match(milestone_2Parser.T__0)
                    self.state = 829
                    self.match(milestone_2Parser.ELIF)
                    self.state = 830
                    self.expr()
                    self.state = 831
                    self.colcom()
                    self.state = 832
                    self.stmt() 
                self.state = 838
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,76,self._ctx)

            self.state = 844
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
            if la_ == 1:
                self.state = 839
                self.match(milestone_2Parser.T__0)
                self.state = 840
                self.match(milestone_2Parser.ELSE)
                self.state = 841
                self.colcom()
                self.state = 842
                self.stmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IfStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def condStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.CondStmtContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_ifStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStmt" ):
                listener.enterIfStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStmt" ):
                listener.exitIfStmt(self)




    def ifStmt(self):

        localctx = milestone_2Parser.IfStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_ifStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 846
            self.match(milestone_2Parser.IF)
            self.state = 847
            self.condStmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WhenStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def condStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.CondStmtContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_whenStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenStmt" ):
                listener.enterWhenStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenStmt" ):
                listener.exitWhenStmt(self)




    def whenStmt(self):

        localctx = milestone_2Parser.WhenStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_whenStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 849
            self.match(milestone_2Parser.WHEN)
            self.state = 850
            self.condStmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WhileStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(milestone_2Parser.ExprContext,0)


        def colcom(self):
            return self.getTypedRuleContext(milestone_2Parser.ColcomContext,0)


        def stmt(self):
            return self.getTypedRuleContext(milestone_2Parser.StmtContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_whileStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStmt" ):
                listener.enterWhileStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStmt" ):
                listener.exitWhileStmt(self)




    def whileStmt(self):

        localctx = milestone_2Parser.WhileStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_whileStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 852
            self.match(milestone_2Parser.WHILE)
            self.state = 853
            self.expr()
            self.state = 854
            self.colcom()
            self.state = 855
            self.stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OfBranchContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exprList(self):
            return self.getTypedRuleContext(milestone_2Parser.ExprListContext,0)


        def colcom(self):
            return self.getTypedRuleContext(milestone_2Parser.ColcomContext,0)


        def stmt(self):
            return self.getTypedRuleContext(milestone_2Parser.StmtContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_ofBranch

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOfBranch" ):
                listener.enterOfBranch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOfBranch" ):
                listener.exitOfBranch(self)




    def ofBranch(self):

        localctx = milestone_2Parser.OfBranchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_ofBranch)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 857
            self.match(milestone_2Parser.OF)
            self.state = 858
            self.exprList()
            self.state = 859
            self.colcom()
            self.state = 860
            self.stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OfBranchesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ofBranch(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.OfBranchContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.OfBranchContext,i)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ExprContext,i)


        def colcom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ColcomContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ColcomContext,i)


        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.StmtContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.StmtContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_ofBranches

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOfBranches" ):
                listener.enterOfBranches(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOfBranches" ):
                listener.exitOfBranches(self)




    def ofBranches(self):

        localctx = milestone_2Parser.OfBranchesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_ofBranches)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 862
            self.ofBranch()
            self.state = 867
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,78,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 863
                    self.match(milestone_2Parser.T__0)
                    self.state = 864
                    self.ofBranch() 
                self.state = 869
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,78,self._ctx)

            self.state = 878
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,79,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 870
                    self.match(milestone_2Parser.T__0)
                    self.state = 871
                    self.match(milestone_2Parser.ELIF)
                    self.state = 872
                    self.expr()
                    self.state = 873
                    self.colcom()
                    self.state = 874
                    self.stmt() 
                self.state = 880
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,79,self._ctx)

            self.state = 886
            _la = self._input.LA(1)
            if _la==milestone_2Parser.T__0:
                self.state = 881
                self.match(milestone_2Parser.T__0)
                self.state = 882
                self.match(milestone_2Parser.ELSE)
                self.state = 883
                self.colcom()
                self.state = 884
                self.stmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CaseStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(milestone_2Parser.ExprContext,0)


        def ofBranches(self):
            return self.getTypedRuleContext(milestone_2Parser.OfBranchesContext,0)


        def COMMENT(self):
            return self.getToken(milestone_2Parser.COMMENT, 0)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_caseStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseStmt" ):
                listener.enterCaseStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseStmt" ):
                listener.exitCaseStmt(self)




    def caseStmt(self):

        localctx = milestone_2Parser.CaseStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_caseStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 888
            self.match(milestone_2Parser.CASE)
            self.state = 889
            self.expr()
            self.state = 891
            _la = self._input.LA(1)
            if _la==milestone_2Parser.COLON:
                self.state = 890
                self.match(milestone_2Parser.COLON)


            self.state = 894
            _la = self._input.LA(1)
            if _la==milestone_2Parser.COMMENT:
                self.state = 893
                self.match(milestone_2Parser.COMMENT)


            self.state = 902
            token = self._input.LA(1)
            if token in [milestone_2Parser.T__2]:
                self.state = 896
                self.match(milestone_2Parser.T__2)
                self.state = 897
                self.ofBranches()
                self.state = 898
                self.match(milestone_2Parser.T__9)

            elif token in [milestone_2Parser.T__0]:
                self.state = 900
                self.match(milestone_2Parser.T__0)
                self.state = 901
                self.ofBranches()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TryStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colcom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ColcomContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ColcomContext,i)


        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.StmtContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.StmtContext,i)


        def exprList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ExprListContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ExprListContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_tryStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryStmt" ):
                listener.enterTryStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryStmt" ):
                listener.exitTryStmt(self)




    def tryStmt(self):

        localctx = milestone_2Parser.TryStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_tryStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 904
            self.match(milestone_2Parser.TRY)
            self.state = 905
            self.colcom()
            self.state = 906
            self.stmt()
            self.state = 912
            token = self._input.LA(1)
            if token in [milestone_2Parser.T__0, milestone_2Parser.EXCEPT]:
                self.state = 908
                _la = self._input.LA(1)
                if _la==milestone_2Parser.T__0:
                    self.state = 907
                    self.match(milestone_2Parser.T__0)


                self.state = 910
                self.match(milestone_2Parser.EXCEPT)

            elif token in [milestone_2Parser.FINALLY]:
                self.state = 911
                self.match(milestone_2Parser.FINALLY)

            else:
                raise NoViableAltException(self)

            self.state = 924
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,87,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 915
                    _la = self._input.LA(1)
                    if _la==milestone_2Parser.T__0:
                        self.state = 914
                        self.match(milestone_2Parser.T__0)


                    self.state = 917
                    self.match(milestone_2Parser.EXCEPT)
                    self.state = 918
                    self.exprList()
                    self.state = 919
                    self.colcom()
                    self.state = 920
                    self.stmt() 
                self.state = 926
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,87,self._ctx)

            self.state = 934
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
            if la_ == 1:
                self.state = 928
                _la = self._input.LA(1)
                if _la==milestone_2Parser.T__0:
                    self.state = 927
                    self.match(milestone_2Parser.T__0)


                self.state = 930
                self.match(milestone_2Parser.FINALLY)
                self.state = 931
                self.colcom()
                self.state = 932
                self.stmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TryExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colcom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ColcomContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ColcomContext,i)


        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.StmtContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.StmtContext,i)


        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.OptIndContext,i)


        def exprList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ExprListContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ExprListContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_tryExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryExpr" ):
                listener.enterTryExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryExpr" ):
                listener.exitTryExpr(self)




    def tryExpr(self):

        localctx = milestone_2Parser.TryExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_tryExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 936
            self.match(milestone_2Parser.TRY)
            self.state = 937
            self.colcom()
            self.state = 938
            self.stmt()
            self.state = 943
            token = self._input.LA(1)
            if token in [milestone_2Parser.COMMENT, milestone_2Parser.EXCEPT, milestone_2Parser.IND]:
                self.state = 939
                self.optInd()
                self.state = 940
                self.match(milestone_2Parser.EXCEPT)

            elif token in [milestone_2Parser.FINALLY]:
                self.state = 942
                self.match(milestone_2Parser.FINALLY)

            else:
                raise NoViableAltException(self)

            self.state = 953
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,91,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 945
                    self.optInd()
                    self.state = 946
                    self.match(milestone_2Parser.EXCEPT)
                    self.state = 947
                    self.exprList()
                    self.state = 948
                    self.colcom()
                    self.state = 949
                    self.stmt() 
                self.state = 955
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,91,self._ctx)

            self.state = 961
            _la = self._input.LA(1)
            if _la==milestone_2Parser.COMMENT or _la==milestone_2Parser.FINALLY or _la==milestone_2Parser.IND:
                self.state = 956
                self.optInd()
                self.state = 957
                self.match(milestone_2Parser.FINALLY)
                self.state = 958
                self.colcom()
                self.state = 959
                self.stmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExceptBlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colcom(self):
            return self.getTypedRuleContext(milestone_2Parser.ColcomContext,0)


        def stmt(self):
            return self.getTypedRuleContext(milestone_2Parser.StmtContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_exceptBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExceptBlock" ):
                listener.enterExceptBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExceptBlock" ):
                listener.exitExceptBlock(self)




    def exceptBlock(self):

        localctx = milestone_2Parser.ExceptBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_exceptBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 963
            self.match(milestone_2Parser.EXCEPT)
            self.state = 964
            self.colcom()
            self.state = 965
            self.stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BlockStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colcom(self):
            return self.getTypedRuleContext(milestone_2Parser.ColcomContext,0)


        def stmt(self):
            return self.getTypedRuleContext(milestone_2Parser.StmtContext,0)


        def symbol(self):
            return self.getTypedRuleContext(milestone_2Parser.SymbolContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_blockStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockStmt" ):
                listener.enterBlockStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockStmt" ):
                listener.exitBlockStmt(self)




    def blockStmt(self):

        localctx = milestone_2Parser.BlockStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_blockStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 967
            self.match(milestone_2Parser.BLOCK)
            self.state = 969
            _la = self._input.LA(1)
            if _la==milestone_2Parser.IDENT:
                self.state = 968
                self.symbol()


            self.state = 971
            self.colcom()
            self.state = 972
            self.stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BlockExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colcom(self):
            return self.getTypedRuleContext(milestone_2Parser.ColcomContext,0)


        def stmt(self):
            return self.getTypedRuleContext(milestone_2Parser.StmtContext,0)


        def symbol(self):
            return self.getTypedRuleContext(milestone_2Parser.SymbolContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_blockExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockExpr" ):
                listener.enterBlockExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockExpr" ):
                listener.exitBlockExpr(self)




    def blockExpr(self):

        localctx = milestone_2Parser.BlockExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_blockExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 974
            self.match(milestone_2Parser.BLOCK)
            self.state = 976
            _la = self._input.LA(1)
            if _la==milestone_2Parser.IDENT:
                self.state = 975
                self.symbol()


            self.state = 978
            self.colcom()
            self.state = 979
            self.stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StaticStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colcom(self):
            return self.getTypedRuleContext(milestone_2Parser.ColcomContext,0)


        def stmt(self):
            return self.getTypedRuleContext(milestone_2Parser.StmtContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_staticStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStaticStmt" ):
                listener.enterStaticStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStaticStmt" ):
                listener.exitStaticStmt(self)




    def staticStmt(self):

        localctx = milestone_2Parser.StaticStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_staticStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 981
            self.match(milestone_2Parser.STATIC)
            self.state = 982
            self.colcom()
            self.state = 983
            self.stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeferStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colcom(self):
            return self.getTypedRuleContext(milestone_2Parser.ColcomContext,0)


        def stmt(self):
            return self.getTypedRuleContext(milestone_2Parser.StmtContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_deferStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeferStmt" ):
                listener.enterDeferStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeferStmt" ):
                listener.exitDeferStmt(self)




    def deferStmt(self):

        localctx = milestone_2Parser.DeferStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_deferStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 985
            self.match(milestone_2Parser.DEFER)
            self.state = 986
            self.colcom()
            self.state = 987
            self.stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AsmStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STR_LIT(self):
            return self.getToken(milestone_2Parser.STR_LIT, 0)

        def RSTR_LIT(self):
            return self.getToken(milestone_2Parser.RSTR_LIT, 0)

        def TRIPLESTR_LIT(self):
            return self.getToken(milestone_2Parser.TRIPLESTR_LIT, 0)

        def pragma(self):
            return self.getTypedRuleContext(milestone_2Parser.PragmaContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_asmStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAsmStmt" ):
                listener.enterAsmStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAsmStmt" ):
                listener.exitAsmStmt(self)




    def asmStmt(self):

        localctx = milestone_2Parser.AsmStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_asmStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 989
            self.match(milestone_2Parser.ASM)
            self.state = 991
            _la = self._input.LA(1)
            if _la==milestone_2Parser.T__6:
                self.state = 990
                self.pragma()


            self.state = 993
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << milestone_2Parser.TRIPLESTR_LIT) | (1 << milestone_2Parser.STR_LIT) | (1 << milestone_2Parser.RSTR_LIT))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GenericParamContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.SymbolContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.SymbolContext,i)


        def comma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.CommaContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.CommaContext,i)


        def colon(self):
            return self.getTypedRuleContext(milestone_2Parser.ColonContext,0)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ExprContext,i)


        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_genericParam

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericParam" ):
                listener.enterGenericParam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericParam" ):
                listener.exitGenericParam(self)




    def genericParam(self):

        localctx = milestone_2Parser.GenericParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_genericParam)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 995
            self.symbol()
            self.state = 1001
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,96,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 996
                    self.comma()
                    self.state = 997
                    self.symbol() 
                self.state = 1003
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,96,self._ctx)

            self.state = 1007
            _la = self._input.LA(1)
            if _la==milestone_2Parser.COLON:
                self.state = 1004
                self.colon()
                self.state = 1005
                self.expr()


            self.state = 1013
            _la = self._input.LA(1)
            if _la==milestone_2Parser.T__3:
                self.state = 1009
                self.match(milestone_2Parser.T__3)
                self.state = 1010
                self.optInd()
                self.state = 1011
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GenericParamListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def optPar(self):
            return self.getTypedRuleContext(milestone_2Parser.OptParContext,0)


        def genericParam(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.GenericParamContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.GenericParamContext,i)


        def comma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.CommaContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.CommaContext,i)


        def semicolon(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.SemicolonContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.SemicolonContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_genericParamList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericParamList" ):
                listener.enterGenericParamList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericParamList" ):
                listener.exitGenericParamList(self)




    def genericParamList(self):

        localctx = milestone_2Parser.GenericParamListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_genericParamList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1015
            self.match(milestone_2Parser.OPEN_BRACK)
            self.state = 1016
            self.optInd()
            self.state = 1029
            _la = self._input.LA(1)
            if _la==milestone_2Parser.IDENT:
                self.state = 1017
                self.genericParam()
                self.state = 1026
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==milestone_2Parser.COMMA or _la==milestone_2Parser.SEMI_COLON:
                    self.state = 1020
                    token = self._input.LA(1)
                    if token in [milestone_2Parser.COMMA]:
                        self.state = 1018
                        self.comma()

                    elif token in [milestone_2Parser.SEMI_COLON]:
                        self.state = 1019
                        self.semicolon()

                    else:
                        raise NoViableAltException(self)

                    self.state = 1022
                    self.genericParam()
                    self.state = 1028
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1031
            self.optPar()
            self.state = 1032
            self.match(milestone_2Parser.CLOSE_BRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PatternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stmt(self):
            return self.getTypedRuleContext(milestone_2Parser.StmtContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPattern" ):
                listener.enterPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPattern" ):
                listener.exitPattern(self)




    def pattern(self):

        localctx = milestone_2Parser.PatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1034
            self.match(milestone_2Parser.OPEN_BRACE)
            self.state = 1035
            self.stmt()
            self.state = 1036
            self.match(milestone_2Parser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IndAndCommentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMENT(self):
            return self.getToken(milestone_2Parser.COMMENT, 0)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_indAndComment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndAndComment" ):
                listener.enterIndAndComment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndAndComment" ):
                listener.exitIndAndComment(self)




    def indAndComment(self):

        localctx = milestone_2Parser.IndAndCommentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_indAndComment)
        self._la = 0 # Token type
        try:
            self.state = 1045
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1040
                _la = self._input.LA(1)
                if _la==milestone_2Parser.T__2:
                    self.state = 1038
                    self.match(milestone_2Parser.T__2)
                    self.state = 1039
                    self.match(milestone_2Parser.COMMENT)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1043
                _la = self._input.LA(1)
                if _la==milestone_2Parser.COMMENT:
                    self.state = 1042
                    self.match(milestone_2Parser.COMMENT)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RoutineContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def identVis(self):
            return self.getTypedRuleContext(milestone_2Parser.IdentVisContext,0)


        def paramListColon(self):
            return self.getTypedRuleContext(milestone_2Parser.ParamListColonContext,0)


        def indAndComment(self):
            return self.getTypedRuleContext(milestone_2Parser.IndAndCommentContext,0)


        def pattern(self):
            return self.getTypedRuleContext(milestone_2Parser.PatternContext,0)


        def genericParamList(self):
            return self.getTypedRuleContext(milestone_2Parser.GenericParamListContext,0)


        def pragma(self):
            return self.getTypedRuleContext(milestone_2Parser.PragmaContext,0)


        def stmt(self):
            return self.getTypedRuleContext(milestone_2Parser.StmtContext,0)


        def COMMENT(self):
            return self.getToken(milestone_2Parser.COMMENT, 0)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_routine

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoutine" ):
                listener.enterRoutine(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoutine" ):
                listener.exitRoutine(self)




    def routine(self):

        localctx = milestone_2Parser.RoutineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_routine)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1047
            self.optInd()
            self.state = 1048
            self.identVis()
            self.state = 1050
            _la = self._input.LA(1)
            if _la==milestone_2Parser.OPEN_BRACE:
                self.state = 1049
                self.pattern()


            self.state = 1053
            _la = self._input.LA(1)
            if _la==milestone_2Parser.OPEN_BRACK:
                self.state = 1052
                self.genericParamList()


            self.state = 1055
            self.paramListColon()
            self.state = 1057
            _la = self._input.LA(1)
            if _la==milestone_2Parser.T__6:
                self.state = 1056
                self.pragma()


            self.state = 1064
            _la = self._input.LA(1)
            if _la==milestone_2Parser.T__3:
                self.state = 1059
                self.match(milestone_2Parser.T__3)
                self.state = 1061
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
                if la_ == 1:
                    self.state = 1060
                    self.match(milestone_2Parser.COMMENT)


                self.state = 1063
                self.stmt()


            self.state = 1066
            self.indAndComment()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CommentStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMENT(self):
            return self.getToken(milestone_2Parser.COMMENT, 0)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_commentStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommentStmt" ):
                listener.enterCommentStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommentStmt" ):
                listener.exitCommentStmt(self)




    def commentStmt(self):

        localctx = milestone_2Parser.CommentStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_commentStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1068
            self.match(milestone_2Parser.COMMENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SectionpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def p(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.PContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.PContext,i)


        def COMMENT(self, i:int=None):
            if i is None:
                return self.getTokens(milestone_2Parser.COMMENT)
            else:
                return self.getToken(milestone_2Parser.COMMENT, i)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_sectionp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSectionp" ):
                listener.enterSectionp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSectionp" ):
                listener.exitSectionp(self)




    def sectionp(self):

        localctx = milestone_2Parser.SectionpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_sectionp)
        self._la = 0 # Token type
        try:
            self.state = 1090
            token = self._input.LA(1)
            if token in [milestone_2Parser.IDENT, milestone_2Parser.COMMENT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1071
                _la = self._input.LA(1)
                if _la==milestone_2Parser.COMMENT:
                    self.state = 1070
                    self.match(milestone_2Parser.COMMENT)


                self.state = 1073
                self.p()

            elif token in [milestone_2Parser.T__2]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1074
                self.match(milestone_2Parser.T__2)
                self.state = 1077
                token = self._input.LA(1)
                if token in [milestone_2Parser.IDENT]:
                    self.state = 1075
                    self.p()

                elif token in [milestone_2Parser.COMMENT]:
                    self.state = 1076
                    self.match(milestone_2Parser.COMMENT)

                else:
                    raise NoViableAltException(self)

                self.state = 1086
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==milestone_2Parser.T__0:
                    self.state = 1079
                    self.match(milestone_2Parser.T__0)
                    self.state = 1082
                    token = self._input.LA(1)
                    if token in [milestone_2Parser.IDENT]:
                        self.state = 1080
                        self.p()

                    elif token in [milestone_2Parser.COMMENT]:
                        self.state = 1081
                        self.match(milestone_2Parser.COMMENT)

                    else:
                        raise NoViableAltException(self)

                    self.state = 1088
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1089
                self.match(milestone_2Parser.T__9)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstantContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identWithPragma(self):
            return self.getTypedRuleContext(milestone_2Parser.IdentWithPragmaContext,0)


        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def expr(self):
            return self.getTypedRuleContext(milestone_2Parser.ExprContext,0)


        def indAndComment(self):
            return self.getTypedRuleContext(milestone_2Parser.IndAndCommentContext,0)


        def colon(self):
            return self.getTypedRuleContext(milestone_2Parser.ColonContext,0)


        def typeDesc(self):
            return self.getTypedRuleContext(milestone_2Parser.TypeDescContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_constant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant" ):
                listener.enterConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant" ):
                listener.exitConstant(self)




    def constant(self):

        localctx = milestone_2Parser.ConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_constant)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1092
            self.identWithPragma()
            self.state = 1096
            _la = self._input.LA(1)
            if _la==milestone_2Parser.COLON:
                self.state = 1093
                self.colon()
                self.state = 1094
                self.typeDesc()


            self.state = 1098
            self.match(milestone_2Parser.T__3)
            self.state = 1099
            self.optInd()
            self.state = 1100
            self.expr()
            self.state = 1101
            self.indAndComment()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.OptIndContext,i)


        def symbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.SymbolContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.SymbolContext,i)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ExprContext,i)


        def comma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.CommaContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.CommaContext,i)


        def COMMENT(self, i:int=None):
            if i is None:
                return self.getTokens(milestone_2Parser.COMMENT)
            else:
                return self.getToken(milestone_2Parser.COMMENT, i)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_enum

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnum" ):
                listener.enterEnum(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnum" ):
                listener.exitEnum(self)




    def enum(self):

        localctx = milestone_2Parser.EnumContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_enum)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1103
            self.match(milestone_2Parser.ENUM)
            self.state = 1104
            self.optInd()
            self.state = 1118 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1105
                self.symbol()
                self.state = 1106
                self.optInd()
                self.state = 1113
                _la = self._input.LA(1)
                if _la==milestone_2Parser.T__3:
                    self.state = 1107
                    self.match(milestone_2Parser.T__3)
                    self.state = 1108
                    self.optInd()
                    self.state = 1109
                    self.expr()
                    self.state = 1111
                    _la = self._input.LA(1)
                    if _la==milestone_2Parser.COMMENT:
                        self.state = 1110
                        self.match(milestone_2Parser.COMMENT)




                self.state = 1116
                _la = self._input.LA(1)
                if _la==milestone_2Parser.COMMA:
                    self.state = 1115
                    self.comma()


                self.state = 1120 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==milestone_2Parser.IDENT):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ObjectWhenContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ExprContext,i)


        def colcom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ColcomContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ColcomContext,i)


        def objectPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ObjectPartContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ObjectPartContext,i)


        def COMMENT(self, i:int=None):
            if i is None:
                return self.getTokens(milestone_2Parser.COMMENT)
            else:
                return self.getToken(milestone_2Parser.COMMENT, i)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_objectWhen

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectWhen" ):
                listener.enterObjectWhen(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectWhen" ):
                listener.exitObjectWhen(self)




    def objectWhen(self):

        localctx = milestone_2Parser.ObjectWhenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_objectWhen)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1122
            self.match(milestone_2Parser.WHEN)
            self.state = 1123
            self.expr()
            self.state = 1124
            self.colcom()
            self.state = 1125
            self.objectPart()
            self.state = 1127
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
            if la_ == 1:
                self.state = 1126
                self.match(milestone_2Parser.COMMENT)


            self.state = 1138
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,122,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1129
                    self.match(milestone_2Parser.ELIF)
                    self.state = 1130
                    self.expr()
                    self.state = 1131
                    self.colcom()
                    self.state = 1132
                    self.objectPart()
                    self.state = 1134
                    self._errHandler.sync(self);
                    la_ = self._interp.adaptivePredict(self._input,121,self._ctx)
                    if la_ == 1:
                        self.state = 1133
                        self.match(milestone_2Parser.COMMENT)

             
                self.state = 1140
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,122,self._ctx)

            self.state = 1147
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
            if la_ == 1:
                self.state = 1141
                self.match(milestone_2Parser.ELSE)
                self.state = 1142
                self.colcom()
                self.state = 1143
                self.objectPart()
                self.state = 1145
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
                if la_ == 1:
                    self.state = 1144
                    self.match(milestone_2Parser.COMMENT)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ObjectBranchContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exprList(self):
            return self.getTypedRuleContext(milestone_2Parser.ExprListContext,0)


        def colcom(self):
            return self.getTypedRuleContext(milestone_2Parser.ColcomContext,0)


        def objectPart(self):
            return self.getTypedRuleContext(milestone_2Parser.ObjectPartContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_objectBranch

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectBranch" ):
                listener.enterObjectBranch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectBranch" ):
                listener.exitObjectBranch(self)




    def objectBranch(self):

        localctx = milestone_2Parser.ObjectBranchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_objectBranch)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1149
            self.match(milestone_2Parser.OF)
            self.state = 1150
            self.exprList()
            self.state = 1151
            self.colcom()
            self.state = 1152
            self.objectPart()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ObjectBranchesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def objectBranch(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ObjectBranchContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ObjectBranchContext,i)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ExprContext,i)


        def colcom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ColcomContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ColcomContext,i)


        def objectPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ObjectPartContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ObjectPartContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_objectBranches

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectBranches" ):
                listener.enterObjectBranches(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectBranches" ):
                listener.exitObjectBranches(self)




    def objectBranches(self):

        localctx = milestone_2Parser.ObjectBranchesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_objectBranches)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1154
            self.objectBranch()
            self.state = 1159
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,125,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1155
                    self.match(milestone_2Parser.T__0)
                    self.state = 1156
                    self.objectBranch() 
                self.state = 1161
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,125,self._ctx)

            self.state = 1170
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,126,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1162
                    self.match(milestone_2Parser.T__0)
                    self.state = 1163
                    self.match(milestone_2Parser.ELIF)
                    self.state = 1164
                    self.expr()
                    self.state = 1165
                    self.colcom()
                    self.state = 1166
                    self.objectPart() 
                self.state = 1172
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,126,self._ctx)

            self.state = 1178
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,127,self._ctx)
            if la_ == 1:
                self.state = 1173
                self.match(milestone_2Parser.T__0)
                self.state = 1174
                self.match(milestone_2Parser.ELSE)
                self.state = 1175
                self.colcom()
                self.state = 1176
                self.objectPart()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ObjectCaseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identWithPragma(self):
            return self.getTypedRuleContext(milestone_2Parser.IdentWithPragmaContext,0)


        def typeDesc(self):
            return self.getTypedRuleContext(milestone_2Parser.TypeDescContext,0)


        def objectBranches(self):
            return self.getTypedRuleContext(milestone_2Parser.ObjectBranchesContext,0)


        def COMMENT(self):
            return self.getToken(milestone_2Parser.COMMENT, 0)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_objectCase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectCase" ):
                listener.enterObjectCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectCase" ):
                listener.exitObjectCase(self)




    def objectCase(self):

        localctx = milestone_2Parser.ObjectCaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_objectCase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1180
            self.match(milestone_2Parser.CASE)
            self.state = 1181
            self.identWithPragma()
            self.state = 1182
            self.match(milestone_2Parser.COLON)
            self.state = 1183
            self.typeDesc()
            self.state = 1185
            _la = self._input.LA(1)
            if _la==milestone_2Parser.COLON:
                self.state = 1184
                self.match(milestone_2Parser.COLON)


            self.state = 1188
            _la = self._input.LA(1)
            if _la==milestone_2Parser.COMMENT:
                self.state = 1187
                self.match(milestone_2Parser.COMMENT)


            self.state = 1196
            token = self._input.LA(1)
            if token in [milestone_2Parser.T__2]:
                self.state = 1190
                self.match(milestone_2Parser.T__2)
                self.state = 1191
                self.objectBranches()
                self.state = 1192
                self.match(milestone_2Parser.T__9)

            elif token in [milestone_2Parser.T__0]:
                self.state = 1194
                self.match(milestone_2Parser.T__0)
                self.state = 1195
                self.objectBranches()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ObjectPartContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def objectPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ObjectPartContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ObjectPartContext,i)


        def objectWhen(self):
            return self.getTypedRuleContext(milestone_2Parser.ObjectWhenContext,0)


        def objectCase(self):
            return self.getTypedRuleContext(milestone_2Parser.ObjectCaseContext,0)


        def declColonEquals(self):
            return self.getTypedRuleContext(milestone_2Parser.DeclColonEqualsContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_objectPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectPart" ):
                listener.enterObjectPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectPart" ):
                listener.exitObjectPart(self)




    def objectPart(self):

        localctx = milestone_2Parser.ObjectPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_objectPart)
        self._la = 0 # Token type
        try:
            self.state = 1214
            token = self._input.LA(1)
            if token in [milestone_2Parser.T__2]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1198
                self.match(milestone_2Parser.T__2)
                self.state = 1199
                self.objectPart()
                self.state = 1204
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==milestone_2Parser.T__0:
                    self.state = 1200
                    self.match(milestone_2Parser.T__0)
                    self.state = 1201
                    self.objectPart()
                    self.state = 1206
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1207
                self.match(milestone_2Parser.T__9)

            elif token in [milestone_2Parser.WHEN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1209
                self.objectWhen()

            elif token in [milestone_2Parser.CASE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1210
                self.objectCase()

            elif token in [milestone_2Parser.NIL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1211
                self.match(milestone_2Parser.NIL)

            elif token in [milestone_2Parser.DISCARD]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1212
                self.match(milestone_2Parser.DISCARD)

            elif token in [milestone_2Parser.IDENT]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1213
                self.declColonEquals()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ObjectXContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def objectPart(self):
            return self.getTypedRuleContext(milestone_2Parser.ObjectPartContext,0)


        def pragma(self):
            return self.getTypedRuleContext(milestone_2Parser.PragmaContext,0)


        def typeDesc(self):
            return self.getTypedRuleContext(milestone_2Parser.TypeDescContext,0)


        def COMMENT(self):
            return self.getToken(milestone_2Parser.COMMENT, 0)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_objectX

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectX" ):
                listener.enterObjectX(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectX" ):
                listener.exitObjectX(self)




    def objectX(self):

        localctx = milestone_2Parser.ObjectXContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_objectX)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1216
            self.match(milestone_2Parser.OBJECT)
            self.state = 1218
            _la = self._input.LA(1)
            if _la==milestone_2Parser.T__6:
                self.state = 1217
                self.pragma()


            self.state = 1222
            _la = self._input.LA(1)
            if _la==milestone_2Parser.OF:
                self.state = 1220
                self.match(milestone_2Parser.OF)
                self.state = 1221
                self.typeDesc()


            self.state = 1225
            _la = self._input.LA(1)
            if _la==milestone_2Parser.COMMENT:
                self.state = 1224
                self.match(milestone_2Parser.COMMENT)


            self.state = 1227
            self.objectPart()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeClassParamContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(milestone_2Parser.SymbolContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_typeClassParam

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeClassParam" ):
                listener.enterTypeClassParam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeClassParam" ):
                listener.exitTypeClassParam(self)




    def typeClassParam(self):

        localctx = milestone_2Parser.TypeClassParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_typeClassParam)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1230
            _la = self._input.LA(1)
            if _la==milestone_2Parser.VARIABLE or _la==milestone_2Parser.OUT:
                self.state = 1229
                _la = self._input.LA(1)
                if not(_la==milestone_2Parser.VARIABLE or _la==milestone_2Parser.OUT):
                    self._errHandler.recoverInline(self)
                else:
                    self.consume()


            self.state = 1232
            self.symbol()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeClassContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeClassParam(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.TypeClassParamContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.TypeClassParamContext,i)


        def pragma(self):
            return self.getTypedRuleContext(milestone_2Parser.PragmaContext,0)


        def typeDesc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.TypeDescContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.TypeDescContext,i)


        def stmt(self):
            return self.getTypedRuleContext(milestone_2Parser.StmtContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_typeClass

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeClass" ):
                listener.enterTypeClass(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeClass" ):
                listener.exitTypeClass(self)




    def typeClass(self):

        localctx = milestone_2Parser.TypeClassContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_typeClass)
        self._la = 0 # Token type
        try:
            self.state = 1262
            token = self._input.LA(1)
            if token in [milestone_2Parser.EOF, milestone_2Parser.T__6, milestone_2Parser.IDENT, milestone_2Parser.VARIABLE, milestone_2Parser.OF, milestone_2Parser.OUT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1242
                _la = self._input.LA(1)
                if _la==milestone_2Parser.IDENT or _la==milestone_2Parser.VARIABLE or _la==milestone_2Parser.OUT:
                    self.state = 1234
                    self.typeClassParam()
                    self.state = 1239
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==milestone_2Parser.COMMA:
                        self.state = 1235
                        self.match(milestone_2Parser.COMMA)
                        self.state = 1236
                        self.typeClassParam()
                        self.state = 1241
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1245
                _la = self._input.LA(1)
                if _la==milestone_2Parser.T__6:
                    self.state = 1244
                    self.pragma()


                self.state = 1258
                _la = self._input.LA(1)
                if _la==milestone_2Parser.OF:
                    self.state = 1247
                    self.match(milestone_2Parser.OF)
                    self.state = 1256
                    _la = self._input.LA(1)
                    if _la==milestone_2Parser.IDENT:
                        self.state = 1248
                        self.typeDesc()
                        self.state = 1253
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==milestone_2Parser.COMMA:
                            self.state = 1249
                            self.match(milestone_2Parser.COMMA)
                            self.state = 1250
                            self.typeDesc()
                            self.state = 1255
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)






            elif token in [milestone_2Parser.T__2]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1260
                self.match(milestone_2Parser.T__2)
                self.state = 1261
                self.stmt()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeDefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identWithPragmaDot(self):
            return self.getTypedRuleContext(milestone_2Parser.IdentWithPragmaDotContext,0)


        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def typeDefAux(self):
            return self.getTypedRuleContext(milestone_2Parser.TypeDefAuxContext,0)


        def genericParamList(self):
            return self.getTypedRuleContext(milestone_2Parser.GenericParamListContext,0)


        def indAndComment(self):
            return self.getTypedRuleContext(milestone_2Parser.IndAndCommentContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_typeDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeDef" ):
                listener.enterTypeDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeDef" ):
                listener.exitTypeDef(self)




    def typeDef(self):

        localctx = milestone_2Parser.TypeDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_typeDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1264
            self.identWithPragmaDot()
            self.state = 1266
            _la = self._input.LA(1)
            if _la==milestone_2Parser.OPEN_BRACK:
                self.state = 1265
                self.genericParamList()


            self.state = 1268
            self.match(milestone_2Parser.T__3)
            self.state = 1269
            self.optInd()
            self.state = 1270
            self.typeDefAux()
            self.state = 1272
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,145,self._ctx)
            if la_ == 1:
                self.state = 1271
                self.indAndComment()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VarTupleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.OptIndContext,i)


        def identWithPragma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.IdentWithPragmaContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.IdentWithPragmaContext,i)


        def optPar(self):
            return self.getTypedRuleContext(milestone_2Parser.OptParContext,0)


        def expr(self):
            return self.getTypedRuleContext(milestone_2Parser.ExprContext,0)


        def comma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.CommaContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.CommaContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_varTuple

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarTuple" ):
                listener.enterVarTuple(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarTuple" ):
                listener.exitVarTuple(self)




    def varTuple(self):

        localctx = milestone_2Parser.VarTupleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_varTuple)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1274
            self.match(milestone_2Parser.OPEN_PAREN)
            self.state = 1275
            self.optInd()
            self.state = 1276
            self.identWithPragma()
            self.state = 1282
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==milestone_2Parser.COMMA:
                self.state = 1277
                self.comma()
                self.state = 1278
                self.identWithPragma()
                self.state = 1284
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1285
            self.optPar()
            self.state = 1286
            self.match(milestone_2Parser.CLOSE_PAREN)
            self.state = 1287
            self.match(milestone_2Parser.T__3)
            self.state = 1288
            self.optInd()
            self.state = 1289
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ColonBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colcom(self):
            return self.getTypedRuleContext(milestone_2Parser.ColcomContext,0)


        def stmt(self):
            return self.getTypedRuleContext(milestone_2Parser.StmtContext,0)


        def doBlocks(self):
            return self.getTypedRuleContext(milestone_2Parser.DoBlocksContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_colonBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColonBody" ):
                listener.enterColonBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColonBody" ):
                listener.exitColonBody(self)




    def colonBody(self):

        localctx = milestone_2Parser.ColonBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_colonBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1291
            self.colcom()
            self.state = 1292
            self.stmt()
            self.state = 1294
            _la = self._input.LA(1)
            if _la==milestone_2Parser.IDENT:
                self.state = 1293
                self.doBlocks()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VariableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def indAndComment(self):
            return self.getTypedRuleContext(milestone_2Parser.IndAndCommentContext,0)


        def varTuple(self):
            return self.getTypedRuleContext(milestone_2Parser.VarTupleContext,0)


        def identColonEquals(self):
            return self.getTypedRuleContext(milestone_2Parser.IdentColonEqualsContext,0)


        def colonBody(self):
            return self.getTypedRuleContext(milestone_2Parser.ColonBodyContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_variable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable" ):
                listener.enterVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable" ):
                listener.exitVariable(self)




    def variable(self):

        localctx = milestone_2Parser.VariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_variable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1298
            token = self._input.LA(1)
            if token in [milestone_2Parser.OPEN_PAREN]:
                self.state = 1296
                self.varTuple()

            elif token in [milestone_2Parser.IDENT]:
                self.state = 1297
                self.identColonEquals()

            else:
                raise NoViableAltException(self)

            self.state = 1301
            _la = self._input.LA(1)
            if _la==milestone_2Parser.COLON:
                self.state = 1300
                self.colonBody()


            self.state = 1303
            self.indAndComment()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BindStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def qualifiedIdent(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.QualifiedIdentContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.QualifiedIdentContext,i)


        def comma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.CommaContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.CommaContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_bindStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBindStmt" ):
                listener.enterBindStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBindStmt" ):
                listener.exitBindStmt(self)




    def bindStmt(self):

        localctx = milestone_2Parser.BindStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_bindStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1305
            self.match(milestone_2Parser.BIND)
            self.state = 1306
            self.optInd()
            self.state = 1307
            self.qualifiedIdent()
            self.state = 1313
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==milestone_2Parser.COMMA:
                self.state = 1308
                self.comma()
                self.state = 1309
                self.qualifiedIdent()
                self.state = 1315
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MixinStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def qualifiedIdent(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.QualifiedIdentContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.QualifiedIdentContext,i)


        def comma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.CommaContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.CommaContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_mixinStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMixinStmt" ):
                listener.enterMixinStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMixinStmt" ):
                listener.exitMixinStmt(self)




    def mixinStmt(self):

        localctx = milestone_2Parser.MixinStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_mixinStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1316
            self.match(milestone_2Parser.MIXIN)
            self.state = 1317
            self.optInd()
            self.state = 1318
            self.qualifiedIdent()
            self.state = 1324
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==milestone_2Parser.COMMA:
                self.state = 1319
                self.comma()
                self.state = 1320
                self.qualifiedIdent()
                self.state = 1326
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PragmaStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pragma(self):
            return self.getTypedRuleContext(milestone_2Parser.PragmaContext,0)


        def stmt(self):
            return self.getTypedRuleContext(milestone_2Parser.StmtContext,0)


        def COMMENT(self):
            return self.getToken(milestone_2Parser.COMMENT, 0)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_pragmaStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragmaStmt" ):
                listener.enterPragmaStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragmaStmt" ):
                listener.exitPragmaStmt(self)




    def pragmaStmt(self):

        localctx = milestone_2Parser.PragmaStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_pragmaStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1327
            self.pragma()
            self.state = 1333
            _la = self._input.LA(1)
            if _la==milestone_2Parser.COLON:
                self.state = 1328
                self.match(milestone_2Parser.COLON)
                self.state = 1330
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,152,self._ctx)
                if la_ == 1:
                    self.state = 1329
                    self.match(milestone_2Parser.COMMENT)


                self.state = 1332
                self.stmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SimpleStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exprStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.ExprStmtContext,0)


        def COMMENT(self):
            return self.getToken(milestone_2Parser.COMMENT, 0)

        def returnStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.ReturnStmtContext,0)


        def raiseStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.RaiseStmtContext,0)


        def yieldStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.YieldStmtContext,0)


        def discardStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.DiscardStmtContext,0)


        def breakStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.BreakStmtContext,0)


        def continueStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.ContinueStmtContext,0)


        def pragmaStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.PragmaStmtContext,0)


        def importStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.ImportStmtContext,0)


        def exportStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.ExportStmtContext,0)


        def fromStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.FromStmtContext,0)


        def includeStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.IncludeStmtContext,0)


        def commentStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.CommentStmtContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_simpleStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleStmt" ):
                listener.enterSimpleStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleStmt" ):
                listener.exitSimpleStmt(self)




    def simpleStmt(self):

        localctx = milestone_2Parser.SimpleStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_simpleStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1350
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,155,self._ctx)
            if la_ == 1:
                self.state = 1347
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,154,self._ctx)
                if la_ == 1:
                    self.state = 1335
                    self.returnStmt()
                    pass

                elif la_ == 2:
                    self.state = 1336
                    self.raiseStmt()
                    pass

                elif la_ == 3:
                    self.state = 1337
                    self.yieldStmt()
                    pass

                elif la_ == 4:
                    self.state = 1338
                    self.discardStmt()
                    pass

                elif la_ == 5:
                    self.state = 1339
                    self.breakStmt()
                    pass

                elif la_ == 6:
                    self.state = 1340
                    self.continueStmt()
                    pass

                elif la_ == 7:
                    self.state = 1341
                    self.pragmaStmt()
                    pass

                elif la_ == 8:
                    self.state = 1342
                    self.importStmt()
                    pass

                elif la_ == 9:
                    self.state = 1343
                    self.exportStmt()
                    pass

                elif la_ == 10:
                    self.state = 1344
                    self.fromStmt()
                    pass

                elif la_ == 11:
                    self.state = 1345
                    self.includeStmt()
                    pass

                elif la_ == 12:
                    self.state = 1346
                    self.commentStmt()
                    pass


                pass

            elif la_ == 2:
                self.state = 1349
                self.exprStmt()
                pass


            self.state = 1353
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,156,self._ctx)
            if la_ == 1:
                self.state = 1352
                self.match(milestone_2Parser.COMMENT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ComplexOrSimpleStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ifStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.IfStmtContext,0)


        def whenStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.WhenStmtContext,0)


        def whileStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.WhileStmtContext,0)


        def tryStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.TryStmtContext,0)


        def forStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.ForStmtContext,0)


        def blockStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.BlockStmtContext,0)


        def staticStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.StaticStmtContext,0)


        def deferStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.DeferStmtContext,0)


        def asmStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.AsmStmtContext,0)


        def routine(self):
            return self.getTypedRuleContext(milestone_2Parser.RoutineContext,0)


        def sectionTypeDef(self):
            return self.getTypedRuleContext(milestone_2Parser.SectionTypeDefContext,0)


        def sectionConstant(self):
            return self.getTypedRuleContext(milestone_2Parser.SectionConstantContext,0)


        def sectionVariable(self):
            return self.getTypedRuleContext(milestone_2Parser.SectionVariableContext,0)


        def bindStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.BindStmtContext,0)


        def mixinStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.MixinStmtContext,0)


        def simpleStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.SimpleStmtContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_complexOrSimpleStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComplexOrSimpleStmt" ):
                listener.enterComplexOrSimpleStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComplexOrSimpleStmt" ):
                listener.exitComplexOrSimpleStmt(self)




    def complexOrSimpleStmt(self):

        localctx = milestone_2Parser.ComplexOrSimpleStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_complexOrSimpleStmt)
        self._la = 0 # Token type
        try:
            self.state = 1387
            token = self._input.LA(1)
            if token in [milestone_2Parser.VARIABLE, milestone_2Parser.ASM, milestone_2Parser.BIND, milestone_2Parser.BLOCK, milestone_2Parser.CONST, milestone_2Parser.CONVERTER, milestone_2Parser.DEFER, milestone_2Parser.FOR, milestone_2Parser.IF, milestone_2Parser.ITERATOR, milestone_2Parser.LET, milestone_2Parser.MACRO, milestone_2Parser.METHOD, milestone_2Parser.MIXIN, milestone_2Parser.PROC, milestone_2Parser.STATIC, milestone_2Parser.TEMPLATE, milestone_2Parser.TRY, milestone_2Parser.TYPE, milestone_2Parser.USING, milestone_2Parser.WHEN, milestone_2Parser.WHILE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1384
                token = self._input.LA(1)
                if token in [milestone_2Parser.IF]:
                    self.state = 1355
                    self.ifStmt()

                elif token in [milestone_2Parser.WHEN]:
                    self.state = 1356
                    self.whenStmt()

                elif token in [milestone_2Parser.WHILE]:
                    self.state = 1357
                    self.whileStmt()

                elif token in [milestone_2Parser.TRY]:
                    self.state = 1358
                    self.tryStmt()

                elif token in [milestone_2Parser.FOR]:
                    self.state = 1359
                    self.forStmt()

                elif token in [milestone_2Parser.BLOCK]:
                    self.state = 1360
                    self.blockStmt()

                elif token in [milestone_2Parser.STATIC]:
                    self.state = 1361
                    self.staticStmt()

                elif token in [milestone_2Parser.DEFER]:
                    self.state = 1362
                    self.deferStmt()

                elif token in [milestone_2Parser.ASM]:
                    self.state = 1363
                    self.asmStmt()

                elif token in [milestone_2Parser.PROC]:
                    self.state = 1364
                    self.match(milestone_2Parser.PROC)
                    self.state = 1365
                    self.routine()

                elif token in [milestone_2Parser.METHOD]:
                    self.state = 1366
                    self.match(milestone_2Parser.METHOD)
                    self.state = 1367
                    self.routine()

                elif token in [milestone_2Parser.ITERATOR]:
                    self.state = 1368
                    self.match(milestone_2Parser.ITERATOR)
                    self.state = 1369
                    self.routine()

                elif token in [milestone_2Parser.MACRO]:
                    self.state = 1370
                    self.match(milestone_2Parser.MACRO)
                    self.state = 1371
                    self.routine()

                elif token in [milestone_2Parser.TEMPLATE]:
                    self.state = 1372
                    self.match(milestone_2Parser.TEMPLATE)
                    self.state = 1373
                    self.routine()

                elif token in [milestone_2Parser.CONVERTER]:
                    self.state = 1374
                    self.match(milestone_2Parser.CONVERTER)
                    self.state = 1375
                    self.routine()

                elif token in [milestone_2Parser.TYPE]:
                    self.state = 1376
                    self.match(milestone_2Parser.TYPE)
                    self.state = 1377
                    self.sectionTypeDef()

                elif token in [milestone_2Parser.CONST]:
                    self.state = 1378
                    self.match(milestone_2Parser.CONST)
                    self.state = 1379
                    self.sectionConstant()

                elif token in [milestone_2Parser.VARIABLE, milestone_2Parser.LET, milestone_2Parser.USING]:
                    self.state = 1380
                    _la = self._input.LA(1)
                    if not(((((_la - 50)) & ~0x3f) == 0 and ((1 << (_la - 50)) & ((1 << (milestone_2Parser.VARIABLE - 50)) | (1 << (milestone_2Parser.LET - 50)) | (1 << (milestone_2Parser.USING - 50)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self.consume()
                    self.state = 1381
                    self.sectionVariable()

                elif token in [milestone_2Parser.BIND]:
                    self.state = 1382
                    self.bindStmt()

                elif token in [milestone_2Parser.MIXIN]:
                    self.state = 1383
                    self.mixinStmt()

                else:
                    raise NoViableAltException(self)


            elif token in [milestone_2Parser.T__6, milestone_2Parser.IDENT, milestone_2Parser.COMMENT, milestone_2Parser.BREAK, milestone_2Parser.DISCARD, milestone_2Parser.FROM, milestone_2Parser.IMPORT, milestone_2Parser.INCLUDE, milestone_2Parser.RAISE, milestone_2Parser.RETURN, milestone_2Parser.YIELD]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1386
                self.simpleStmt()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def complexOrSimpleStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ComplexOrSimpleStmtContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ComplexOrSimpleStmtContext,i)


        def simpleStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.SimpleStmtContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.SimpleStmtContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStmt" ):
                listener.enterStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStmt" ):
                listener.exitStmt(self)




    def stmt(self):

        localctx = milestone_2Parser.StmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_stmt)
        self._la = 0 # Token type
        try:
            self.state = 1408
            token = self._input.LA(1)
            if token in [milestone_2Parser.T__2]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1389
                self.match(milestone_2Parser.T__2)
                self.state = 1390
                self.complexOrSimpleStmt()
                self.state = 1395
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==milestone_2Parser.T__0 or _la==milestone_2Parser.SEMI_COLON:
                    self.state = 1391
                    _la = self._input.LA(1)
                    if not(_la==milestone_2Parser.T__0 or _la==milestone_2Parser.SEMI_COLON):
                        self._errHandler.recoverInline(self)
                    else:
                        self.consume()
                    self.state = 1392
                    self.complexOrSimpleStmt()
                    self.state = 1397
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1398
                self.match(milestone_2Parser.T__9)

            elif token in [milestone_2Parser.T__6, milestone_2Parser.IDENT, milestone_2Parser.COMMENT, milestone_2Parser.BREAK, milestone_2Parser.DISCARD, milestone_2Parser.FROM, milestone_2Parser.IMPORT, milestone_2Parser.INCLUDE, milestone_2Parser.RAISE, milestone_2Parser.RETURN, milestone_2Parser.YIELD]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1400
                self.simpleStmt()
                self.state = 1405
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,160,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1401
                        self.match(milestone_2Parser.SEMI_COLON)
                        self.state = 1402
                        self.simpleStmt() 
                    self.state = 1407
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,160,self._ctx)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StartContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def module(self):
            return self.getTypedRuleContext(milestone_2Parser.ModuleContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_start

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStart" ):
                listener.enterStart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStart" ):
                listener.exitStart(self)




    def start(self):

        localctx = milestone_2Parser.StartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_start)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1410
            self.module()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





