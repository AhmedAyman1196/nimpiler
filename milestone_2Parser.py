# Generated from milestone_2.g4 by ANTLR 4.5.3
# encoding: utf-8
from antlr4 import *
from io import StringIO

def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\3\u00a0")
        buf.write("\u06d2\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4")
        buf.write("z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080")
        buf.write("\4\u0081\t\u0081\3\2\3\2\3\2\7\2\u0106\n\2\f\2\16\2\u0109")
        buf.write("\13\2\5\2\u010b\n\2\3\3\3\3\5\3\u010f\n\3\3\4\3\4\5\4")
        buf.write("\u0113\n\4\3\5\3\5\5\5\u0117\n\5\3\6\3\6\5\6\u011b\n\6")
        buf.write("\3\7\3\7\3\b\3\b\3\t\5\t\u0122\n\t\3\t\5\t\u0125\n\t\3")
        buf.write("\n\5\n\u0128\n\n\3\13\3\13\3\13\3\13\3\13\7\13\u012f\n")
        buf.write("\13\f\13\16\13\u0132\13\13\3\13\5\13\u0135\n\13\3\f\3")
        buf.write("\f\3\f\3\f\3\f\7\f\u013c\n\f\f\f\16\f\u013f\13\f\3\r\3")
        buf.write("\r\3\r\3\r\3\r\7\r\u0146\n\r\f\r\16\r\u0149\13\r\3\16")
        buf.write("\3\16\3\16\3\16\3\16\7\16\u0150\n\16\f\16\16\16\u0153")
        buf.write("\13\16\3\17\3\17\3\17\3\17\3\17\7\17\u015a\n\17\f\17\16")
        buf.write("\17\u015d\13\17\3\20\3\20\3\20\3\20\3\20\7\20\u0164\n")
        buf.write("\20\f\20\16\20\u0167\13\20\3\21\3\21\3\21\3\21\3\21\7")
        buf.write("\21\u016e\n\21\f\21\16\21\u0171\13\21\3\22\3\22\3\22\3")
        buf.write("\22\3\22\7\22\u0178\n\22\f\22\16\22\u017b\13\22\3\23\3")
        buf.write("\23\3\23\3\23\3\23\7\23\u0182\n\23\f\23\16\23\u0185\13")
        buf.write("\23\3\24\3\24\3\24\3\24\3\24\7\24\u018c\n\24\f\24\16\24")
        buf.write("\u018f\13\24\3\25\3\25\3\25\3\25\3\25\7\25\u0196\n\25")
        buf.write("\f\25\16\25\u0199\13\25\3\26\3\26\3\26\3\26\3\26\3\26")
        buf.write("\3\26\3\26\3\26\3\26\3\26\3\26\6\26\u01a7\n\26\r\26\16")
        buf.write("\26\u01a8\6\26\u01ab\n\26\r\26\16\26\u01ac\3\26\3\26\3")
        buf.write("\26\5\26\u01b2\n\26\3\27\3\27\3\27\3\27\5\27\u01b8\n\27")
        buf.write("\3\30\3\30\3\30\3\30\7\30\u01be\n\30\f\30\16\30\u01c1")
        buf.write("\13\30\3\31\3\31\3\31\3\31\7\31\u01c7\n\31\f\31\16\31")
        buf.write("\u01ca\13\31\3\31\5\31\u01cd\n\31\3\32\3\32\3\32\3\32")
        buf.write("\3\32\3\32\3\32\3\32\5\32\u01d7\n\32\3\33\3\33\3\33\3")
        buf.write("\33\3\33\3\33\3\33\5\33\u01e0\n\33\3\34\3\34\3\34\3\34")
        buf.write("\3\34\5\34\u01e7\n\34\3\35\3\35\3\35\3\35\7\35\u01ed\n")
        buf.write("\35\f\35\16\35\u01f0\13\35\3\35\5\35\u01f3\n\35\3\35\3")
        buf.write("\35\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36")
        buf.write("\3\36\3\36\3\37\3\37\3 \3 \3 \3 \3 \7 \u020a\n \f \16")
        buf.write(" \u020d\13 \3 \3 \3 \3 \7 \u0213\n \f \16 \u0216\13 \3")
        buf.write(" \3 \3 \3 \3 \3 \3 \3 \7 \u0220\n \f \16 \u0223\13 \5")
        buf.write(" \u0225\n \3 \3 \3 \3 \3 \3 \7 \u022d\n \f \16 \u0230")
        buf.write("\13 \5 \u0232\n \5 \u0234\n \5 \u0236\n \3 \3 \3 \3!\3")
        buf.write("!\3\"\3\"\3#\3#\3#\3#\3#\3#\3#\5#\u0246\n#\3$\3$\3$\3")
        buf.write("$\5$\u024c\n$\7$\u024e\n$\f$\16$\u0251\13$\3$\3$\3$\3")
        buf.write("%\3%\3%\3%\5%\u025a\n%\7%\u025c\n%\f%\16%\u025f\13%\3")
        buf.write("%\3%\3%\3&\3&\3&\5&\u0267\n&\7&\u0269\n&\f&\16&\u026c")
        buf.write("\13&\3&\3&\5&\u0270\n&\3&\3&\3&\3&\3&\5&\u0277\n&\3&\3")
        buf.write("&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\5&\u0286\n&\3\'\3\'")
        buf.write("\3\'\3\'\7\'\u028c\n\'\f\'\16\'\u028f\13\'\3(\3(\3)\3")
        buf.write(")\5)\u0295\n)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3")
        buf.write(")\3)\3)\3)\3)\3)\3)\3)\3)\7)\u02ad\n)\f)\16)\u02b0\13")
        buf.write(")\3*\3*\3*\7*\u02b5\n*\f*\16*\u02b8\13*\3+\3+\3+\3+\3")
        buf.write("+\3+\7+\u02c0\n+\f+\16+\u02c3\13+\3+\3+\3+\3+\3+\3+\7")
        buf.write("+\u02cb\n+\f+\16+\u02ce\13+\5+\u02d0\n+\3,\3,\3-\3-\3")
        buf.write(".\3.\3.\7.\u02d9\n.\f.\16.\u02dc\13.\3/\3/\3\60\3\60\3")
        buf.write("\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\7\60\u02ea\n\60")
        buf.write("\f\60\16\60\u02ed\13\60\3\60\3\60\3\60\3\60\3\61\3\61")
        buf.write("\3\61\3\62\3\62\3\62\3\63\3\63\3\63\3\63\5\63\u02fd\n")
        buf.write("\63\7\63\u02ff\n\63\f\63\16\63\u0302\13\63\3\63\3\63\3")
        buf.write("\63\3\64\3\64\5\64\u0309\n\64\3\65\3\65\3\65\3\65\3\65")
        buf.write("\5\65\u0310\n\65\3\66\3\66\5\66\u0314\n\66\3\67\3\67\5")
        buf.write("\67\u0318\n\67\38\38\38\38\78\u031e\n8\f8\168\u0321\13")
        buf.write("8\38\58\u0324\n8\38\38\38\38\58\u032a\n8\38\38\38\38\5")
        buf.write("8\u0330\n8\39\39\39\39\79\u0336\n9\f9\169\u0339\139\3")
        buf.write("9\59\u033c\n9\39\39\39\39\59\u0342\n9\39\39\39\39\59\u0348")
        buf.write("\n9\3:\3:\3:\3:\3:\3:\3:\5:\u0351\n:\7:\u0353\n:\f:\16")
        buf.write(":\u0356\13:\3:\3:\3:\3;\3;\5;\u035d\n;\3;\3;\3;\3;\7;")
        buf.write("\u0363\n;\f;\16;\u0366\13;\5;\u0368\n;\3<\3<\3=\3=\3=")
        buf.write("\3=\3=\3=\3=\3=\7=\u0374\n=\f=\16=\u0377\13=\5=\u0379")
        buf.write("\n=\3=\3=\3>\5>\u037e\n>\3>\3>\3>\3>\5>\u0384\n>\3?\5")
        buf.write("?\u0387\n?\3?\3?\3?\3?\5?\u038d\n?\3@\3@\3@\5@\u0392\n")
        buf.write("@\3@\3@\3@\3A\3A\3A\5A\u039a\nA\3A\3A\5A\u039e\nA\3A\5")
        buf.write("A\u03a1\nA\3B\3B\3B\3B\3C\3C\3C\3C\3C\7C\u03ac\nC\fC\16")
        buf.write("C\u03af\13C\3C\3C\3C\3C\3C\3D\3D\3E\3E\3E\3E\3E\3E\5E")
        buf.write("\u03be\nE\3E\5E\u03c1\nE\3F\3F\3G\3G\3G\3G\7G\u03c9\n")
        buf.write("G\fG\16G\u03cc\13G\3G\3G\7G\u03d0\nG\fG\16G\u03d3\13G")
        buf.write("\3G\3G\5G\u03d7\nG\3H\3H\3I\3I\3I\5I\u03de\nI\3J\3J\5")
        buf.write("J\u03e2\nJ\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3")
        buf.write("J\3J\3J\3J\3J\3J\3J\3J\3J\3J\7J\u03fc\nJ\fJ\16J\u03ff")
        buf.write("\13J\3K\3K\3K\3K\3K\5K\u0406\nK\3K\3K\3K\3K\7K\u040c\n")
        buf.write("K\fK\16K\u040f\13K\3K\3K\3K\5K\u0414\nK\5K\u0416\nK\3")
        buf.write("L\3L\3L\3L\3L\3L\7L\u041e\nL\fL\16L\u0421\13L\3L\3L\3")
        buf.write("L\3L\3L\3L\7L\u0429\nL\fL\16L\u042c\13L\5L\u042e\nL\3")
        buf.write("M\3M\3M\3M\3M\3M\7M\u0436\nM\fM\16M\u0439\13M\3N\3N\3")
        buf.write("N\3N\3N\3N\3N\3N\7N\u0443\nN\fN\16N\u0446\13N\3O\3O\3")
        buf.write("O\5O\u044b\nO\3P\3P\3P\5P\u0450\nP\3Q\3Q\3Q\5Q\u0455\n")
        buf.write("Q\3R\3R\3R\5R\u045a\nR\3S\3S\3S\5S\u045f\nS\3T\3T\3T\5")
        buf.write("T\u0464\nT\3U\3U\3U\3U\5U\u046a\nU\3U\3U\3U\3U\3U\3U\7")
        buf.write("U\u0472\nU\fU\16U\u0475\13U\3U\3U\3U\3U\3U\5U\u047c\n")
        buf.write("U\3V\3V\3V\3W\3W\3W\3X\3X\3X\3X\3X\3Y\3Y\3Y\3Y\3Y\3Z\3")
        buf.write("Z\3Z\7Z\u0491\nZ\fZ\16Z\u0494\13Z\3Z\3Z\3Z\3Z\3Z\3Z\7")
        buf.write("Z\u049c\nZ\fZ\16Z\u049f\13Z\3Z\3Z\3Z\3Z\3Z\5Z\u04a6\n")
        buf.write("Z\3[\3[\3[\5[\u04ab\n[\3[\5[\u04ae\n[\3[\3[\3[\3[\3[\3")
        buf.write("[\5[\u04b6\n[\3\\\3\\\3\\\3\\\5\\\u04bc\n\\\3\\\3\\\3")
        buf.write("\\\3\\\3\\\7\\\u04c3\n\\\f\\\16\\\u04c6\13\\\3\\\5\\\u04c9")
        buf.write("\n\\\3\\\3\\\3\\\3\\\5\\\u04cf\n\\\3]\3]\3]\3]\3]\3]\3")
        buf.write("]\3]\3]\7]\u04da\n]\f]\16]\u04dd\13]\3]\3]\3]\3]\3]\5")
        buf.write("]\u04e4\n]\3^\3^\3^\3^\3_\3_\5_\u04ec\n_\3_\3_\3_\3`\3")
        buf.write("`\5`\u04f3\n`\3`\3`\3`\3a\3a\3a\3a\3b\3b\3b\3b\3c\3c\5")
        buf.write("c\u0502\nc\3c\3c\3d\3d\3d\3d\7d\u050a\nd\fd\16d\u050d")
        buf.write("\13d\3d\3d\3d\5d\u0512\nd\3d\3d\3d\3d\5d\u0518\nd\3e\3")
        buf.write("e\3e\3e\3e\5e\u051f\ne\3e\3e\7e\u0523\ne\fe\16e\u0526")
        buf.write("\13e\5e\u0528\ne\3e\3e\3e\3f\3f\3f\3f\3g\3g\5g\u0533\n")
        buf.write("g\3g\5g\u0536\ng\5g\u0538\ng\3h\3h\3h\5h\u053d\nh\3h\5")
        buf.write("h\u0540\nh\3h\3h\5h\u0544\nh\3h\3h\5h\u0548\nh\3h\5h\u054b")
        buf.write("\nh\3h\3h\3i\3i\3j\5j\u0552\nj\3j\3j\3j\3j\5j\u0558\n")
        buf.write("j\3j\3j\3j\5j\u055d\nj\7j\u055f\nj\fj\16j\u0562\13j\3")
        buf.write("j\5j\u0565\nj\3k\5k\u0568\nk\3k\3k\3k\3k\5k\u056e\nk\3")
        buf.write("k\3k\3k\5k\u0573\nk\7k\u0575\nk\fk\16k\u0578\13k\3k\5")
        buf.write("k\u057b\nk\3l\5l\u057e\nl\3l\3l\3l\3l\5l\u0584\nl\3l\3")
        buf.write("l\3l\5l\u0589\nl\7l\u058b\nl\fl\16l\u058e\13l\3l\5l\u0591")
        buf.write("\nl\3m\3m\3m\3m\5m\u0597\nm\3m\3m\3m\3m\3m\3n\3n\3n\3")
        buf.write("n\3n\3n\3n\3n\5n\u05a6\nn\5n\u05a8\nn\3n\5n\u05ab\nn\6")
        buf.write("n\u05ad\nn\rn\16n\u05ae\3o\3o\3o\3o\3o\5o\u05b6\no\3o")
        buf.write("\3o\3o\3o\3o\5o\u05bd\no\7o\u05bf\no\fo\16o\u05c2\13o")
        buf.write("\3o\3o\3o\3o\5o\u05c8\no\5o\u05ca\no\3p\3p\3p\3p\3p\3")
        buf.write("q\3q\3q\7q\u05d4\nq\fq\16q\u05d7\13q\3q\3q\3q\3q\3q\3")
        buf.write("q\7q\u05df\nq\fq\16q\u05e2\13q\3q\3q\3q\3q\3q\5q\u05e9")
        buf.write("\nq\3r\3r\3r\3r\3r\5r\u05f0\nr\3r\5r\u05f3\nr\3r\3r\3")
        buf.write("r\3r\3r\3r\5r\u05fb\nr\3s\3s\3s\3s\7s\u0601\ns\fs\16s")
        buf.write("\u0604\13s\3s\3s\3s\3s\3s\3s\3s\5s\u060d\ns\3t\3t\5t\u0611")
        buf.write("\nt\3t\3t\5t\u0615\nt\3t\5t\u0618\nt\3t\3t\3u\5u\u061d")
        buf.write("\nu\3u\3u\3v\3v\3v\7v\u0624\nv\fv\16v\u0627\13v\5v\u0629")
        buf.write("\nv\3v\5v\u062c\nv\3v\3v\3v\3v\7v\u0632\nv\fv\16v\u0635")
        buf.write("\13v\5v\u0637\nv\5v\u0639\nv\3v\5v\u063c\nv\3w\3w\5w\u0640")
        buf.write("\nw\3w\3w\3w\3w\5w\u0646\nw\3x\3x\3x\3x\3x\3x\7x\u064e")
        buf.write("\nx\fx\16x\u0651\13x\3x\3x\3x\3x\3x\3x\3y\3y\3y\5y\u065c")
        buf.write("\ny\3z\3z\5z\u0660\nz\3z\5z\u0663\nz\3z\3z\3{\3{\3{\3")
        buf.write("{\3{\3{\7{\u066d\n{\f{\16{\u0670\13{\3|\3|\3|\3|\3|\3")
        buf.write("|\7|\u0678\n|\f|\16|\u067b\13|\3}\3}\3}\5}\u0680\n}\3")
        buf.write("}\5}\u0683\n}\3~\3~\3~\3~\3~\3~\3~\3~\3~\3~\3~\3~\5~\u0691")
        buf.write("\n~\3~\5~\u0694\n~\3~\5~\u0697\n~\3\177\3\177\3\177\3")
        buf.write("\177\3\177\3\177\3\177\3\177\3\177\3\177\3\177\3\177\3")
        buf.write("\177\3\177\3\177\3\177\3\177\3\177\3\177\3\177\3\177\3")
        buf.write("\177\3\177\3\177\3\177\3\177\3\177\3\177\3\177\5\177\u06b6")
        buf.write("\n\177\3\177\5\177\u06b9\n\177\3\u0080\3\u0080\3\u0080")
        buf.write("\3\u0080\7\u0080\u06bf\n\u0080\f\u0080\16\u0080\u06c2")
        buf.write("\13\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\7\u0080")
        buf.write("\u06c9\n\u0080\f\u0080\16\u0080\u06cc\13\u0080\5\u0080")
        buf.write("\u06ce\n\u0080\3\u0081\3\u0081\3\u0081\3\u02b6\2\u0082")
        buf.write("\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62")
        buf.write("\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082")
        buf.write("\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094")
        buf.write("\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6")
        buf.write("\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8")
        buf.write("\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca")
        buf.write("\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc")
        buf.write("\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee")
        buf.write("\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100")
        buf.write("\2\16\4\2\3\3CC\f\2\25\36EEVVddghnnpqst{}\u0085\u0085")
        buf.write("\4\2\3\3\5\5\17\2FFKKMMPPTT\\\\^_bbeejjmm\177\177\u0083")
        buf.write("\u0084\t\2&)oo\u008a\u008a\u0092\u009a\u009c\u009c\u009e")
        buf.write("\u009e\u00a0\u00a0\3\2*+\3\2\t\16\4\2\20\20??\13\2\22")
        buf.write("\22FFUU[[iirruwyy\u0080\u0080\4\2&\'))\4\2FFuu\5\2FFj")
        buf.write("j\u0082\u0082\u0764\2\u010a\3\2\2\2\4\u010c\3\2\2\2\6")
        buf.write("\u0110\3\2\2\2\b\u0114\3\2\2\2\n\u0118\3\2\2\2\f\u011c")
        buf.write("\3\2\2\2\16\u011e\3\2\2\2\20\u0121\3\2\2\2\22\u0127\3")
        buf.write("\2\2\2\24\u0129\3\2\2\2\26\u0136\3\2\2\2\30\u0140\3\2")
        buf.write("\2\2\32\u014a\3\2\2\2\34\u0154\3\2\2\2\36\u015e\3\2\2")
        buf.write("\2 \u0168\3\2\2\2\"\u0172\3\2\2\2$\u017c\3\2\2\2&\u0186")
        buf.write("\3\2\2\2(\u0190\3\2\2\2*\u01b1\3\2\2\2,\u01b3\3\2\2\2")
        buf.write(".\u01b9\3\2\2\2\60\u01c2\3\2\2\2\62\u01ce\3\2\2\2\64\u01d8")
        buf.write("\3\2\2\2\66\u01e1\3\2\2\28\u01e8\3\2\2\2:\u01f6\3\2\2")
        buf.write("\2<\u0202\3\2\2\2>\u0204\3\2\2\2@\u023a\3\2\2\2B\u023c")
        buf.write("\3\2\2\2D\u0245\3\2\2\2F\u0247\3\2\2\2H\u0255\3\2\2\2")
        buf.write("J\u0285\3\2\2\2L\u0287\3\2\2\2N\u0290\3\2\2\2P\u0292\3")
        buf.write("\2\2\2R\u02b1\3\2\2\2T\u02b9\3\2\2\2V\u02d1\3\2\2\2X\u02d3")
        buf.write("\3\2\2\2Z\u02d5\3\2\2\2\\\u02dd\3\2\2\2^\u02df\3\2\2\2")
        buf.write("`\u02f2\3\2\2\2b\u02f5\3\2\2\2d\u02f8\3\2\2\2f\u0306\3")
        buf.write("\2\2\2h\u030a\3\2\2\2j\u0311\3\2\2\2l\u0315\3\2\2\2n\u0319")
        buf.write("\3\2\2\2p\u0331\3\2\2\2r\u0349\3\2\2\2t\u035a\3\2\2\2")
        buf.write("v\u0369\3\2\2\2x\u036b\3\2\2\2z\u037d\3\2\2\2|\u0386\3")
        buf.write("\2\2\2~\u038e\3\2\2\2\u0080\u0396\3\2\2\2\u0082\u03a2")
        buf.write("\3\2\2\2\u0084\u03a6\3\2\2\2\u0086\u03b5\3\2\2\2\u0088")
        buf.write("\u03c0\3\2\2\2\u008a\u03c2\3\2\2\2\u008c\u03d6\3\2\2\2")
        buf.write("\u008e\u03d8\3\2\2\2\u0090\u03dd\3\2\2\2\u0092\u03df\3")
        buf.write("\2\2\2\u0094\u0400\3\2\2\2\u0096\u0417\3\2\2\2\u0098\u042f")
        buf.write("\3\2\2\2\u009a\u043a\3\2\2\2\u009c\u0447\3\2\2\2\u009e")
        buf.write("\u044c\3\2\2\2\u00a0\u0451\3\2\2\2\u00a2\u0456\3\2\2\2")
        buf.write("\u00a4\u045b\3\2\2\2\u00a6\u0460\3\2\2\2\u00a8\u0465\3")
        buf.write("\2\2\2\u00aa\u047d\3\2\2\2\u00ac\u0480\3\2\2\2\u00ae\u0483")
        buf.write("\3\2\2\2\u00b0\u0488\3\2\2\2\u00b2\u048d\3\2\2\2\u00b4")
        buf.write("\u04a7\3\2\2\2\u00b6\u04b7\3\2\2\2\u00b8\u04d0\3\2\2\2")
        buf.write("\u00ba\u04e5\3\2\2\2\u00bc\u04e9\3\2\2\2\u00be\u04f0\3")
        buf.write("\2\2\2\u00c0\u04f7\3\2\2\2\u00c2\u04fb\3\2\2\2\u00c4\u04ff")
        buf.write("\3\2\2\2\u00c6\u0505\3\2\2\2\u00c8\u0519\3\2\2\2\u00ca")
        buf.write("\u052c\3\2\2\2\u00cc\u0537\3\2\2\2\u00ce\u0539\3\2\2\2")
        buf.write("\u00d0\u054e\3\2\2\2\u00d2\u0564\3\2\2\2\u00d4\u057a\3")
        buf.write("\2\2\2\u00d6\u0590\3\2\2\2\u00d8\u0592\3\2\2\2\u00da\u059d")
        buf.write("\3\2\2\2\u00dc\u05b0\3\2\2\2\u00de\u05cb\3\2\2\2\u00e0")
        buf.write("\u05d0\3\2\2\2\u00e2\u05ea\3\2\2\2\u00e4\u060c\3\2\2\2")
        buf.write("\u00e6\u060e\3\2\2\2\u00e8\u061c\3\2\2\2\u00ea\u063b\3")
        buf.write("\2\2\2\u00ec\u063d\3\2\2\2\u00ee\u0647\3\2\2\2\u00f0\u0658")
        buf.write("\3\2\2\2\u00f2\u065f\3\2\2\2\u00f4\u0666\3\2\2\2\u00f6")
        buf.write("\u0671\3\2\2\2\u00f8\u067c\3\2\2\2\u00fa\u0693\3\2\2\2")
        buf.write("\u00fc\u06b8\3\2\2\2\u00fe\u06cd\3\2\2\2\u0100\u06cf\3")
        buf.write("\2\2\2\u0102\u0107\5\u00fe\u0080\2\u0103\u0104\t\2\2\2")
        buf.write("\u0104\u0106\5\u00fe\u0080\2\u0105\u0103\3\2\2\2\u0106")
        buf.write("\u0109\3\2\2\2\u0107\u0105\3\2\2\2\u0107\u0108\3\2\2\2")
        buf.write("\u0108\u010b\3\2\2\2\u0109\u0107\3\2\2\2\u010a\u0102\3")
        buf.write("\2\2\2\u010a\u010b\3\2\2\2\u010b\3\3\2\2\2\u010c\u010e")
        buf.write("\7B\2\2\u010d\u010f\7%\2\2\u010e\u010d\3\2\2\2\u010e\u010f")
        buf.write("\3\2\2\2\u010f\5\3\2\2\2\u0110\u0112\7C\2\2\u0111\u0113")
        buf.write("\7%\2\2\u0112\u0111\3\2\2\2\u0112\u0113\3\2\2\2\u0113")
        buf.write("\7\3\2\2\2\u0114\u0116\7;\2\2\u0115\u0117\7%\2\2\u0116")
        buf.write("\u0115\3\2\2\2\u0116\u0117\3\2\2\2\u0117\t\3\2\2\2\u0118")
        buf.write("\u011a\7;\2\2\u0119\u011b\7%\2\2\u011a\u0119\3\2\2\2\u011a")
        buf.write("\u011b\3\2\2\2\u011b\13\3\2\2\2\u011c\u011d\t\3\2\2\u011d")
        buf.write("\r\3\2\2\2\u011e\u011f\5\f\7\2\u011f\17\3\2\2\2\u0120")
        buf.write("\u0122\7%\2\2\u0121\u0120\3\2\2\2\u0121\u0122\3\2\2\2")
        buf.write("\u0122\u0124\3\2\2\2\u0123\u0125\7\4\2\2\u0124\u0123\3")
        buf.write("\2\2\2\u0124\u0125\3\2\2\2\u0125\21\3\2\2\2\u0126\u0128")
        buf.write("\t\4\2\2\u0127\u0126\3\2\2\2\u0127\u0128\3\2\2\2\u0128")
        buf.write("\23\3\2\2\2\u0129\u0130\5\26\f\2\u012a\u012b\7\36\2\2")
        buf.write("\u012b\u012c\5\20\t\2\u012c\u012d\5\26\f\2\u012d\u012f")
        buf.write("\3\2\2\2\u012e\u012a\3\2\2\2\u012f\u0132\3\2\2\2\u0130")
        buf.write("\u012e\3\2\2\2\u0130\u0131\3\2\2\2\u0131\u0134\3\2\2\2")
        buf.write("\u0132\u0130\3\2\2\2\u0133\u0135\5d\63\2\u0134\u0133\3")
        buf.write("\2\2\2\u0134\u0135\3\2\2\2\u0135\25\3\2\2\2\u0136\u013d")
        buf.write("\5\30\r\2\u0137\u0138\7\35\2\2\u0138\u0139\5\20\t\2\u0139")
        buf.write("\u013a\5\30\r\2\u013a\u013c\3\2\2\2\u013b\u0137\3\2\2")
        buf.write("\2\u013c\u013f\3\2\2\2\u013d\u013b\3\2\2\2\u013d\u013e")
        buf.write("\3\2\2\2\u013e\27\3\2\2\2\u013f\u013d\3\2\2\2\u0140\u0147")
        buf.write("\5\32\16\2\u0141\u0142\7\34\2\2\u0142\u0143\5\20\t\2\u0143")
        buf.write("\u0144\5\32\16\2\u0144\u0146\3\2\2\2\u0145\u0141\3\2\2")
        buf.write("\2\u0146\u0149\3\2\2\2\u0147\u0145\3\2\2\2\u0147\u0148")
        buf.write("\3\2\2\2\u0148\31\3\2\2\2\u0149\u0147\3\2\2\2\u014a\u0151")
        buf.write("\5\34\17\2\u014b\u014c\7\33\2\2\u014c\u014d\5\20\t\2\u014d")
        buf.write("\u014e\5\34\17\2\u014e\u0150\3\2\2\2\u014f\u014b\3\2\2")
        buf.write("\2\u0150\u0153\3\2\2\2\u0151\u014f\3\2\2\2\u0151\u0152")
        buf.write("\3\2\2\2\u0152\33\3\2\2\2\u0153\u0151\3\2\2\2\u0154\u015b")
        buf.write("\5\36\20\2\u0155\u0156\7\32\2\2\u0156\u0157\5\20\t\2\u0157")
        buf.write("\u0158\5\36\20\2\u0158\u015a\3\2\2\2\u0159\u0155\3\2\2")
        buf.write("\2\u015a\u015d\3\2\2\2\u015b\u0159\3\2\2\2\u015b\u015c")
        buf.write("\3\2\2\2\u015c\35\3\2\2\2\u015d\u015b\3\2\2\2\u015e\u0165")
        buf.write("\5 \21\2\u015f\u0160\7\31\2\2\u0160\u0161\5\20\t\2\u0161")
        buf.write("\u0162\5 \21\2\u0162\u0164\3\2\2\2\u0163\u015f\3\2\2\2")
        buf.write("\u0164\u0167\3\2\2\2\u0165\u0163\3\2\2\2\u0165\u0166\3")
        buf.write("\2\2\2\u0166\37\3\2\2\2\u0167\u0165\3\2\2\2\u0168\u016f")
        buf.write("\5\"\22\2\u0169\u016a\7\30\2\2\u016a\u016b\5\20\t\2\u016b")
        buf.write("\u016c\5\"\22\2\u016c\u016e\3\2\2\2\u016d\u0169\3\2\2")
        buf.write("\2\u016e\u0171\3\2\2\2\u016f\u016d\3\2\2\2\u016f\u0170")
        buf.write("\3\2\2\2\u0170!\3\2\2\2\u0171\u016f\3\2\2\2\u0172\u0179")
        buf.write("\5$\23\2\u0173\u0174\7\27\2\2\u0174\u0175\5\20\t\2\u0175")
        buf.write("\u0176\5$\23\2\u0176\u0178\3\2\2\2\u0177\u0173\3\2\2\2")
        buf.write("\u0178\u017b\3\2\2\2\u0179\u0177\3\2\2\2\u0179\u017a\3")
        buf.write("\2\2\2\u017a#\3\2\2\2\u017b\u0179\3\2\2\2\u017c\u0183")
        buf.write("\5&\24\2\u017d\u017e\7\26\2\2\u017e\u017f\5\20\t\2\u017f")
        buf.write("\u0180\5&\24\2\u0180\u0182\3\2\2\2\u0181\u017d\3\2\2\2")
        buf.write("\u0182\u0185\3\2\2\2\u0183\u0181\3\2\2\2\u0183\u0184\3")
        buf.write("\2\2\2\u0184%\3\2\2\2\u0185\u0183\3\2\2\2\u0186\u018d")
        buf.write("\5(\25\2\u0187\u0188\7\25\2\2\u0188\u0189\5\20\t\2\u0189")
        buf.write("\u018a\5(\25\2\u018a\u018c\3\2\2\2\u018b\u0187\3\2\2\2")
        buf.write("\u018c\u018f\3\2\2\2\u018d\u018b\3\2\2\2\u018d\u018e\3")
        buf.write("\2\2\2\u018e\'\3\2\2\2\u018f\u018d\3\2\2\2\u0190\u0197")
        buf.write("\5\u008cG\2\u0191\u0192\7\24\2\2\u0192\u0193\5\20\t\2")
        buf.write("\u0193\u0194\5\u008cG\2\u0194\u0196\3\2\2\2\u0195\u0191")
        buf.write("\3\2\2\2\u0196\u0199\3\2\2\2\u0197\u0195\3\2\2\2\u0197")
        buf.write("\u0198\3\2\2\2\u0198)\3\2\2\2\u0199\u0197\3\2\2\2\u019a")
        buf.write("\u01aa\7\6\2\2\u019b\u01ab\7D\2\2\u019c\u01ab\7\37\2\2")
        buf.write("\u019d\u01ab\5@!\2\u019e\u01a7\5\f\7\2\u019f\u01a7\7<")
        buf.write("\2\2\u01a0\u01a7\7=\2\2\u01a1\u01a7\7@\2\2\u01a2\u01a7")
        buf.write("\7A\2\2\u01a3\u01a7\7>\2\2\u01a4\u01a7\7?\2\2\u01a5\u01a7")
        buf.write("\7\7\2\2\u01a6\u019e\3\2\2\2\u01a6\u019f\3\2\2\2\u01a6")
        buf.write("\u01a0\3\2\2\2\u01a6\u01a1\3\2\2\2\u01a6\u01a2\3\2\2\2")
        buf.write("\u01a6\u01a3\3\2\2\2\u01a6\u01a4\3\2\2\2\u01a6\u01a5\3")
        buf.write("\2\2\2\u01a7\u01a8\3\2\2\2\u01a8\u01a6\3\2\2\2\u01a8\u01a9")
        buf.write("\3\2\2\2\u01a9\u01ab\3\2\2\2\u01aa\u019b\3\2\2\2\u01aa")
        buf.write("\u019c\3\2\2\2\u01aa\u019d\3\2\2\2\u01aa\u01a6\3\2\2\2")
        buf.write("\u01ab\u01ac\3\2\2\2\u01ac\u01aa\3\2\2\2\u01ac\u01ad\3")
        buf.write("\2\2\2\u01ad\u01ae\3\2\2\2\u01ae\u01b2\7\6\2\2\u01af\u01b2")
        buf.write("\7\37\2\2\u01b0\u01b2\7D\2\2\u01b1\u019a\3\2\2\2\u01b1")
        buf.write("\u01af\3\2\2\2\u01b1\u01b0\3\2\2\2\u01b2+\3\2\2\2\u01b3")
        buf.write("\u01b7\5\u0088E\2\u01b4\u01b8\7;\2\2\u01b5\u01b6\7\7\2")
        buf.write("\2\u01b6\u01b8\5\u0088E\2\u01b7\u01b4\3\2\2\2\u01b7\u01b5")
        buf.write("\3\2\2\2\u01b7\u01b8\3\2\2\2\u01b8-\3\2\2\2\u01b9\u01bf")
        buf.write("\5\u0088E\2\u01ba\u01bb\5\4\3\2\u01bb\u01bc\5\u0088E\2")
        buf.write("\u01bc\u01be\3\2\2\2\u01bd\u01ba\3\2\2\2\u01be\u01c1\3")
        buf.write("\2\2\2\u01bf\u01bd\3\2\2\2\u01bf\u01c0\3\2\2\2\u01c0/")
        buf.write("\3\2\2\2\u01c1\u01bf\3\2\2\2\u01c2\u01c8\5,\27\2\u01c3")
        buf.write("\u01c4\5\4\3\2\u01c4\u01c5\5,\27\2\u01c5\u01c7\3\2\2\2")
        buf.write("\u01c6\u01c3\3\2\2\2\u01c7\u01ca\3\2\2\2\u01c8\u01c6\3")
        buf.write("\2\2\2\u01c8\u01c9\3\2\2\2\u01c9\u01cc\3\2\2\2\u01ca\u01c8")
        buf.write("\3\2\2\2\u01cb\u01cd\5\4\3\2\u01cc\u01cb\3\2\2\2\u01cc")
        buf.write("\u01cd\3\2\2\2\u01cd\61\3\2\2\2\u01ce\u01cf\5\u0088E\2")
        buf.write("\u01cf\u01d0\7:\2\2\u01d0\u01d6\5\20\t\2\u01d1\u01d7\5")
        buf.write("*\26\2\u01d2\u01d3\7\b\2\2\u01d3\u01d4\5.\30\2\u01d4\u01d5")
        buf.write("\7A\2\2\u01d5\u01d7\3\2\2\2\u01d6\u01d1\3\2\2\2\u01d6")
        buf.write("\u01d2\3\2\2\2\u01d7\63\3\2\2\2\u01d8\u01d9\7\b\2\2\u01d9")
        buf.write("\u01da\5.\30\2\u01da\u01df\7A\2\2\u01db\u01dc\7<\2\2\u01dc")
        buf.write("\u01dd\5,\27\2\u01dd\u01de\7=\2\2\u01de\u01e0\3\2\2\2")
        buf.write("\u01df\u01db\3\2\2\2\u01df\u01e0\3\2\2\2\u01e0\65\3\2")
        buf.write("\2\2\u01e1\u01e6\5*\26\2\u01e2\u01e3\7:\2\2\u01e3\u01e4")
        buf.write("\5\20\t\2\u01e4\u01e5\5*\26\2\u01e5\u01e7\3\2\2\2\u01e6")
        buf.write("\u01e2\3\2\2\2\u01e6\u01e7\3\2\2\2\u01e7\67\3\2\2\2\u01e8")
        buf.write("\u01f2\7>\2\2\u01e9\u01ea\5,\27\2\u01ea\u01eb\5\4\3\2")
        buf.write("\u01eb\u01ed\3\2\2\2\u01ec\u01e9\3\2\2\2\u01ed\u01f0\3")
        buf.write("\2\2\2\u01ee\u01ec\3\2\2\2\u01ee\u01ef\3\2\2\2\u01ef\u01f3")
        buf.write("\3\2\2\2\u01f0\u01ee\3\2\2\2\u01f1\u01f3\7;\2\2\u01f2")
        buf.write("\u01ee\3\2\2\2\u01f2\u01f1\3\2\2\2\u01f3\u01f4\3\2\2\2")
        buf.write("\u01f4\u01f5\7?\2\2\u01f59\3\2\2\2\u01f6\u01f7\7N\2\2")
        buf.write("\u01f7\u01f8\7@\2\2\u01f8\u01f9\5\20\t\2\u01f9\u01fa\5")
        buf.write("\u008eH\2\u01fa\u01fb\5\22\n\2\u01fb\u01fc\7A\2\2\u01fc")
        buf.write("\u01fd\7<\2\2\u01fd\u01fe\5\20\t\2\u01fe\u01ff\5\u0088")
        buf.write("E\2\u01ff\u0200\5\22\n\2\u0200\u0201\7=\2\2\u0201;\3\2")
        buf.write("\2\2\u0202\u0203\t\5\2\2\u0203=\3\2\2\2\u0204\u0205\7")
        buf.write("<\2\2\u0205\u0235\5\20\t\2\u0206\u020b\5\u00fc\177\2\u0207")
        buf.write("\u0208\7C\2\2\u0208\u020a\5\u00fc\177\2\u0209\u0207\3")
        buf.write("\2\2\2\u020a\u020d\3\2\2\2\u020b\u0209\3\2\2\2\u020b\u020c")
        buf.write("\3\2\2\2\u020c\u0236\3\2\2\2\u020d\u020b\3\2\2\2\u020e")
        buf.write("\u020f\7C\2\2\u020f\u0214\5\u00fc\177\2\u0210\u0211\7")
        buf.write("C\2\2\u0211\u0213\5\u00fc\177\2\u0212\u0210\3\2\2\2\u0213")
        buf.write("\u0216\3\2\2\2\u0214\u0212\3\2\2\2\u0214\u0215\3\2\2\2")
        buf.write("\u0215\u0236\3\2\2\2\u0216\u0214\3\2\2\2\u0217\u0236\5")
        buf.write("\u00f8}\2\u0218\u0233\5\24\13\2\u0219\u021a\7\7\2\2\u021a")
        buf.write("\u0224\5\u0088E\2\u021b\u021c\7C\2\2\u021c\u0221\5\u00fc")
        buf.write("\177\2\u021d\u021e\7C\2\2\u021e\u0220\5\u00fc\177\2\u021f")
        buf.write("\u021d\3\2\2\2\u0220\u0223\3\2\2\2\u0221\u021f\3\2\2\2")
        buf.write("\u0221\u0222\3\2\2\2\u0222\u0225\3\2\2\2\u0223\u0221\3")
        buf.write("\2\2\2\u0224\u021b\3\2\2\2\u0224\u0225\3\2\2\2\u0225\u0234")
        buf.write("\3\2\2\2\u0226\u0227\7;\2\2\u0227\u0231\5\u0088E\2\u0228")
        buf.write("\u0229\7B\2\2\u0229\u022e\5,\27\2\u022a\u022b\7B\2\2\u022b")
        buf.write("\u022d\5X-\2\u022c\u022a\3\2\2\2\u022d\u0230\3\2\2\2\u022e")
        buf.write("\u022c\3\2\2\2\u022e\u022f\3\2\2\2\u022f\u0232\3\2\2\2")
        buf.write("\u0230\u022e\3\2\2\2\u0231\u0228\3\2\2\2\u0231\u0232\3")
        buf.write("\2\2\2\u0232\u0234\3\2\2\2\u0233\u0219\3\2\2\2\u0233\u0226")
        buf.write("\3\2\2\2\u0234\u0236\3\2\2\2\u0235\u0206\3\2\2\2\u0235")
        buf.write("\u020e\3\2\2\2\u0235\u0217\3\2\2\2\u0235\u0218\3\2\2\2")
        buf.write("\u0236\u0237\3\2\2\2\u0237\u0238\5\22\n\2\u0238\u0239")
        buf.write("\7=\2\2\u0239?\3\2\2\2\u023a\u023b\t\6\2\2\u023bA\3\2")
        buf.write("\2\2\u023c\u023d\t\7\2\2\u023dC\3\2\2\2\u023e\u0246\5")
        buf.write("B\"\2\u023f\u0246\5*\26\2\u0240\u0246\5@!\2\u0241\u0246")
        buf.write("\5> \2\u0242\u0246\5H%\2\u0243\u0246\58\35\2\u0244\u0246")
        buf.write("\5:\36\2\u0245\u023e\3\2\2\2\u0245\u023f\3\2\2\2\u0245")
        buf.write("\u0240\3\2\2\2\u0245\u0241\3\2\2\2\u0245\u0242\3\2\2\2")
        buf.write("\u0245\u0243\3\2\2\2\u0245\u0244\3\2\2\2\u0246E\3\2\2")
        buf.write("\2\u0247\u0248\7<\2\2\u0248\u024f\5\20\t\2\u0249\u024b")
        buf.write("\5,\27\2\u024a\u024c\5\4\3\2\u024b\u024a\3\2\2\2\u024b")
        buf.write("\u024c\3\2\2\2\u024c\u024e\3\2\2\2\u024d\u0249\3\2\2\2")
        buf.write("\u024e\u0251\3\2\2\2\u024f\u024d\3\2\2\2\u024f\u0250\3")
        buf.write("\2\2\2\u0250\u0252\3\2\2\2\u0251\u024f\3\2\2\2\u0252\u0253")
        buf.write("\5\22\n\2\u0253\u0254\7=\2\2\u0254G\3\2\2\2\u0255\u0256")
        buf.write("\7@\2\2\u0256\u025d\5\20\t\2\u0257\u0259\5,\27\2\u0258")
        buf.write("\u025a\5\4\3\2\u0259\u0258\3\2\2\2\u0259\u025a\3\2\2\2")
        buf.write("\u025a\u025c\3\2\2\2\u025b\u0257\3\2\2\2\u025c\u025f\3")
        buf.write("\2\2\2\u025d\u025b\3\2\2\2\u025d\u025e\3\2\2\2\u025e\u0260")
        buf.write("\3\2\2\2\u025f\u025d\3\2\2\2\u0260\u0261\5\22\n\2\u0261")
        buf.write("\u0262\7A\2\2\u0262I\3\2\2\2\u0263\u026a\7<\2\2\u0264")
        buf.write("\u0266\5,\27\2\u0265\u0267\5\4\3\2\u0266\u0265\3\2\2\2")
        buf.write("\u0266\u0267\3\2\2\2\u0267\u0269\3\2\2\2\u0268\u0264\3")
        buf.write("\2\2\2\u0269\u026c\3\2\2\2\u026a\u0268\3\2\2\2\u026a\u026b")
        buf.write("\3\2\2\2\u026b\u026d\3\2\2\2\u026c\u026a\3\2\2\2\u026d")
        buf.write("\u026f\7=\2\2\u026e\u0270\5Z.\2\u026f\u026e\3\2\2\2\u026f")
        buf.write("\u0270\3\2\2\2\u0270\u0286\3\2\2\2\u0271\u0286\5Z.\2\u0272")
        buf.write("\u0273\7:\2\2\u0273\u0274\5\20\t\2\u0274\u0276\5*\26\2")
        buf.write("\u0275\u0277\5B\"\2\u0276\u0275\3\2\2\2\u0276\u0277\3")
        buf.write("\2\2\2\u0277\u0286\3\2\2\2\u0278\u0279\7@\2\2\u0279\u027a")
        buf.write("\5\20\t\2\u027a\u027b\5L\'\2\u027b\u027c\5\22\n\2\u027c")
        buf.write("\u027d\7A\2\2\u027d\u0286\3\2\2\2\u027e\u027f\7>\2\2\u027f")
        buf.write("\u0280\5\20\t\2\u0280\u0281\5L\'\2\u0281\u0282\5\22\n")
        buf.write("\2\u0282\u0283\7?\2\2\u0283\u0286\3\2\2\2\u0284\u0286")
        buf.write("\5\u0088E\2\u0285\u0263\3\2\2\2\u0285\u0271\3\2\2\2\u0285")
        buf.write("\u0272\3\2\2\2\u0285\u0278\3\2\2\2\u0285\u027e\3\2\2\2")
        buf.write("\u0285\u0284\3\2\2\2\u0286K\3\2\2\2\u0287\u028d\5N(\2")
        buf.write("\u0288\u0289\5\4\3\2\u0289\u028a\5N(\2\u028a\u028c\3\2")
        buf.write("\2\2\u028b\u0288\3\2\2\2\u028c\u028f\3\2\2\2\u028d\u028b")
        buf.write("\3\2\2\2\u028d\u028e\3\2\2\2\u028eM\3\2\2\2\u028f\u028d")
        buf.write("\3\2\2\2\u0290\u0291\5\u0088E\2\u0291O\3\2\2\2\u0292\u0294")
        buf.write("\7;\2\2\u0293\u0295\5\u00fe\u0080\2\u0294\u0293\3\2\2")
        buf.write("\2\u0294\u0295\3\2\2\2\u0295\u02ae\3\2\2\2\u0296\u0297")
        buf.write("\7\3\2\2\u0297\u0298\7s\2\2\u0298\u0299\5.\30\2\u0299")
        buf.write("\u029a\7;\2\2\u029a\u029b\5\u00fe\u0080\2\u029b\u02ad")
        buf.write("\3\2\2\2\u029c\u029d\7\3\2\2\u029d\u029e\7X\2\2\u029e")
        buf.write("\u029f\5\u0088E\2\u029f\u02a0\7;\2\2\u02a0\u02a1\5\u00fe")
        buf.write("\u0080\2\u02a1\u02ad\3\2\2\2\u02a2\u02a3\7\3\2\2\u02a3")
        buf.write("\u02a4\7\\\2\2\u02a4\u02a5\5.\30\2\u02a5\u02a6\7;\2\2")
        buf.write("\u02a6\u02a7\5\u00fe\u0080\2\u02a7\u02ad\3\2\2\2\u02a8")
        buf.write("\u02a9\7\3\2\2\u02a9\u02aa\7Y\2\2\u02aa\u02ab\7;\2\2\u02ab")
        buf.write("\u02ad\5\u00fe\u0080\2\u02ac\u0296\3\2\2\2\u02ac\u029c")
        buf.write("\3\2\2\2\u02ac\u02a2\3\2\2\2\u02ac\u02a8\3\2\2\2\u02ad")
        buf.write("\u02b0\3\2\2\2\u02ae\u02ac\3\2\2\2\u02ae\u02af\3\2\2\2")
        buf.write("\u02afQ\3\2\2\2\u02b0\u02ae\3\2\2\2\u02b1\u02b6\7\u0087")
        buf.write("\2\2\u02b2\u02b3\7:\2\2\u02b3\u02b5\7\u0087\2\2\u02b4")
        buf.write("\u02b2\3\2\2\2\u02b5\u02b8\3\2\2\2\u02b6\u02b7\3\2\2\2")
        buf.write("\u02b6\u02b4\3\2\2\2\u02b7S\3\2\2\2\u02b8\u02b6\3\2\2")
        buf.write("\2\u02b9\u02ba\7c\2\2\u02ba\u02bb\5\20\t\2\u02bb\u02cf")
        buf.write("\5\u0088E\2\u02bc\u02bd\5\4\3\2\u02bd\u02be\5\u0088E\2")
        buf.write("\u02be\u02c0\3\2\2\2\u02bf\u02bc\3\2\2\2\u02c0\u02c3\3")
        buf.write("\2\2\2\u02c1\u02bf\3\2\2\2\u02c1\u02c2\3\2\2\2\u02c2\u02d0")
        buf.write("\3\2\2\2\u02c3\u02c1\3\2\2\2\u02c4\u02c5\7\\\2\2\u02c5")
        buf.write("\u02c6\5\20\t\2\u02c6\u02cc\5\u0088E\2\u02c7\u02c8\5\4")
        buf.write("\3\2\u02c8\u02c9\5\u0088E\2\u02c9\u02cb\3\2\2\2\u02ca")
        buf.write("\u02c7\3\2\2\2\u02cb\u02ce\3\2\2\2\u02cc\u02ca\3\2\2\2")
        buf.write("\u02cc\u02cd\3\2\2\2\u02cd\u02d0\3\2\2\2\u02ce\u02cc\3")
        buf.write("\2\2\2\u02cf\u02c1\3\2\2\2\u02cf\u02c4\3\2\2\2\u02d0U")
        buf.write("\3\2\2\2\u02d1\u02d2\t\b\2\2\u02d2W\3\2\2\2\u02d3\u02d4")
        buf.write("\7\37\2\2\u02d4Y\3\2\2\2\u02d5\u02da\5~@\2\u02d6\u02d7")
        buf.write("\7\3\2\2\u02d7\u02d9\5~@\2\u02d8\u02d6\3\2\2\2\u02d9\u02dc")
        buf.write("\3\2\2\2\u02da\u02d8\3\2\2\2\u02da\u02db\3\2\2\2\u02db")
        buf.write("[\3\2\2\2\u02dc\u02da\3\2\2\2\u02dd\u02de\5\u00b4[\2\u02de")
        buf.write("]\3\2\2\2\u02df\u02e0\5\u0088E\2\u02e0\u02e1\5\n\6\2\u02e1")
        buf.write("\u02e2\5\u0088E\2\u02e2\u02eb\5\20\t\2\u02e3\u02e4\7X")
        buf.write("\2\2\u02e4\u02e5\5\u0088E\2\u02e5\u02e6\5\n\6\2\u02e6")
        buf.write("\u02e7\5\u0088E\2\u02e7\u02e8\5\20\t\2\u02e8\u02ea\3\2")
        buf.write("\2\2\u02e9\u02e3\3\2\2\2\u02ea\u02ed\3\2\2\2\u02eb\u02e9")
        buf.write("\3\2\2\2\u02eb\u02ec\3\2\2\2\u02ec\u02ee\3\2\2\2\u02ed")
        buf.write("\u02eb\3\2\2\2\u02ee\u02ef\7Y\2\2\u02ef\u02f0\5\n\6\2")
        buf.write("\u02f0\u02f1\5\u0088E\2\u02f1_\3\2\2\2\u02f2\u02f3\7b")
        buf.write("\2\2\u02f3\u02f4\5^\60\2\u02f4a\3\2\2\2\u02f5\u02f6\7")
        buf.write("\u0083\2\2\u02f6\u02f7\5^\60\2\u02f7c\3\2\2\2\u02f8\u02f9")
        buf.write("\7\17\2\2\u02f9\u0300\5\20\t\2\u02fa\u02fc\5X-\2\u02fb")
        buf.write("\u02fd\5\4\3\2\u02fc\u02fb\3\2\2\2\u02fc\u02fd\3\2\2\2")
        buf.write("\u02fd\u02ff\3\2\2\2\u02fe\u02fa\3\2\2\2\u02ff\u0302\3")
        buf.write("\2\2\2\u0300\u02fe\3\2\2\2\u0300\u0301\3\2\2\2\u0301\u0303")
        buf.write("\3\2\2\2\u0302\u0300\3\2\2\2\u0303\u0304\5\22\n\2\u0304")
        buf.write("\u0305\t\t\2\2\u0305e\3\2\2\2\u0306\u0308\5*\26\2\u0307")
        buf.write("\u0309\5V,\2\u0308\u0307\3\2\2\2\u0308\u0309\3\2\2\2\u0309")
        buf.write("g\3\2\2\2\u030a\u030b\5*\26\2\u030b\u030c\7:\2\2\u030c")
        buf.write("\u030d\5\20\t\2\u030d\u030f\5*\26\2\u030e\u0310\5V,\2")
        buf.write("\u030f\u030e\3\2\2\2\u030f\u0310\3\2\2\2\u0310i\3\2\2")
        buf.write("\2\u0311\u0313\5f\64\2\u0312\u0314\5d\63\2\u0313\u0312")
        buf.write("\3\2\2\2\u0313\u0314\3\2\2\2\u0314k\3\2\2\2\u0315\u0317")
        buf.write("\5h\65\2\u0316\u0318\5d\63\2\u0317\u0316\3\2\2\2\u0317")
        buf.write("\u0318\3\2\2\2\u0318m\3\2\2\2\u0319\u031f\5j\66\2\u031a")
        buf.write("\u031b\5\4\3\2\u031b\u031c\5j\66\2\u031c\u031e\3\2\2\2")
        buf.write("\u031d\u031a\3\2\2\2\u031e\u0321\3\2\2\2\u031f\u031d\3")
        buf.write("\2\2\2\u031f\u0320\3\2\2\2\u0320\u0323\3\2\2\2\u0321\u031f")
        buf.write("\3\2\2\2\u0322\u0324\5\4\3\2\u0323\u0322\3\2\2\2\u0323")
        buf.write("\u0324\3\2\2\2\u0324\u0329\3\2\2\2\u0325\u0326\7;\2\2")
        buf.write("\u0326\u0327\5\20\t\2\u0327\u0328\5\u008eH\2\u0328\u032a")
        buf.write("\3\2\2\2\u0329\u0325\3\2\2\2\u0329\u032a\3\2\2\2\u032a")
        buf.write("\u032f\3\2\2\2\u032b\u032c\7\7\2\2\u032c\u032d\5\20\t")
        buf.write("\2\u032d\u032e\5\u0088E\2\u032e\u0330\3\2\2\2\u032f\u032b")
        buf.write("\3\2\2\2\u032f\u0330\3\2\2\2\u0330o\3\2\2\2\u0331\u0337")
        buf.write("\7\37\2\2\u0332\u0333\5\4\3\2\u0333\u0334\7\37\2\2\u0334")
        buf.write("\u0336\3\2\2\2\u0335\u0332\3\2\2\2\u0336\u0339\3\2\2\2")
        buf.write("\u0337\u0335\3\2\2\2\u0337\u0338\3\2\2\2\u0338\u033b\3")
        buf.write("\2\2\2\u0339\u0337\3\2\2\2\u033a\u033c\5\4\3\2\u033b\u033a")
        buf.write("\3\2\2\2\u033b\u033c\3\2\2\2\u033c\u0341\3\2\2\2\u033d")
        buf.write("\u033e\7;\2\2\u033e\u033f\5\20\t\2\u033f\u0340\5\u008e")
        buf.write("H\2\u0340\u0342\3\2\2\2\u0341\u033d\3\2\2\2\u0341\u0342")
        buf.write("\3\2\2\2\u0342\u0347\3\2\2\2\u0343\u0344\7\7\2\2\u0344")
        buf.write("\u0345\5\20\t\2\u0345\u0346\5\u0088E\2\u0346\u0348\3\2")
        buf.write("\2\2\u0347\u0343\3\2\2\2\u0347\u0348\3\2\2\2\u0348q\3")
        buf.write("\2\2\2\u0349\u034a\7\u0080\2\2\u034a\u034b\7@\2\2\u034b")
        buf.write("\u0354\5\20\t\2\u034c\u0350\5p9\2\u034d\u034e\5\4\3\2")
        buf.write("\u034e\u034f\5\6\4\2\u034f\u0351\3\2\2\2\u0350\u034d\3")
        buf.write("\2\2\2\u0350\u0351\3\2\2\2\u0351\u0353\3\2\2\2\u0352\u034c")
        buf.write("\3\2\2\2\u0353\u0356\3\2\2\2\u0354\u0352\3\2\2\2\u0354")
        buf.write("\u0355\3\2\2\2\u0355\u0357\3\2\2\2\u0356\u0354\3\2\2\2")
        buf.write("\u0357\u0358\5\22\n\2\u0358\u0359\7A\2\2\u0359s\3\2\2")
        buf.write("\2\u035a\u035c\7\u0080\2\2\u035b\u035d\7%\2\2\u035c\u035b")
        buf.write("\3\2\2\2\u035c\u035d\3\2\2\2\u035d\u0367\3\2\2\2\u035e")
        buf.write("\u035f\7\5\2\2\u035f\u0364\5p9\2\u0360\u0361\7\3\2\2\u0361")
        buf.write("\u0363\5p9\2\u0362\u0360\3\2\2\2\u0363\u0366\3\2\2\2\u0364")
        buf.write("\u0362\3\2\2\2\u0364\u0365\3\2\2\2\u0365\u0368\3\2\2\2")
        buf.write("\u0366\u0364\3\2\2\2\u0367\u035e\3\2\2\2\u0367\u0368\3")
        buf.write("\2\2\2\u0368u\3\2\2\2\u0369\u036a\7\u0080\2\2\u036aw\3")
        buf.write("\2\2\2\u036b\u0378\7<\2\2\u036c\u0375\5n8\2\u036d\u036e")
        buf.write("\5\4\3\2\u036e\u036f\7\60\2\2\u036f\u0370\5\6\4\2\u0370")
        buf.write("\u0371\3\2\2\2\u0371\u0372\5n8\2\u0372\u0374\3\2\2\2\u0373")
        buf.write("\u036d\3\2\2\2\u0374\u0377\3\2\2\2\u0375\u0373\3\2\2\2")
        buf.write("\u0375\u0376\3\2\2\2\u0376\u0379\3\2\2\2\u0377\u0375\3")
        buf.write("\2\2\2\u0378\u036c\3\2\2\2\u0378\u0379\3\2\2\2\u0379\u037a")
        buf.write("\3\2\2\2\u037a\u037b\7=\2\2\u037by\3\2\2\2\u037c\u037e")
        buf.write("\5x=\2\u037d\u037c\3\2\2\2\u037d\u037e\3\2\2\2\u037e\u0383")
        buf.write("\3\2\2\2\u037f\u0380\7\21\2\2\u0380\u0381\5\20\t\2\u0381")
        buf.write("\u0382\5\u008eH\2\u0382\u0384\3\2\2\2\u0383\u037f\3\2")
        buf.write("\2\2\u0383\u0384\3\2\2\2\u0384{\3\2\2\2\u0385\u0387\5")
        buf.write("x=\2\u0386\u0385\3\2\2\2\u0386\u0387\3\2\2\2\u0387\u038c")
        buf.write("\3\2\2\2\u0388\u0389\7;\2\2\u0389\u038a\5\20\t\2\u038a")
        buf.write("\u038b\5\u008eH\2\u038b\u038d\3\2\2\2\u038c\u0388\3\2")
        buf.write("\2\2\u038c\u038d\3\2\2\2\u038d}\3\2\2\2\u038e\u038f\7")
        buf.write("W\2\2\u038f\u0391\5z>\2\u0390\u0392\5d\63\2\u0391\u0390")
        buf.write("\3\2\2\2\u0391\u0392\3\2\2\2\u0392\u0393\3\2\2\2\u0393")
        buf.write("\u0394\5\n\6\2\u0394\u0395\5\u00fe\u0080\2\u0395\177\3")
        buf.write("\2\2\2\u0396\u0397\7v\2\2\u0397\u0399\5|?\2\u0398\u039a")
        buf.write("\5d\63\2\u0399\u0398\3\2\2\2\u0399\u039a\3\2\2\2\u039a")
        buf.write("\u03a0\3\2\2\2\u039b\u039d\7\7\2\2\u039c\u039e\7%\2\2")
        buf.write("\u039d\u039c\3\2\2\2\u039d\u039e\3\2\2\2\u039e\u039f\3")
        buf.write("\2\2\2\u039f\u03a1\5\u00fe\u0080\2\u03a0\u039b\3\2\2\2")
        buf.write("\u03a0\u03a1\3\2\2\2\u03a1\u0081\3\2\2\2\u03a2\u03a3\7")
        buf.write("U\2\2\u03a3\u03a4\5\20\t\2\u03a4\u03a5\5\u008eH\2\u03a5")
        buf.write("\u0083\3\2\2\2\u03a6\u03a7\7_\2\2\u03a7\u03ad\5j\66\2")
        buf.write("\u03a8\u03a9\5\4\3\2\u03a9\u03aa\5j\66\2\u03aa\u03ac\3")
        buf.write("\2\2\2\u03ab\u03a8\3\2\2\2\u03ac\u03af\3\2\2\2\u03ad\u03ab")
        buf.write("\3\2\2\2\u03ad\u03ae\3\2\2\2\u03ae\u03b0\3\2\2\2\u03af")
        buf.write("\u03ad\3\2\2\2\u03b0\u03b1\7d\2\2\u03b1\u03b2\5\u0088")
        buf.write("E\2\u03b2\u03b3\5\n\6\2\u03b3\u03b4\5\u00fe\u0080\2\u03b4")
        buf.write("\u0085\3\2\2\2\u03b5\u03b6\5\u0084C\2\u03b6\u0087\3\2")
        buf.write("\2\2\u03b7\u03be\5\u00be`\2\u03b8\u03be\5`\61\2\u03b9")
        buf.write("\u03be\5b\62\2\u03ba\u03be\5\\/\2\u03bb\u03be\5\u0086")
        buf.write("D\2\u03bc\u03be\5\u00b8]\2\u03bd\u03b7\3\2\2\2\u03bd\u03b8")
        buf.write("\3\2\2\2\u03bd\u03b9\3\2\2\2\u03bd\u03ba\3\2\2\2\u03bd")
        buf.write("\u03bb\3\2\2\2\u03bd\u03bc\3\2\2\2\u03be\u03c1\3\2\2\2")
        buf.write("\u03bf\u03c1\5\24\13\2\u03c0\u03bd\3\2\2\2\u03c0\u03bf")
        buf.write("\3\2\2\2\u03c1\u0089\3\2\2\2\u03c2\u03c3\t\n\2\2\u03c3")
        buf.write("\u008b\3\2\2\2\u03c4\u03c5\5\u008aF\2\u03c5\u03c6\5\u008e")
        buf.write("H\2\u03c6\u03d7\3\2\2\2\u03c7\u03c9\5\16\b\2\u03c8\u03c7")
        buf.write("\3\2\2\2\u03c9\u03cc\3\2\2\2\u03ca\u03c8\3\2\2\2\u03ca")
        buf.write("\u03cb\3\2\2\2\u03cb\u03cd\3\2\2\2\u03cc\u03ca\3\2\2\2")
        buf.write("\u03cd\u03d1\5D#\2\u03ce\u03d0\5J&\2\u03cf\u03ce\3\2\2")
        buf.write("\2\u03d0\u03d3\3\2\2\2\u03d1\u03cf\3\2\2\2\u03d1\u03d2")
        buf.write("\3\2\2\2\u03d2\u03d7\3\2\2\2\u03d3\u03d1\3\2\2\2\u03d4")
        buf.write("\u03d5\7J\2\2\u03d5\u03d7\5\u008cG\2\u03d6\u03c4\3\2\2")
        buf.write("\2\u03d6\u03ca\3\2\2\2\u03d6\u03d4\3\2\2\2\u03d7\u008d")
        buf.write("\3\2\2\2\u03d8\u03d9\5\24\13\2\u03d9\u008f\3\2\2\2\u03da")
        buf.write("\u03de\5\24\13\2\u03db\u03dc\7O\2\2\u03dc\u03de\5\u00ea")
        buf.write("v\2\u03dd\u03da\3\2\2\2\u03dd\u03db\3\2\2\2\u03de\u0091")
        buf.write("\3\2\2\2\u03df\u03e1\7;\2\2\u03e0\u03e2\5\u00fe\u0080")
        buf.write("\2\u03e1\u03e0\3\2\2\2\u03e1\u03e2\3\2\2\2\u03e2\u03fd")
        buf.write("\3\2\2\2\u03e3\u03e4\7\3\2\2\u03e4\u03fc\5~@\2\u03e5\u03e6")
        buf.write("\7\3\2\2\u03e6\u03e7\7s\2\2\u03e7\u03e8\5.\30\2\u03e8")
        buf.write("\u03e9\7;\2\2\u03e9\u03ea\5\u00fe\u0080\2\u03ea\u03fc")
        buf.write("\3\2\2\2\u03eb\u03ec\7\3\2\2\u03ec\u03ed\7X\2\2\u03ed")
        buf.write("\u03ee\5\u0088E\2\u03ee\u03ef\7;\2\2\u03ef\u03f0\5\u00fe")
        buf.write("\u0080\2\u03f0\u03fc\3\2\2\2\u03f1\u03f2\7\3\2\2\u03f2")
        buf.write("\u03f3\7\\\2\2\u03f3\u03f4\5.\30\2\u03f4\u03f5\7;\2\2")
        buf.write("\u03f5\u03f6\5\u00fe\u0080\2\u03f6\u03fc\3\2\2\2\u03f7")
        buf.write("\u03f8\7\3\2\2\u03f8\u03f9\7Y\2\2\u03f9\u03fa\7;\2\2\u03fa")
        buf.write("\u03fc\5\u00fe\u0080\2\u03fb\u03e3\3\2\2\2\u03fb\u03e5")
        buf.write("\3\2\2\2\u03fb\u03eb\3\2\2\2\u03fb\u03f1\3\2\2\2\u03fb")
        buf.write("\u03f7\3\2\2\2\u03fc\u03ff\3\2\2\2\u03fd\u03fb\3\2\2\2")
        buf.write("\u03fd\u03fe\3\2\2\2\u03fe\u0093\3\2\2\2\u03ff\u03fd\3")
        buf.write("\2\2\2\u0400\u0415\5\24\13\2\u0401\u0402\7\7\2\2\u0402")
        buf.write("\u0403\5\20\t\2\u0403\u0405\5\u0088E\2\u0404\u0406\5\u00f0")
        buf.write("y\2\u0405\u0404\3\2\2\2\u0405\u0406\3\2\2\2\u0406\u0416")
        buf.write("\3\2\2\2\u0407\u040d\5\u0088E\2\u0408\u0409\5\4\3\2\u0409")
        buf.write("\u040a\5\u0088E\2\u040a\u040c\3\2\2\2\u040b\u0408\3\2")
        buf.write("\2\2\u040c\u040f\3\2\2\2\u040d\u040b\3\2\2\2\u040d\u040e")
        buf.write("\3\2\2\2\u040e\u0410\3\2\2\2\u040f\u040d\3\2\2\2\u0410")
        buf.write("\u0411\5Z.\2\u0411\u0414\3\2\2\2\u0412\u0414\5P)\2\u0413")
        buf.write("\u0407\3\2\2\2\u0413\u0412\3\2\2\2\u0414\u0416\3\2\2\2")
        buf.write("\u0415\u0401\3\2\2\2\u0415\u0413\3\2\2\2\u0415\u0416\3")
        buf.write("\2\2\2\u0416\u0095\3\2\2\2\u0417\u0418\7c\2\2\u0418\u0419")
        buf.write("\5\20\t\2\u0419\u042d\5\u0088E\2\u041a\u041b\5\4\3\2\u041b")
        buf.write("\u041c\5\u0088E\2\u041c\u041e\3\2\2\2\u041d\u041a\3\2")
        buf.write("\2\2\u041e\u0421\3\2\2\2\u041f\u041d\3\2\2\2\u041f\u0420")
        buf.write("\3\2\2\2\u0420\u042e\3\2\2\2\u0421\u041f\3\2\2\2\u0422")
        buf.write("\u0423\7\\\2\2\u0423\u0424\5\20\t\2\u0424\u042a\5\u0088")
        buf.write("E\2\u0425\u0426\5\4\3\2\u0426\u0427\5\u0088E\2\u0427\u0429")
        buf.write("\3\2\2\2\u0428\u0425\3\2\2\2\u0429\u042c\3\2\2\2\u042a")
        buf.write("\u0428\3\2\2\2\u042a\u042b\3\2\2\2\u042b\u042e\3\2\2\2")
        buf.write("\u042c\u042a\3\2\2\2\u042d\u041f\3\2\2\2\u042d\u0422\3")
        buf.write("\2\2\2\u042e\u0097\3\2\2\2\u042f\u0430\7e\2\2\u0430\u0431")
        buf.write("\5\20\t\2\u0431\u0437\5\u0088E\2\u0432\u0433\5\4\3\2\u0433")
        buf.write("\u0434\5\u0088E\2\u0434\u0436\3\2\2\2\u0435\u0432\3\2")
        buf.write("\2\2\u0436\u0439\3\2\2\2\u0437\u0435\3\2\2\2\u0437\u0438")
        buf.write("\3\2\2\2\u0438\u0099\3\2\2\2\u0439\u0437\3\2\2\2\u043a")
        buf.write("\u043b\7`\2\2\u043b\u043c\5R*\2\u043c\u043d\7c\2\2\u043d")
        buf.write("\u043e\5\20\t\2\u043e\u0444\5\u0088E\2\u043f\u0440\5\4")
        buf.write("\3\2\u0440\u0441\5\u0088E\2\u0441\u0443\3\2\2\2\u0442")
        buf.write("\u043f\3\2\2\2\u0443\u0446\3\2\2\2\u0444\u0442\3\2\2\2")
        buf.write("\u0444\u0445\3\2\2\2\u0445\u009b\3\2\2\2\u0446\u0444\3")
        buf.write("\2\2\2\u0447\u0448\7z\2\2\u0448\u044a\5\20\t\2\u0449\u044b")
        buf.write("\5\u0088E\2\u044a\u0449\3\2\2\2\u044a\u044b\3\2\2\2\u044b")
        buf.write("\u009d\3\2\2\2\u044c\u044d\7x\2\2\u044d\u044f\5\20\t\2")
        buf.write("\u044e\u0450\5\u0088E\2\u044f\u044e\3\2\2\2\u044f\u0450")
        buf.write("\3\2\2\2\u0450\u009f\3\2\2\2\u0451\u0452\7\u0086\2\2\u0452")
        buf.write("\u0454\5\20\t\2\u0453\u0455\5\u0088E\2\u0454\u0453\3\2")
        buf.write("\2\2\u0454\u0455\3\2\2\2\u0455\u00a1\3\2\2\2\u0456\u0457")
        buf.write("\7T\2\2\u0457\u0459\5\20\t\2\u0458\u045a\5\u0088E\2\u0459")
        buf.write("\u0458\3\2\2\2\u0459\u045a\3\2\2\2\u045a\u00a3\3\2\2\2")
        buf.write("\u045b\u045c\7L\2\2\u045c\u045e\5\20\t\2\u045d\u045f\5")
        buf.write("\u0088E\2\u045e\u045d\3\2\2\2\u045e\u045f\3\2\2\2\u045f")
        buf.write("\u00a5\3\2\2\2\u0460\u0461\7L\2\2\u0461\u0463\5\20\t\2")
        buf.write("\u0462\u0464\5\u0088E\2\u0463\u0462\3\2\2\2\u0463\u0464")
        buf.write("\3\2\2\2\u0464\u00a7\3\2\2\2\u0465\u0466\5\u0088E\2\u0466")
        buf.write("\u0467\5\n\6\2\u0467\u0469\5\u00fe\u0080\2\u0468\u046a")
        buf.write("\7%\2\2\u0469\u0468\3\2\2\2\u0469\u046a\3\2\2\2\u046a")
        buf.write("\u0473\3\2\2\2\u046b\u046c\7\3\2\2\u046c\u046d\7X\2\2")
        buf.write("\u046d\u046e\5\u0088E\2\u046e\u046f\5\n\6\2\u046f\u0470")
        buf.write("\5\u00fe\u0080\2\u0470\u0472\3\2\2\2\u0471\u046b\3\2\2")
        buf.write("\2\u0472\u0475\3\2\2\2\u0473\u0471\3\2\2\2\u0473\u0474")
        buf.write("\3\2\2\2\u0474\u047b\3\2\2\2\u0475\u0473\3\2\2\2\u0476")
        buf.write("\u0477\7\3\2\2\u0477\u0478\7Y\2\2\u0478\u0479\5\n\6\2")
        buf.write("\u0479\u047a\5\u00fe\u0080\2\u047a\u047c\3\2\2\2\u047b")
        buf.write("\u0476\3\2\2\2\u047b\u047c\3\2\2\2\u047c\u00a9\3\2\2\2")
        buf.write("\u047d\u047e\7b\2\2\u047e\u047f\5\u00a8U\2\u047f\u00ab")
        buf.write("\3\2\2\2\u0480\u0481\7\u0083\2\2\u0481\u0482\5\u00a8U")
        buf.write("\2\u0482\u00ad\3\2\2\2\u0483\u0484\7\u0084\2\2\u0484\u0485")
        buf.write("\5\u0088E\2\u0485\u0486\5\n\6\2\u0486\u0487\5\u00fe\u0080")
        buf.write("\2\u0487\u00af\3\2\2\2\u0488\u0489\7s\2\2\u0489\u048a")
        buf.write("\5.\30\2\u048a\u048b\5\n\6\2\u048b\u048c\5\u00fe\u0080")
        buf.write("\2\u048c\u00b1\3\2\2\2\u048d\u0492\5\u00b0Y\2\u048e\u048f")
        buf.write("\7\3\2\2\u048f\u0491\5\u00b0Y\2\u0490\u048e\3\2\2\2\u0491")
        buf.write("\u0494\3\2\2\2\u0492\u0490\3\2\2\2\u0492\u0493\3\2\2\2")
        buf.write("\u0493\u049d\3\2\2\2\u0494\u0492\3\2\2\2\u0495\u0496\7")
        buf.write("\3\2\2\u0496\u0497\7X\2\2\u0497\u0498\5\u0088E\2\u0498")
        buf.write("\u0499\5\n\6\2\u0499\u049a\5\u00fe\u0080\2\u049a\u049c")
        buf.write("\3\2\2\2\u049b\u0495\3\2\2\2\u049c\u049f\3\2\2\2\u049d")
        buf.write("\u049b\3\2\2\2\u049d\u049e\3\2\2\2\u049e\u04a5\3\2\2\2")
        buf.write("\u049f\u049d\3\2\2\2\u04a0\u04a1\7\3\2\2\u04a1\u04a2\7")
        buf.write("Y\2\2\u04a2\u04a3\5\n\6\2\u04a3\u04a4\5\u00fe\u0080\2")
        buf.write("\u04a4\u04a6\3\2\2\2\u04a5\u04a0\3\2\2\2\u04a5\u04a6\3")
        buf.write("\2\2\2\u04a6\u00b3\3\2\2\2\u04a7\u04a8\7M\2\2\u04a8\u04aa")
        buf.write("\5\u0088E\2\u04a9\u04ab\7;\2\2\u04aa\u04a9\3\2\2\2\u04aa")
        buf.write("\u04ab\3\2\2\2\u04ab\u04ad\3\2\2\2\u04ac\u04ae\7%\2\2")
        buf.write("\u04ad\u04ac\3\2\2\2\u04ad\u04ae\3\2\2\2\u04ae\u04b5\3")
        buf.write("\2\2\2\u04af\u04b0\7\5\2\2\u04b0\u04b1\5\u00b2Z\2\u04b1")
        buf.write("\u04b2\7\23\2\2\u04b2\u04b6\3\2\2\2\u04b3\u04b4\7\3\2")
        buf.write("\2\u04b4\u04b6\5\u00b2Z\2\u04b5\u04af\3\2\2\2\u04b5\u04b3")
        buf.write("\3\2\2\2\u04b6\u00b5\3\2\2\2\u04b7\u04b8\7\177\2\2\u04b8")
        buf.write("\u04b9\5\n\6\2\u04b9\u04c4\5\u00fe\u0080\2\u04ba\u04bc")
        buf.write("\7\3\2\2\u04bb\u04ba\3\2\2\2\u04bb\u04bc\3\2\2\2\u04bc")
        buf.write("\u04bd\3\2\2\2\u04bd\u04be\7\\\2\2\u04be\u04bf\5.\30\2")
        buf.write("\u04bf\u04c0\5\n\6\2\u04c0\u04c1\5\u00fe\u0080\2\u04c1")
        buf.write("\u04c3\3\2\2\2\u04c2\u04bb\3\2\2\2\u04c3\u04c6\3\2\2\2")
        buf.write("\u04c4\u04c2\3\2\2\2\u04c4\u04c5\3\2\2\2\u04c5\u04ce\3")
        buf.write("\2\2\2\u04c6\u04c4\3\2\2\2\u04c7\u04c9\7\3\2\2\u04c8\u04c7")
        buf.write("\3\2\2\2\u04c8\u04c9\3\2\2\2\u04c9\u04ca\3\2\2\2\u04ca")
        buf.write("\u04cb\7^\2\2\u04cb\u04cc\5\n\6\2\u04cc\u04cd\5\u00fe")
        buf.write("\u0080\2\u04cd\u04cf\3\2\2\2\u04ce\u04c8\3\2\2\2\u04ce")
        buf.write("\u04cf\3\2\2\2\u04cf\u00b7\3\2\2\2\u04d0\u04d1\7\177\2")
        buf.write("\2\u04d1\u04d2\5\n\6\2\u04d2\u04db\5\u00fe\u0080\2\u04d3")
        buf.write("\u04d4\5\20\t\2\u04d4\u04d5\7\\\2\2\u04d5\u04d6\5.\30")
        buf.write("\2\u04d6\u04d7\5\n\6\2\u04d7\u04d8\5\u00fe\u0080\2\u04d8")
        buf.write("\u04da\3\2\2\2\u04d9\u04d3\3\2\2\2\u04da\u04dd\3\2\2\2")
        buf.write("\u04db\u04d9\3\2\2\2\u04db\u04dc\3\2\2\2\u04dc\u04e3\3")
        buf.write("\2\2\2\u04dd\u04db\3\2\2\2\u04de\u04df\5\20\t\2\u04df")
        buf.write("\u04e0\7^\2\2\u04e0\u04e1\5\n\6\2\u04e1\u04e2\5\u00fe")
        buf.write("\u0080\2\u04e2\u04e4\3\2\2\2\u04e3\u04de\3\2\2\2\u04e3")
        buf.write("\u04e4\3\2\2\2\u04e4\u00b9\3\2\2\2\u04e5\u04e6\7\\\2\2")
        buf.write("\u04e6\u04e7\5\n\6\2\u04e7\u04e8\5\u00fe\u0080\2\u04e8")
        buf.write("\u00bb\3\2\2\2\u04e9\u04eb\7K\2\2\u04ea\u04ec\5*\26\2")
        buf.write("\u04eb\u04ea\3\2\2\2\u04eb\u04ec\3\2\2\2\u04ec\u04ed\3")
        buf.write("\2\2\2\u04ed\u04ee\5\n\6\2\u04ee\u04ef\5\u00fe\u0080\2")
        buf.write("\u04ef\u00bd\3\2\2\2\u04f0\u04f2\7K\2\2\u04f1\u04f3\5")
        buf.write("*\26\2\u04f2\u04f1\3\2\2\2\u04f2\u04f3\3\2\2\2\u04f3\u04f4")
        buf.write("\3\2\2\2\u04f4\u04f5\5\n\6\2\u04f5\u04f6\5\u00fe\u0080")
        buf.write("\2\u04f6\u00bf\3\2\2\2\u04f7\u04f8\7}\2\2\u04f8\u04f9")
        buf.write("\5\n\6\2\u04f9\u04fa\5\u00fe\u0080\2\u04fa\u00c1\3\2\2")
        buf.write("\2\u04fb\u04fc\7S\2\2\u04fc\u04fd\5\n\6\2\u04fd\u04fe")
        buf.write("\5\u00fe\u0080\2\u04fe\u00c3\3\2\2\2\u04ff\u0501\7I\2")
        buf.write("\2\u0500\u0502\5d\63\2\u0501\u0500\3\2\2\2\u0501\u0502")
        buf.write("\3\2\2\2\u0502\u0503\3\2\2\2\u0503\u0504\t\13\2\2\u0504")
        buf.write("\u00c5\3\2\2\2\u0505\u050b\5*\26\2\u0506\u0507\5\4\3\2")
        buf.write("\u0507\u0508\5*\26\2\u0508\u050a\3\2\2\2\u0509\u0506\3")
        buf.write("\2\2\2\u050a\u050d\3\2\2\2\u050b\u0509\3\2\2\2\u050b\u050c")
        buf.write("\3\2\2\2\u050c\u0511\3\2\2\2\u050d\u050b\3\2\2\2\u050e")
        buf.write("\u050f\5\b\5\2\u050f\u0510\5\u0088E\2\u0510\u0512\3\2")
        buf.write("\2\2\u0511\u050e\3\2\2\2\u0511\u0512\3\2\2\2\u0512\u0517")
        buf.write("\3\2\2\2\u0513\u0514\7\7\2\2\u0514\u0515\5\20\t\2\u0515")
        buf.write("\u0516\5\u0088E\2\u0516\u0518\3\2\2\2\u0517\u0513\3\2")
        buf.write("\2\2\u0517\u0518\3\2\2\2\u0518\u00c7\3\2\2\2\u0519\u051a")
        buf.write("\7@\2\2\u051a\u0527\5\20\t\2\u051b\u0524\5\u00c6d\2\u051c")
        buf.write("\u051f\5\4\3\2\u051d\u051f\5\6\4\2\u051e\u051c\3\2\2\2")
        buf.write("\u051e\u051d\3\2\2\2\u051f\u0520\3\2\2\2\u0520\u0521\5")
        buf.write("\u00c6d\2\u0521\u0523\3\2\2\2\u0522\u051e\3\2\2\2\u0523")
        buf.write("\u0526\3\2\2\2\u0524\u0522\3\2\2\2\u0524\u0525\3\2\2\2")
        buf.write("\u0525\u0528\3\2\2\2\u0526\u0524\3\2\2\2\u0527\u051b\3")
        buf.write("\2\2\2\u0527\u0528\3\2\2\2\u0528\u0529\3\2\2\2\u0529\u052a")
        buf.write("\5\22\n\2\u052a\u052b\7A\2\2\u052b\u00c9\3\2\2\2\u052c")
        buf.write("\u052d\7>\2\2\u052d\u052e\5\u00fe\u0080\2\u052e\u052f")
        buf.write("\7?\2\2\u052f\u00cb\3\2\2\2\u0530\u0531\7\5\2\2\u0531")
        buf.write("\u0533\7%\2\2\u0532\u0530\3\2\2\2\u0532\u0533\3\2\2\2")
        buf.write("\u0533\u0538\3\2\2\2\u0534\u0536\7%\2\2\u0535\u0534\3")
        buf.write("\2\2\2\u0535\u0536\3\2\2\2\u0536\u0538\3\2\2\2\u0537\u0532")
        buf.write("\3\2\2\2\u0537\u0535\3\2\2\2\u0538\u00cd\3\2\2\2\u0539")
        buf.write("\u053a\5\20\t\2\u053a\u053c\5f\64\2\u053b\u053d\5\u00ca")
        buf.write("f\2\u053c\u053b\3\2\2\2\u053c\u053d\3\2\2\2\u053d\u053f")
        buf.write("\3\2\2\2\u053e\u0540\5\u00c8e\2\u053f\u053e\3\2\2\2\u053f")
        buf.write("\u0540\3\2\2\2\u0540\u0541\3\2\2\2\u0541\u0543\5|?\2\u0542")
        buf.write("\u0544\5d\63\2\u0543\u0542\3\2\2\2\u0543\u0544\3\2\2\2")
        buf.write("\u0544\u054a\3\2\2\2\u0545\u0547\7\7\2\2\u0546\u0548\7")
        buf.write("%\2\2\u0547\u0546\3\2\2\2\u0547\u0548\3\2\2\2\u0548\u0549")
        buf.write("\3\2\2\2\u0549\u054b\5\u00fe\u0080\2\u054a\u0545\3\2\2")
        buf.write("\2\u054a\u054b\3\2\2\2\u054b\u054c\3\2\2\2\u054c\u054d")
        buf.write("\5\u00ccg\2\u054d\u00cf\3\2\2\2\u054e\u054f\7%\2\2\u054f")
        buf.write("\u00d1\3\2\2\2\u0550\u0552\7%\2\2\u0551\u0550\3\2\2\2")
        buf.write("\u0551\u0552\3\2\2\2\u0552\u0553\3\2\2\2\u0553\u0565\5")
        buf.write("\u00ecw\2\u0554\u0557\7\5\2\2\u0555\u0558\5\u00ecw\2\u0556")
        buf.write("\u0558\7%\2\2\u0557\u0555\3\2\2\2\u0557\u0556\3\2\2\2")
        buf.write("\u0558\u0560\3\2\2\2\u0559\u055c\7\3\2\2\u055a\u055d\5")
        buf.write("\u00ecw\2\u055b\u055d\7%\2\2\u055c\u055a\3\2\2\2\u055c")
        buf.write("\u055b\3\2\2\2\u055d\u055f\3\2\2\2\u055e\u0559\3\2\2\2")
        buf.write("\u055f\u0562\3\2\2\2\u0560\u055e\3\2\2\2\u0560\u0561\3")
        buf.write("\2\2\2\u0561\u0563\3\2\2\2\u0562\u0560\3\2\2\2\u0563\u0565")
        buf.write("\7\23\2\2\u0564\u0551\3\2\2\2\u0564\u0554\3\2\2\2\u0565")
        buf.write("\u00d3\3\2\2\2\u0566\u0568\7%\2\2\u0567\u0566\3\2\2\2")
        buf.write("\u0567\u0568\3\2\2\2\u0568\u0569\3\2\2\2\u0569\u057b\5")
        buf.write("\u00d8m\2\u056a\u056d\7\5\2\2\u056b\u056e\5\u00d8m\2\u056c")
        buf.write("\u056e\7%\2\2\u056d\u056b\3\2\2\2\u056d\u056c\3\2\2\2")
        buf.write("\u056e\u0576\3\2\2\2\u056f\u0572\7\3\2\2\u0570\u0573\5")
        buf.write("\u00d8m\2\u0571\u0573\7%\2\2\u0572\u0570\3\2\2\2\u0572")
        buf.write("\u0571\3\2\2\2\u0573\u0575\3\2\2\2\u0574\u056f\3\2\2\2")
        buf.write("\u0575\u0578\3\2\2\2\u0576\u0574\3\2\2\2\u0576\u0577\3")
        buf.write("\2\2\2\u0577\u0579\3\2\2\2\u0578\u0576\3\2\2\2\u0579\u057b")
        buf.write("\7\23\2\2\u057a\u0567\3\2\2\2\u057a\u056a\3\2\2\2\u057b")
        buf.write("\u00d5\3\2\2\2\u057c\u057e\7%\2\2\u057d\u057c\3\2\2\2")
        buf.write("\u057d\u057e\3\2\2\2\u057e\u057f\3\2\2\2\u057f\u0591\5")
        buf.write("\u00f2z\2\u0580\u0583\7\5\2\2\u0581\u0584\5\u00f2z\2\u0582")
        buf.write("\u0584\7%\2\2\u0583\u0581\3\2\2\2\u0583\u0582\3\2\2\2")
        buf.write("\u0584\u058c\3\2\2\2\u0585\u0588\7\3\2\2\u0586\u0589\5")
        buf.write("\u00f2z\2\u0587\u0589\7%\2\2\u0588\u0586\3\2\2\2\u0588")
        buf.write("\u0587\3\2\2\2\u0589\u058b\3\2\2\2\u058a\u0585\3\2\2\2")
        buf.write("\u058b\u058e\3\2\2\2\u058c\u058a\3\2\2\2\u058c\u058d\3")
        buf.write("\2\2\2\u058d\u058f\3\2\2\2\u058e\u058c\3\2\2\2\u058f\u0591")
        buf.write("\7\23\2\2\u0590\u057d\3\2\2\2\u0590\u0580\3\2\2\2\u0591")
        buf.write("\u00d7\3\2\2\2\u0592\u0596\5j\66\2\u0593\u0594\5\b\5\2")
        buf.write("\u0594\u0595\5\u008eH\2\u0595\u0597\3\2\2\2\u0596\u0593")
        buf.write("\3\2\2\2\u0596\u0597\3\2\2\2\u0597\u0598\3\2\2\2\u0598")
        buf.write("\u0599\7\7\2\2\u0599\u059a\5\20\t\2\u059a\u059b\5\u0088")
        buf.write("E\2\u059b\u059c\5\u00ccg\2\u059c\u00d9\3\2\2\2\u059d\u059e")
        buf.write("\7[\2\2\u059e\u05ac\5\20\t\2\u059f\u05a0\5*\26\2\u05a0")
        buf.write("\u05a7\5\20\t\2\u05a1\u05a2\7\7\2\2\u05a2\u05a3\5\20\t")
        buf.write("\2\u05a3\u05a5\5\u0088E\2\u05a4\u05a6\7%\2\2\u05a5\u05a4")
        buf.write("\3\2\2\2\u05a5\u05a6\3\2\2\2\u05a6\u05a8\3\2\2\2\u05a7")
        buf.write("\u05a1\3\2\2\2\u05a7\u05a8\3\2\2\2\u05a8\u05aa\3\2\2\2")
        buf.write("\u05a9\u05ab\5\4\3\2\u05aa\u05a9\3\2\2\2\u05aa\u05ab\3")
        buf.write("\2\2\2\u05ab\u05ad\3\2\2\2\u05ac\u059f\3\2\2\2\u05ad\u05ae")
        buf.write("\3\2\2\2\u05ae\u05ac\3\2\2\2\u05ae\u05af\3\2\2\2\u05af")
        buf.write("\u00db\3\2\2\2\u05b0\u05b1\7\u0083\2\2\u05b1\u05b2\5\u0088")
        buf.write("E\2\u05b2\u05b3\5\n\6\2\u05b3\u05b5\5\u00e4s\2\u05b4\u05b6")
        buf.write("\7%\2\2\u05b5\u05b4\3\2\2\2\u05b5\u05b6\3\2\2\2\u05b6")
        buf.write("\u05c0\3\2\2\2\u05b7\u05b8\7X\2\2\u05b8\u05b9\5\u0088")
        buf.write("E\2\u05b9\u05ba\5\n\6\2\u05ba\u05bc\5\u00e4s\2\u05bb\u05bd")
        buf.write("\7%\2\2\u05bc\u05bb\3\2\2\2\u05bc\u05bd\3\2\2\2\u05bd")
        buf.write("\u05bf\3\2\2\2\u05be\u05b7\3\2\2\2\u05bf\u05c2\3\2\2\2")
        buf.write("\u05c0\u05be\3\2\2\2\u05c0\u05c1\3\2\2\2\u05c1\u05c9\3")
        buf.write("\2\2\2\u05c2\u05c0\3\2\2\2\u05c3\u05c4\7Y\2\2\u05c4\u05c5")
        buf.write("\5\n\6\2\u05c5\u05c7\5\u00e4s\2\u05c6\u05c8\7%\2\2\u05c7")
        buf.write("\u05c6\3\2\2\2\u05c7\u05c8\3\2\2\2\u05c8\u05ca\3\2\2\2")
        buf.write("\u05c9\u05c3\3\2\2\2\u05c9\u05ca\3\2\2\2\u05ca\u00dd\3")
        buf.write("\2\2\2\u05cb\u05cc\7s\2\2\u05cc\u05cd\5.\30\2\u05cd\u05ce")
        buf.write("\5\n\6\2\u05ce\u05cf\5\u00e4s\2\u05cf\u00df\3\2\2\2\u05d0")
        buf.write("\u05d5\5\u00dep\2\u05d1\u05d2\7\3\2\2\u05d2\u05d4\5\u00de")
        buf.write("p\2\u05d3\u05d1\3\2\2\2\u05d4\u05d7\3\2\2\2\u05d5\u05d3")
        buf.write("\3\2\2\2\u05d5\u05d6\3\2\2\2\u05d6\u05e0\3\2\2\2\u05d7")
        buf.write("\u05d5\3\2\2\2\u05d8\u05d9\7\3\2\2\u05d9\u05da\7X\2\2")
        buf.write("\u05da\u05db\5\u0088E\2\u05db\u05dc\5\n\6\2\u05dc\u05dd")
        buf.write("\5\u00e4s\2\u05dd\u05df\3\2\2\2\u05de\u05d8\3\2\2\2\u05df")
        buf.write("\u05e2\3\2\2\2\u05e0\u05de\3\2\2\2\u05e0\u05e1\3\2\2\2")
        buf.write("\u05e1\u05e8\3\2\2\2\u05e2\u05e0\3\2\2\2\u05e3\u05e4\7")
        buf.write("\3\2\2\u05e4\u05e5\7Y\2\2\u05e5\u05e6\5\n\6\2\u05e6\u05e7")
        buf.write("\5\u00e4s\2\u05e7\u05e9\3\2\2\2\u05e8\u05e3\3\2\2\2\u05e8")
        buf.write("\u05e9\3\2\2\2\u05e9\u00e1\3\2\2\2\u05ea\u05eb\7M\2\2")
        buf.write("\u05eb\u05ec\5j\66\2\u05ec\u05ed\7;\2\2\u05ed\u05ef\5")
        buf.write("\u008eH\2\u05ee\u05f0\7;\2\2\u05ef\u05ee\3\2\2\2\u05ef")
        buf.write("\u05f0\3\2\2\2\u05f0\u05f2\3\2\2\2\u05f1\u05f3\7%\2\2")
        buf.write("\u05f2\u05f1\3\2\2\2\u05f2\u05f3\3\2\2\2\u05f3\u05fa\3")
        buf.write("\2\2\2\u05f4\u05f5\7\5\2\2\u05f5\u05f6\5\u00e0q\2\u05f6")
        buf.write("\u05f7\7\23\2\2\u05f7\u05fb\3\2\2\2\u05f8\u05f9\7\3\2")
        buf.write("\2\u05f9\u05fb\5\u00e0q\2\u05fa\u05f4\3\2\2\2\u05fa\u05f8")
        buf.write("\3\2\2\2\u05fb\u00e3\3\2\2\2\u05fc\u05fd\7\5\2\2\u05fd")
        buf.write("\u0602\5\u00e4s\2\u05fe\u05ff\7\3\2\2\u05ff\u0601\5\u00e4")
        buf.write("s\2\u0600\u05fe\3\2\2\2\u0601\u0604\3\2\2\2\u0602\u0600")
        buf.write("\3\2\2\2\u0602\u0603\3\2\2\2\u0603\u0605\3\2\2\2\u0604")
        buf.write("\u0602\3\2\2\2\u0605\u0606\7\23\2\2\u0606\u060d\3\2\2")
        buf.write("\2\u0607\u060d\5\u00dco\2\u0608\u060d\5\u00e2r\2\u0609")
        buf.write("\u060d\7o\2\2\u060a\u060d\7T\2\2\u060b\u060d\5n8\2\u060c")
        buf.write("\u05fc\3\2\2\2\u060c\u0607\3\2\2\2\u060c\u0608\3\2\2\2")
        buf.write("\u060c\u0609\3\2\2\2\u060c\u060a\3\2\2\2\u060c\u060b\3")
        buf.write("\2\2\2\u060d\u00e5\3\2\2\2\u060e\u0610\7r\2\2\u060f\u0611")
        buf.write("\5d\63\2\u0610\u060f\3\2\2\2\u0610\u0611\3\2\2\2\u0611")
        buf.write("\u0614\3\2\2\2\u0612\u0613\7s\2\2\u0613\u0615\5\u008e")
        buf.write("H\2\u0614\u0612\3\2\2\2\u0614\u0615\3\2\2\2\u0615\u0617")
        buf.write("\3\2\2\2\u0616\u0618\7%\2\2\u0617\u0616\3\2\2\2\u0617")
        buf.write("\u0618\3\2\2\2\u0618\u0619\3\2\2\2\u0619\u061a\5\u00e4")
        buf.write("s\2\u061a\u00e7\3\2\2\2\u061b\u061d\t\f\2\2\u061c\u061b")
        buf.write("\3\2\2\2\u061c\u061d\3\2\2\2\u061d\u061e\3\2\2\2\u061e")
        buf.write("\u061f\5*\26\2\u061f\u00e9\3\2\2\2\u0620\u0625\5\u00e8")
        buf.write("u\2\u0621\u0622\7B\2\2\u0622\u0624\5\u00e8u\2\u0623\u0621")
        buf.write("\3\2\2\2\u0624\u0627\3\2\2\2\u0625\u0623\3\2\2\2\u0625")
        buf.write("\u0626\3\2\2\2\u0626\u0629\3\2\2\2\u0627\u0625\3\2\2\2")
        buf.write("\u0628\u0620\3\2\2\2\u0628\u0629\3\2\2\2\u0629\u062b\3")
        buf.write("\2\2\2\u062a\u062c\5d\63\2\u062b\u062a\3\2\2\2\u062b\u062c")
        buf.write("\3\2\2\2\u062c\u0638\3\2\2\2\u062d\u0636\7s\2\2\u062e")
        buf.write("\u0633\5\u008eH\2\u062f\u0630\7B\2\2\u0630\u0632\5\u008e")
        buf.write("H\2\u0631\u062f\3\2\2\2\u0632\u0635\3\2\2\2\u0633\u0631")
        buf.write("\3\2\2\2\u0633\u0634\3\2\2\2\u0634\u0637\3\2\2\2\u0635")
        buf.write("\u0633\3\2\2\2\u0636\u062e\3\2\2\2\u0636\u0637\3\2\2\2")
        buf.write("\u0637\u0639\3\2\2\2\u0638\u062d\3\2\2\2\u0638\u0639\3")
        buf.write("\2\2\2\u0639\u063c\3\2\2\2\u063a\u063c\5\u00fe\u0080\2")
        buf.write("\u063b\u0628\3\2\2\2\u063b\u063a\3\2\2\2\u063c\u00eb\3")
        buf.write("\2\2\2\u063d\u063f\5l\67\2\u063e\u0640\5\u00c8e\2\u063f")
        buf.write("\u063e\3\2\2\2\u063f\u0640\3\2\2\2\u0640\u0641\3\2\2\2")
        buf.write("\u0641\u0642\7\7\2\2\u0642\u0643\5\20\t\2\u0643\u0645")
        buf.write("\5\u0090I\2\u0644\u0646\5\u00ccg\2\u0645\u0644\3\2\2\2")
        buf.write("\u0645\u0646\3\2\2\2\u0646\u00ed\3\2\2\2\u0647\u0648\7")
        buf.write("<\2\2\u0648\u0649\5\20\t\2\u0649\u064f\5j\66\2\u064a\u064b")
        buf.write("\5\4\3\2\u064b\u064c\5j\66\2\u064c\u064e\3\2\2\2\u064d")
        buf.write("\u064a\3\2\2\2\u064e\u0651\3\2\2\2\u064f\u064d\3\2\2\2")
        buf.write("\u064f\u0650\3\2\2\2\u0650\u0652\3\2\2\2\u0651\u064f\3")
        buf.write("\2\2\2\u0652\u0653\5\22\n\2\u0653\u0654\7=\2\2\u0654\u0655")
        buf.write("\7\7\2\2\u0655\u0656\5\20\t\2\u0656\u0657\5\u0088E\2\u0657")
        buf.write("\u00ef\3\2\2\2\u0658\u0659\5\n\6\2\u0659\u065b\5\u00fe")
        buf.write("\u0080\2\u065a\u065c\5Z.\2\u065b\u065a\3\2\2\2\u065b\u065c")
        buf.write("\3\2\2\2\u065c\u00f1\3\2\2\2\u065d\u0660\5\u00eex\2\u065e")
        buf.write("\u0660\5p9\2\u065f\u065d\3\2\2\2\u065f\u065e\3\2\2\2\u0660")
        buf.write("\u0662\3\2\2\2\u0661\u0663\5\u00f0y\2\u0662\u0661\3\2")
        buf.write("\2\2\u0662\u0663\3\2\2\2\u0663\u0664\3\2\2\2\u0664\u0665")
        buf.write("\5\u00ccg\2\u0665\u00f3\3\2\2\2\u0666\u0667\7J\2\2\u0667")
        buf.write("\u0668\5\20\t\2\u0668\u066e\5\66\34\2\u0669\u066a\5\4")
        buf.write("\3\2\u066a\u066b\5\66\34\2\u066b\u066d\3\2\2\2\u066c\u0669")
        buf.write("\3\2\2\2\u066d\u0670\3\2\2\2\u066e\u066c\3\2\2\2\u066e")
        buf.write("\u066f\3\2\2\2\u066f\u00f5\3\2\2\2\u0670\u066e\3\2\2\2")
        buf.write("\u0671\u0672\7m\2\2\u0672\u0673\5\20\t\2\u0673\u0679\5")
        buf.write("\66\34\2\u0674\u0675\5\4\3\2\u0675\u0676\5\66\34\2\u0676")
        buf.write("\u0678\3\2\2\2\u0677\u0674\3\2\2\2\u0678\u067b\3\2\2\2")
        buf.write("\u0679\u0677\3\2\2\2\u0679\u067a\3\2\2\2\u067a\u00f7\3")
        buf.write("\2\2\2\u067b\u0679\3\2\2\2\u067c\u0682\5d\63\2\u067d\u067f")
        buf.write("\7;\2\2\u067e\u0680\7%\2\2\u067f\u067e\3\2\2\2\u067f\u0680")
        buf.write("\3\2\2\2\u0680\u0681\3\2\2\2\u0681\u0683\5\u00fe\u0080")
        buf.write("\2\u0682\u067d\3\2\2\2\u0682\u0683\3\2\2\2\u0683\u00f9")
        buf.write("\3\2\2\2\u0684\u0691\5\u009cO\2\u0685\u0691\5\u009eP\2")
        buf.write("\u0686\u0691\5\u00a0Q\2\u0687\u0691\5\u00a2R\2\u0688\u0691")
        buf.write("\5\u00a4S\2\u0689\u0691\5\u00a6T\2\u068a\u0691\5\u00f8")
        buf.write("}\2\u068b\u0691\5\u0096L\2\u068c\u0691\5T+\2\u068d\u0691")
        buf.write("\5\u009aN\2\u068e\u0691\5\u0098M\2\u068f\u0691\5\u00d0")
        buf.write("i\2\u0690\u0684\3\2\2\2\u0690\u0685\3\2\2\2\u0690\u0686")
        buf.write("\3\2\2\2\u0690\u0687\3\2\2\2\u0690\u0688\3\2\2\2\u0690")
        buf.write("\u0689\3\2\2\2\u0690\u068a\3\2\2\2\u0690\u068b\3\2\2\2")
        buf.write("\u0690\u068c\3\2\2\2\u0690\u068d\3\2\2\2\u0690\u068e\3")
        buf.write("\2\2\2\u0690\u068f\3\2\2\2\u0691\u0694\3\2\2\2\u0692\u0694")
        buf.write("\5\u0094K\2\u0693\u0690\3\2\2\2\u0693\u0692\3\2\2\2\u0694")
        buf.write("\u0696\3\2\2\2\u0695\u0697\7%\2\2\u0696\u0695\3\2\2\2")
        buf.write("\u0696\u0697\3\2\2\2\u0697\u00fb\3\2\2\2\u0698\u06b6\5")
        buf.write("\u00aaV\2\u0699\u06b6\5\u00acW\2\u069a\u06b6\5\u00aeX")
        buf.write("\2\u069b\u06b6\5\u00b6\\\2\u069c\u06b6\5\u0084C\2\u069d")
        buf.write("\u06b6\5\u00bc_\2\u069e\u06b6\5\u00c0a\2\u069f\u06b6\5")
        buf.write("\u00c2b\2\u06a0\u06b6\5\u00c4c\2\u06a1\u06a2\7v\2\2\u06a2")
        buf.write("\u06b6\5\u00ceh\2\u06a3\u06a4\7l\2\2\u06a4\u06b6\5\u00ce")
        buf.write("h\2\u06a5\u06a6\7i\2\2\u06a6\u06b6\5\u00ceh\2\u06a7\u06a8")
        buf.write("\7k\2\2\u06a8\u06b6\5\u00ceh\2\u06a9\u06aa\7~\2\2\u06aa")
        buf.write("\u06b6\5\u00ceh\2\u06ab\u06ac\7R\2\2\u06ac\u06b6\5\u00ce")
        buf.write("h\2\u06ad\u06ae\7\u0081\2\2\u06ae\u06b6\5\u00d2j\2\u06af")
        buf.write("\u06b0\7P\2\2\u06b0\u06b6\5\u00d4k\2\u06b1\u06b2\t\r\2")
        buf.write("\2\u06b2\u06b6\5\u00d6l\2\u06b3\u06b6\5\u00f4{\2\u06b4")
        buf.write("\u06b6\5\u00f6|\2\u06b5\u0698\3\2\2\2\u06b5\u0699\3\2")
        buf.write("\2\2\u06b5\u069a\3\2\2\2\u06b5\u069b\3\2\2\2\u06b5\u069c")
        buf.write("\3\2\2\2\u06b5\u069d\3\2\2\2\u06b5\u069e\3\2\2\2\u06b5")
        buf.write("\u069f\3\2\2\2\u06b5\u06a0\3\2\2\2\u06b5\u06a1\3\2\2\2")
        buf.write("\u06b5\u06a3\3\2\2\2\u06b5\u06a5\3\2\2\2\u06b5\u06a7\3")
        buf.write("\2\2\2\u06b5\u06a9\3\2\2\2\u06b5\u06ab\3\2\2\2\u06b5\u06ad")
        buf.write("\3\2\2\2\u06b5\u06af\3\2\2\2\u06b5\u06b1\3\2\2\2\u06b5")
        buf.write("\u06b3\3\2\2\2\u06b5\u06b4\3\2\2\2\u06b6\u06b9\3\2\2\2")
        buf.write("\u06b7\u06b9\5\u00fa~\2\u06b8\u06b5\3\2\2\2\u06b8\u06b7")
        buf.write("\3\2\2\2\u06b9\u00fd\3\2\2\2\u06ba\u06bb\7\5\2\2\u06bb")
        buf.write("\u06c0\5\u00fc\177\2\u06bc\u06bd\t\2\2\2\u06bd\u06bf\5")
        buf.write("\u00fc\177\2\u06be\u06bc\3\2\2\2\u06bf\u06c2\3\2\2\2\u06c0")
        buf.write("\u06be\3\2\2\2\u06c0\u06c1\3\2\2\2\u06c1\u06c3\3\2\2\2")
        buf.write("\u06c2\u06c0\3\2\2\2\u06c3\u06c4\7\23\2\2\u06c4\u06ce")
        buf.write("\3\2\2\2\u06c5\u06ca\5\u00fa~\2\u06c6\u06c7\7C\2\2\u06c7")
        buf.write("\u06c9\5\u00fa~\2\u06c8\u06c6\3\2\2\2\u06c9\u06cc\3\2")
        buf.write("\2\2\u06ca\u06c8\3\2\2\2\u06ca\u06cb\3\2\2\2\u06cb\u06ce")
        buf.write("\3\2\2\2\u06cc\u06ca\3\2\2\2\u06cd\u06ba\3\2\2\2\u06cd")
        buf.write("\u06c5\3\2\2\2\u06ce\u00ff\3\2\2\2\u06cf\u06d0\5\2\2\2")
        buf.write("\u06d0\u0101\3\2\2\2\u00d5\u0107\u010a\u010e\u0112\u0116")
        buf.write("\u011a\u0121\u0124\u0127\u0130\u0134\u013d\u0147\u0151")
        buf.write("\u015b\u0165\u016f\u0179\u0183\u018d\u0197\u01a6\u01a8")
        buf.write("\u01aa\u01ac\u01b1\u01b7\u01bf\u01c8\u01cc\u01d6\u01df")
        buf.write("\u01e6\u01ee\u01f2\u020b\u0214\u0221\u0224\u022e\u0231")
        buf.write("\u0233\u0235\u0245\u024b\u024f\u0259\u025d\u0266\u026a")
        buf.write("\u026f\u0276\u0285\u028d\u0294\u02ac\u02ae\u02b6\u02c1")
        buf.write("\u02cc\u02cf\u02da\u02eb\u02fc\u0300\u0308\u030f\u0313")
        buf.write("\u0317\u031f\u0323\u0329\u032f\u0337\u033b\u0341\u0347")
        buf.write("\u0350\u0354\u035c\u0364\u0367\u0375\u0378\u037d\u0383")
        buf.write("\u0386\u038c\u0391\u0399\u039d\u03a0\u03ad\u03bd\u03c0")
        buf.write("\u03ca\u03d1\u03d6\u03dd\u03e1\u03fb\u03fd\u0405\u040d")
        buf.write("\u0413\u0415\u041f\u042a\u042d\u0437\u0444\u044a\u044f")
        buf.write("\u0454\u0459\u045e\u0463\u0469\u0473\u047b\u0492\u049d")
        buf.write("\u04a5\u04aa\u04ad\u04b5\u04bb\u04c4\u04c8\u04ce\u04db")
        buf.write("\u04e3\u04eb\u04f2\u0501\u050b\u0511\u0517\u051e\u0524")
        buf.write("\u0527\u0532\u0535\u0537\u053c\u053f\u0543\u0547\u054a")
        buf.write("\u0551\u0557\u055c\u0560\u0564\u0567\u056d\u0572\u0576")
        buf.write("\u057a\u057d\u0583\u0588\u058c\u0590\u0596\u05a5\u05a7")
        buf.write("\u05aa\u05ae\u05b5\u05bc\u05c0\u05c7\u05c9\u05d5\u05e0")
        buf.write("\u05e8\u05ef\u05f2\u05fa\u0602\u060c\u0610\u0614\u0617")
        buf.write("\u061c\u0625\u0628\u062b\u0633\u0636\u0638\u063b\u063f")
        buf.write("\u0645\u064f\u065b\u065f\u0662\u066e\u0679\u067f\u0682")
        buf.write("\u0690\u0693\u0696\u06b5\u06b8\u06c0\u06ca\u06cd")
        return buf.getvalue()


class milestone_2Parser ( Parser ):

    grammarFileName = "milestone_2.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'IND{=}'", "'IND'", "'IND{>}'", "'`'", 
                     "'='", "'[:'", "'+*'", "'+-'", "'+/'", "'-+'", "'-*'", 
                     "'-/'", "'{.'", "'.}'", "'->'", "'shared'", "'DED'", 
                     "'z'", "<INVALID>", "<INVALID>", "<INVALID>", "'..'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'x'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'+'", "'*'", 
                     "'-'", "'/'", "'~'", "'&'", "'|'", "'<'", "'>'", "'@'", 
                     "'%'", "'!'", "'^'", "'.'", "':'", "'('", "')'", "'{'", 
                     "'}'", "'['", "']'", "','", "';'", "<INVALID>", "'and'", 
                     "'var'", "'addr'", "'as'", "'asm'", "'bind'", "'block'", 
                     "'break'", "'case'", "'cast'", "'concept'", "'const'", 
                     "'continue'", "'converter'", "'defer'", "'discard'", 
                     "'distinct'", "'div'", "'do'", "'elif'", "'else'", 
                     "'end'", "'enum'", "'except'", "'export'", "'finally'", 
                     "'for'", "'from'", "'func'", "'if'", "'import'", "'in'", 
                     "'include'", "'interface'", "'is'", "'isnot'", "'iterator'", 
                     "'let'", "'macro'", "'method'", "'mixin'", "'mod'", 
                     "'nil'", "'not'", "'notin'", "'object'", "'of'", "'or'", 
                     "'out'", "'proc'", "'ptr'", "'raise'", "'ref'", "'return'", 
                     "'shl'", "'shr'", "'static'", "'template'", "'try'", 
                     "'tuple'", "'type'", "'using'", "'when'", "'while'", 
                     "'xor'", "'yield'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "OP10", "OP9", "OP8", "OP7", 
                      "OP6", "OP5", "OP4", "OP3", "OP2", "OP1", "OP0", "IDENT", 
                      "SKIPINDENT", "INDENT", "SPACE", "MULTILINECOMMENT", 
                      "MULTILINEDOCUMENTATION", "COMMENT", "TRIPLESTR_LIT", 
                      "STR_LIT", "CHAR_LIT", "RSTR_LIT", "GENERALIZED_STR_LIT", 
                      "GENERALIZED_TRIPLESTR_LIT", "EQUALS_OPERATOR", "ADD_OPERATOR", 
                      "MUL_OPERATOR", "MINUS_OPERATOR", "DIV_OPERATOR", 
                      "BITWISE_NOT_OPERATOR", "AND_OPERATOR", "OR_OPERATOR", 
                      "LESS_THAN", "GREATER_THAN", "AT", "MODULUS", "NOT_OPERATOR", 
                      "XOR_OPERATOR", "DOT", "COLON", "OPEN_PAREN", "CLOSE_PAREN", 
                      "OPEN_BRACE", "CLOSE_BRACE", "OPEN_BRACK", "CLOSE_BRACK", 
                      "COMMA", "SEMI_COLON", "KEYW", "AND", "VARIABLE", 
                      "ADDR", "AS", "ASM", "BIND", "BLOCK", "BREAK", "CASE", 
                      "CAST", "CONCEPT", "CONST", "CONTINUE", "CONVERTER", 
                      "DEFER", "DISCARD", "DISTINCT", "DIV", "DO", "ELIF", 
                      "ELSE", "END", "ENUM", "EXCEPT", "EXPORT", "FINALLY", 
                      "FOR", "FROM", "FUNC", "IF", "IMPORT", "IN", "INCLUDE", 
                      "INTERFACE", "IS", "ISNOT", "ITERATOR", "LET", "MACRO", 
                      "METHOD", "MIXIN", "MOD", "NIL", "NOT", "NOTIN", "OBJECT", 
                      "OF", "OR", "OUT", "PROC", "PTR", "RAISE", "REF", 
                      "RETURN", "SHL", "SHR", "STATIC", "TEMPLATE", "TRY", 
                      "TUPLE", "TYPE", "USING", "WHEN", "WHILE", "XOR", 
                      "YIELD", "IDENTIFIER", "DIGIT", "LETTER", "INT_LIT", 
                      "HEXDIGIT", "OCTDIGIT", "BINDIGIT", "HEX_LIT", "DEC_LIT", 
                      "OCT_LIT", "BIN_LIT", "INT8_LIT", "INT16_LIT", "INT32_LIT", 
                      "INT64_LIT", "UINT_LIT", "UINT8_LIT", "UINT16_LIT", 
                      "UINT32_LIT", "UINT64_LIT", "EXP", "FLOAT_LIT", "FLOAT32_SUFFIX", 
                      "FLOAT32_LIT", "FLOAT64_SUFFIX", "FLOAT64_LIT" ]

    RULE_module = 0
    RULE_comma = 1
    RULE_semicolon = 2
    RULE_colon = 3
    RULE_colcom = 4
    RULE_operator = 5
    RULE_prefixOperator = 6
    RULE_optInd = 7
    RULE_optPar = 8
    RULE_simpleExpr = 9
    RULE_arrowExpr = 10
    RULE_assignExpr = 11
    RULE_orExpr = 12
    RULE_andExpr = 13
    RULE_cmpExpr = 14
    RULE_sliceExpr = 15
    RULE_ampExpr = 16
    RULE_plusExpr = 17
    RULE_mulExpr = 18
    RULE_dollarExpr = 19
    RULE_symbol = 20
    RULE_exprColonEqExpr = 21
    RULE_exprList = 22
    RULE_exprColonEqExprList = 23
    RULE_dotExpr = 24
    RULE_explicitGenericInstantiation = 25
    RULE_qualifiedIdent = 26
    RULE_setOrTableConstr = 27
    RULE_castExpr = 28
    RULE_parKeyw = 29
    RULE_par = 30
    RULE_literal = 31
    RULE_generalizedLit = 32
    RULE_identOrLiteral = 33
    RULE_tupleConstr = 34
    RULE_arrayConstr = 35
    RULE_primarySuffix = 36
    RULE_indexExprList = 37
    RULE_indexExpr = 38
    RULE_macroColon = 39
    RULE_moduleName = 40
    RULE_exportStmt = 41
    RULE_opr = 42
    RULE_exprColonExpr = 43
    RULE_doBlocks = 44
    RULE_caseExpr = 45
    RULE_condExpr = 46
    RULE_ifExpr = 47
    RULE_whenExpr = 48
    RULE_pragma = 49
    RULE_identVis = 50
    RULE_identVisDot = 51
    RULE_identWithPragma = 52
    RULE_identWithPragmaDot = 53
    RULE_declColonEquals = 54
    RULE_identColonEquals = 55
    RULE_inlTupleDecl = 56
    RULE_extTupleDecl = 57
    RULE_tupleClass = 58
    RULE_paramList = 59
    RULE_paramListArrow = 60
    RULE_paramListColon = 61
    RULE_doBlock = 62
    RULE_procExpr = 63
    RULE_distinct = 64
    RULE_forStmt = 65
    RULE_forExpr = 66
    RULE_expr = 67
    RULE_typeKeyw = 68
    RULE_primary = 69
    RULE_typeDesc = 70
    RULE_typeDefAux = 71
    RULE_postExprBlocks = 72
    RULE_exprStmt = 73
    RULE_importStmt = 74
    RULE_includeStmt = 75
    RULE_fromStmt = 76
    RULE_returnStmt = 77
    RULE_raiseStmt = 78
    RULE_yieldStmt = 79
    RULE_discardStmt = 80
    RULE_breakStmt = 81
    RULE_continueStmt = 82
    RULE_condStmt = 83
    RULE_ifStmt = 84
    RULE_whenStmt = 85
    RULE_whileStmt = 86
    RULE_ofBranch = 87
    RULE_ofBranches = 88
    RULE_caseStmt = 89
    RULE_tryStmt = 90
    RULE_tryExpr = 91
    RULE_exceptBlock = 92
    RULE_blockStmt = 93
    RULE_blockExpr = 94
    RULE_staticStmt = 95
    RULE_deferStmt = 96
    RULE_asmStmt = 97
    RULE_genericParam = 98
    RULE_genericParamList = 99
    RULE_pattern = 100
    RULE_indAndComment = 101
    RULE_routine = 102
    RULE_commentStmt = 103
    RULE_sectionTypeDef = 104
    RULE_sectionConstant = 105
    RULE_sectionVariable = 106
    RULE_constant = 107
    RULE_enum = 108
    RULE_objectWhen = 109
    RULE_objectBranch = 110
    RULE_objectBranches = 111
    RULE_objectCase = 112
    RULE_objectPart = 113
    RULE_objectX = 114
    RULE_typeClassParam = 115
    RULE_typeClass = 116
    RULE_typeDef = 117
    RULE_varTuple = 118
    RULE_colonBody = 119
    RULE_variable = 120
    RULE_bindStmt = 121
    RULE_mixinStmt = 122
    RULE_pragmaStmt = 123
    RULE_simpleStmt = 124
    RULE_complexOrSimpleStmt = 125
    RULE_stmt = 126
    RULE_start = 127

    ruleNames =  [ "module", "comma", "semicolon", "colon", "colcom", "operator", 
                   "prefixOperator", "optInd", "optPar", "simpleExpr", "arrowExpr", 
                   "assignExpr", "orExpr", "andExpr", "cmpExpr", "sliceExpr", 
                   "ampExpr", "plusExpr", "mulExpr", "dollarExpr", "symbol", 
                   "exprColonEqExpr", "exprList", "exprColonEqExprList", 
                   "dotExpr", "explicitGenericInstantiation", "qualifiedIdent", 
                   "setOrTableConstr", "castExpr", "parKeyw", "par", "literal", 
                   "generalizedLit", "identOrLiteral", "tupleConstr", "arrayConstr", 
                   "primarySuffix", "indexExprList", "indexExpr", "macroColon", 
                   "moduleName", "exportStmt", "opr", "exprColonExpr", "doBlocks", 
                   "caseExpr", "condExpr", "ifExpr", "whenExpr", "pragma", 
                   "identVis", "identVisDot", "identWithPragma", "identWithPragmaDot", 
                   "declColonEquals", "identColonEquals", "inlTupleDecl", 
                   "extTupleDecl", "tupleClass", "paramList", "paramListArrow", 
                   "paramListColon", "doBlock", "procExpr", "distinct", 
                   "forStmt", "forExpr", "expr", "typeKeyw", "primary", 
                   "typeDesc", "typeDefAux", "postExprBlocks", "exprStmt", 
                   "importStmt", "includeStmt", "fromStmt", "returnStmt", 
                   "raiseStmt", "yieldStmt", "discardStmt", "breakStmt", 
                   "continueStmt", "condStmt", "ifStmt", "whenStmt", "whileStmt", 
                   "ofBranch", "ofBranches", "caseStmt", "tryStmt", "tryExpr", 
                   "exceptBlock", "blockStmt", "blockExpr", "staticStmt", 
                   "deferStmt", "asmStmt", "genericParam", "genericParamList", 
                   "pattern", "indAndComment", "routine", "commentStmt", 
                   "sectionTypeDef", "sectionConstant", "sectionVariable", 
                   "constant", "enum", "objectWhen", "objectBranch", "objectBranches", 
                   "objectCase", "objectPart", "objectX", "typeClassParam", 
                   "typeClass", "typeDef", "varTuple", "colonBody", "variable", 
                   "bindStmt", "mixinStmt", "pragmaStmt", "simpleStmt", 
                   "complexOrSimpleStmt", "stmt", "start" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    OP10=18
    OP9=19
    OP8=20
    OP7=21
    OP6=22
    OP5=23
    OP4=24
    OP3=25
    OP2=26
    OP1=27
    OP0=28
    IDENT=29
    SKIPINDENT=30
    INDENT=31
    SPACE=32
    MULTILINECOMMENT=33
    MULTILINEDOCUMENTATION=34
    COMMENT=35
    TRIPLESTR_LIT=36
    STR_LIT=37
    CHAR_LIT=38
    RSTR_LIT=39
    GENERALIZED_STR_LIT=40
    GENERALIZED_TRIPLESTR_LIT=41
    EQUALS_OPERATOR=42
    ADD_OPERATOR=43
    MUL_OPERATOR=44
    MINUS_OPERATOR=45
    DIV_OPERATOR=46
    BITWISE_NOT_OPERATOR=47
    AND_OPERATOR=48
    OR_OPERATOR=49
    LESS_THAN=50
    GREATER_THAN=51
    AT=52
    MODULUS=53
    NOT_OPERATOR=54
    XOR_OPERATOR=55
    DOT=56
    COLON=57
    OPEN_PAREN=58
    CLOSE_PAREN=59
    OPEN_BRACE=60
    CLOSE_BRACE=61
    OPEN_BRACK=62
    CLOSE_BRACK=63
    COMMA=64
    SEMI_COLON=65
    KEYW=66
    AND=67
    VARIABLE=68
    ADDR=69
    AS=70
    ASM=71
    BIND=72
    BLOCK=73
    BREAK=74
    CASE=75
    CAST=76
    CONCEPT=77
    CONST=78
    CONTINUE=79
    CONVERTER=80
    DEFER=81
    DISCARD=82
    DISTINCT=83
    DIV=84
    DO=85
    ELIF=86
    ELSE=87
    END=88
    ENUM=89
    EXCEPT=90
    EXPORT=91
    FINALLY=92
    FOR=93
    FROM=94
    FUNC=95
    IF=96
    IMPORT=97
    IN=98
    INCLUDE=99
    INTERFACE=100
    IS=101
    ISNOT=102
    ITERATOR=103
    LET=104
    MACRO=105
    METHOD=106
    MIXIN=107
    MOD=108
    NIL=109
    NOT=110
    NOTIN=111
    OBJECT=112
    OF=113
    OR=114
    OUT=115
    PROC=116
    PTR=117
    RAISE=118
    REF=119
    RETURN=120
    SHL=121
    SHR=122
    STATIC=123
    TEMPLATE=124
    TRY=125
    TUPLE=126
    TYPE=127
    USING=128
    WHEN=129
    WHILE=130
    XOR=131
    YIELD=132
    IDENTIFIER=133
    DIGIT=134
    LETTER=135
    INT_LIT=136
    HEXDIGIT=137
    OCTDIGIT=138
    BINDIGIT=139
    HEX_LIT=140
    DEC_LIT=141
    OCT_LIT=142
    BIN_LIT=143
    INT8_LIT=144
    INT16_LIT=145
    INT32_LIT=146
    INT64_LIT=147
    UINT_LIT=148
    UINT8_LIT=149
    UINT16_LIT=150
    UINT32_LIT=151
    UINT64_LIT=152
    EXP=153
    FLOAT_LIT=154
    FLOAT32_SUFFIX=155
    FLOAT32_LIT=156
    FLOAT64_SUFFIX=157
    FLOAT64_LIT=158

    def __init__(self, input:TokenStream):
        super().__init__(input)
        self.checkVersion("4.5.3")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    class ModuleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.StmtContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.StmtContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_module

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModule" ):
                listener.enterModule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModule" ):
                listener.exitModule(self)




    def module(self):

        localctx = milestone_2Parser.ModuleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_module)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 264
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << milestone_2Parser.T__2) | (1 << milestone_2Parser.T__3) | (1 << milestone_2Parser.T__12) | (1 << milestone_2Parser.T__15) | (1 << milestone_2Parser.OP9) | (1 << milestone_2Parser.OP8) | (1 << milestone_2Parser.OP7) | (1 << milestone_2Parser.OP6) | (1 << milestone_2Parser.OP5) | (1 << milestone_2Parser.OP4) | (1 << milestone_2Parser.OP3) | (1 << milestone_2Parser.OP2) | (1 << milestone_2Parser.OP1) | (1 << milestone_2Parser.OP0) | (1 << milestone_2Parser.IDENT) | (1 << milestone_2Parser.COMMENT) | (1 << milestone_2Parser.TRIPLESTR_LIT) | (1 << milestone_2Parser.STR_LIT) | (1 << milestone_2Parser.CHAR_LIT) | (1 << milestone_2Parser.RSTR_LIT) | (1 << milestone_2Parser.GENERALIZED_STR_LIT) | (1 << milestone_2Parser.GENERALIZED_TRIPLESTR_LIT) | (1 << milestone_2Parser.OPEN_PAREN) | (1 << milestone_2Parser.OPEN_BRACE) | (1 << milestone_2Parser.OPEN_BRACK))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (milestone_2Parser.KEYW - 66)) | (1 << (milestone_2Parser.AND - 66)) | (1 << (milestone_2Parser.VARIABLE - 66)) | (1 << (milestone_2Parser.BIND - 66)) | (1 << (milestone_2Parser.BREAK - 66)) | (1 << (milestone_2Parser.CAST - 66)) | (1 << (milestone_2Parser.DISCARD - 66)) | (1 << (milestone_2Parser.DISTINCT - 66)) | (1 << (milestone_2Parser.DIV - 66)) | (1 << (milestone_2Parser.ENUM - 66)) | (1 << (milestone_2Parser.FROM - 66)) | (1 << (milestone_2Parser.IMPORT - 66)) | (1 << (milestone_2Parser.IN - 66)) | (1 << (milestone_2Parser.INCLUDE - 66)) | (1 << (milestone_2Parser.IS - 66)) | (1 << (milestone_2Parser.ISNOT - 66)) | (1 << (milestone_2Parser.ITERATOR - 66)) | (1 << (milestone_2Parser.MOD - 66)) | (1 << (milestone_2Parser.NIL - 66)) | (1 << (milestone_2Parser.NOT - 66)) | (1 << (milestone_2Parser.NOTIN - 66)) | (1 << (milestone_2Parser.OBJECT - 66)) | (1 << (milestone_2Parser.OF - 66)) | (1 << (milestone_2Parser.OR - 66)) | (1 << (milestone_2Parser.OUT - 66)) | (1 << (milestone_2Parser.PROC - 66)) | (1 << (milestone_2Parser.PTR - 66)) | (1 << (milestone_2Parser.RAISE - 66)) | (1 << (milestone_2Parser.REF - 66)) | (1 << (milestone_2Parser.RETURN - 66)) | (1 << (milestone_2Parser.SHL - 66)) | (1 << (milestone_2Parser.SHR - 66)) | (1 << (milestone_2Parser.STATIC - 66)) | (1 << (milestone_2Parser.TUPLE - 66)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (milestone_2Parser.XOR - 131)) | (1 << (milestone_2Parser.YIELD - 131)) | (1 << (milestone_2Parser.INT_LIT - 131)) | (1 << (milestone_2Parser.INT8_LIT - 131)) | (1 << (milestone_2Parser.INT16_LIT - 131)) | (1 << (milestone_2Parser.INT32_LIT - 131)) | (1 << (milestone_2Parser.INT64_LIT - 131)) | (1 << (milestone_2Parser.UINT_LIT - 131)) | (1 << (milestone_2Parser.UINT8_LIT - 131)) | (1 << (milestone_2Parser.UINT16_LIT - 131)) | (1 << (milestone_2Parser.UINT32_LIT - 131)) | (1 << (milestone_2Parser.UINT64_LIT - 131)) | (1 << (milestone_2Parser.FLOAT_LIT - 131)) | (1 << (milestone_2Parser.FLOAT32_LIT - 131)) | (1 << (milestone_2Parser.FLOAT64_LIT - 131)))) != 0):
                self.state = 256
                self.stmt()
                self.state = 261
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==milestone_2Parser.T__0 or _la==milestone_2Parser.SEMI_COLON:
                    self.state = 257
                    _la = self._input.LA(1)
                    if not(_la==milestone_2Parser.T__0 or _la==milestone_2Parser.SEMI_COLON):
                        self._errHandler.recoverInline(self)
                    else:
                        self.consume()
                    self.state = 258
                    self.stmt()
                    self.state = 263
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CommaContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMENT(self):
            return self.getToken(milestone_2Parser.COMMENT, 0)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_comma

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComma" ):
                listener.enterComma(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComma" ):
                listener.exitComma(self)




    def comma(self):

        localctx = milestone_2Parser.CommaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_comma)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 266
            self.match(milestone_2Parser.COMMA)
            self.state = 268
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.state = 267
                self.match(milestone_2Parser.COMMENT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SemicolonContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMENT(self):
            return self.getToken(milestone_2Parser.COMMENT, 0)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_semicolon

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSemicolon" ):
                listener.enterSemicolon(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSemicolon" ):
                listener.exitSemicolon(self)




    def semicolon(self):

        localctx = milestone_2Parser.SemicolonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_semicolon)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 270
            self.match(milestone_2Parser.SEMI_COLON)
            self.state = 272
            _la = self._input.LA(1)
            if _la==milestone_2Parser.COMMENT:
                self.state = 271
                self.match(milestone_2Parser.COMMENT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ColonContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMENT(self):
            return self.getToken(milestone_2Parser.COMMENT, 0)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_colon

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColon" ):
                listener.enterColon(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColon" ):
                listener.exitColon(self)




    def colon(self):

        localctx = milestone_2Parser.ColonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_colon)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 274
            self.match(milestone_2Parser.COLON)
            self.state = 276
            _la = self._input.LA(1)
            if _la==milestone_2Parser.COMMENT:
                self.state = 275
                self.match(milestone_2Parser.COMMENT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ColcomContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMENT(self):
            return self.getToken(milestone_2Parser.COMMENT, 0)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_colcom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColcom" ):
                listener.enterColcom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColcom" ):
                listener.exitColcom(self)




    def colcom(self):

        localctx = milestone_2Parser.ColcomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_colcom)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 278
            self.match(milestone_2Parser.COLON)
            self.state = 280
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.state = 279
                self.match(milestone_2Parser.COMMENT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP0(self):
            return self.getToken(milestone_2Parser.OP0, 0)

        def OP1(self):
            return self.getToken(milestone_2Parser.OP1, 0)

        def OP2(self):
            return self.getToken(milestone_2Parser.OP2, 0)

        def OP3(self):
            return self.getToken(milestone_2Parser.OP3, 0)

        def OP4(self):
            return self.getToken(milestone_2Parser.OP4, 0)

        def OP5(self):
            return self.getToken(milestone_2Parser.OP5, 0)

        def OP6(self):
            return self.getToken(milestone_2Parser.OP6, 0)

        def OP7(self):
            return self.getToken(milestone_2Parser.OP7, 0)

        def OP8(self):
            return self.getToken(milestone_2Parser.OP8, 0)

        def OP9(self):
            return self.getToken(milestone_2Parser.OP9, 0)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperator" ):
                listener.enterOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperator" ):
                listener.exitOperator(self)




    def operator(self):

        localctx = milestone_2Parser.OperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 282
            _la = self._input.LA(1)
            if not(((((_la - 19)) & ~0x3f) == 0 and ((1 << (_la - 19)) & ((1 << (milestone_2Parser.OP9 - 19)) | (1 << (milestone_2Parser.OP8 - 19)) | (1 << (milestone_2Parser.OP7 - 19)) | (1 << (milestone_2Parser.OP6 - 19)) | (1 << (milestone_2Parser.OP5 - 19)) | (1 << (milestone_2Parser.OP4 - 19)) | (1 << (milestone_2Parser.OP3 - 19)) | (1 << (milestone_2Parser.OP2 - 19)) | (1 << (milestone_2Parser.OP1 - 19)) | (1 << (milestone_2Parser.OP0 - 19)) | (1 << (milestone_2Parser.AND - 19)))) != 0) or ((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & ((1 << (milestone_2Parser.DIV - 84)) | (1 << (milestone_2Parser.IN - 84)) | (1 << (milestone_2Parser.IS - 84)) | (1 << (milestone_2Parser.ISNOT - 84)) | (1 << (milestone_2Parser.MOD - 84)) | (1 << (milestone_2Parser.NOT - 84)) | (1 << (milestone_2Parser.NOTIN - 84)) | (1 << (milestone_2Parser.OF - 84)) | (1 << (milestone_2Parser.OR - 84)) | (1 << (milestone_2Parser.SHL - 84)) | (1 << (milestone_2Parser.SHR - 84)) | (1 << (milestone_2Parser.STATIC - 84)) | (1 << (milestone_2Parser.XOR - 84)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrefixOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def operator(self):
            return self.getTypedRuleContext(milestone_2Parser.OperatorContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_prefixOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrefixOperator" ):
                listener.enterPrefixOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrefixOperator" ):
                listener.exitPrefixOperator(self)




    def prefixOperator(self):

        localctx = milestone_2Parser.PrefixOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_prefixOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 284
            self.operator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OptIndContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMENT(self):
            return self.getToken(milestone_2Parser.COMMENT, 0)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_optInd

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptInd" ):
                listener.enterOptInd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptInd" ):
                listener.exitOptInd(self)




    def optInd(self):

        localctx = milestone_2Parser.OptIndContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_optInd)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 287
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.state = 286
                self.match(milestone_2Parser.COMMENT)


            self.state = 290
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.state = 289
                self.match(milestone_2Parser.T__1)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OptParContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return milestone_2Parser.RULE_optPar

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptPar" ):
                listener.enterOptPar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptPar" ):
                listener.exitOptPar(self)




    def optPar(self):

        localctx = milestone_2Parser.OptParContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_optPar)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 293
            _la = self._input.LA(1)
            if _la==milestone_2Parser.T__0 or _la==milestone_2Parser.T__2:
                self.state = 292
                _la = self._input.LA(1)
                if not(_la==milestone_2Parser.T__0 or _la==milestone_2Parser.T__2):
                    self._errHandler.recoverInline(self)
                else:
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SimpleExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arrowExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ArrowExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ArrowExprContext,i)


        def OP0(self, i:int=None):
            if i is None:
                return self.getTokens(milestone_2Parser.OP0)
            else:
                return self.getToken(milestone_2Parser.OP0, i)

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.OptIndContext,i)


        def pragma(self):
            return self.getTypedRuleContext(milestone_2Parser.PragmaContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_simpleExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleExpr" ):
                listener.enterSimpleExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleExpr" ):
                listener.exitSimpleExpr(self)




    def simpleExpr(self):

        localctx = milestone_2Parser.SimpleExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_simpleExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 295
            self.arrowExpr()
            self.state = 302
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,9,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 296
                    self.match(milestone_2Parser.OP0)
                    self.state = 297
                    self.optInd()
                    self.state = 298
                    self.arrowExpr() 
                self.state = 304
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,9,self._ctx)

            self.state = 306
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.state = 305
                self.pragma()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArrowExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.AssignExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.AssignExprContext,i)


        def OP1(self, i:int=None):
            if i is None:
                return self.getTokens(milestone_2Parser.OP1)
            else:
                return self.getToken(milestone_2Parser.OP1, i)

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.OptIndContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_arrowExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrowExpr" ):
                listener.enterArrowExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrowExpr" ):
                listener.exitArrowExpr(self)




    def arrowExpr(self):

        localctx = milestone_2Parser.ArrowExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_arrowExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 308
            self.assignExpr()
            self.state = 315
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,11,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 309
                    self.match(milestone_2Parser.OP1)
                    self.state = 310
                    self.optInd()
                    self.state = 311
                    self.assignExpr() 
                self.state = 317
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,11,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def orExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.OrExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.OrExprContext,i)


        def OP2(self, i:int=None):
            if i is None:
                return self.getTokens(milestone_2Parser.OP2)
            else:
                return self.getToken(milestone_2Parser.OP2, i)

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.OptIndContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_assignExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignExpr" ):
                listener.enterAssignExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignExpr" ):
                listener.exitAssignExpr(self)




    def assignExpr(self):

        localctx = milestone_2Parser.AssignExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_assignExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 318
            self.orExpr()
            self.state = 325
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,12,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 319
                    self.match(milestone_2Parser.OP2)
                    self.state = 320
                    self.optInd()
                    self.state = 321
                    self.orExpr() 
                self.state = 327
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,12,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OrExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def andExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.AndExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.AndExprContext,i)


        def OP3(self, i:int=None):
            if i is None:
                return self.getTokens(milestone_2Parser.OP3)
            else:
                return self.getToken(milestone_2Parser.OP3, i)

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.OptIndContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_orExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrExpr" ):
                listener.enterOrExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrExpr" ):
                listener.exitOrExpr(self)




    def orExpr(self):

        localctx = milestone_2Parser.OrExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_orExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 328
            self.andExpr()
            self.state = 335
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,13,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 329
                    self.match(milestone_2Parser.OP3)
                    self.state = 330
                    self.optInd()
                    self.state = 331
                    self.andExpr() 
                self.state = 337
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,13,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AndExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cmpExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.CmpExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.CmpExprContext,i)


        def OP4(self, i:int=None):
            if i is None:
                return self.getTokens(milestone_2Parser.OP4)
            else:
                return self.getToken(milestone_2Parser.OP4, i)

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.OptIndContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_andExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAndExpr" ):
                listener.enterAndExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAndExpr" ):
                listener.exitAndExpr(self)




    def andExpr(self):

        localctx = milestone_2Parser.AndExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_andExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 338
            self.cmpExpr()
            self.state = 345
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,14,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 339
                    self.match(milestone_2Parser.OP4)
                    self.state = 340
                    self.optInd()
                    self.state = 341
                    self.cmpExpr() 
                self.state = 347
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,14,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CmpExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sliceExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.SliceExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.SliceExprContext,i)


        def OP5(self, i:int=None):
            if i is None:
                return self.getTokens(milestone_2Parser.OP5)
            else:
                return self.getToken(milestone_2Parser.OP5, i)

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.OptIndContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_cmpExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmpExpr" ):
                listener.enterCmpExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmpExpr" ):
                listener.exitCmpExpr(self)




    def cmpExpr(self):

        localctx = milestone_2Parser.CmpExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_cmpExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 348
            self.sliceExpr()
            self.state = 355
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,15,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 349
                    self.match(milestone_2Parser.OP5)
                    self.state = 350
                    self.optInd()
                    self.state = 351
                    self.sliceExpr() 
                self.state = 357
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,15,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SliceExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ampExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.AmpExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.AmpExprContext,i)


        def OP6(self, i:int=None):
            if i is None:
                return self.getTokens(milestone_2Parser.OP6)
            else:
                return self.getToken(milestone_2Parser.OP6, i)

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.OptIndContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_sliceExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSliceExpr" ):
                listener.enterSliceExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSliceExpr" ):
                listener.exitSliceExpr(self)




    def sliceExpr(self):

        localctx = milestone_2Parser.SliceExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_sliceExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 358
            self.ampExpr()
            self.state = 365
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,16,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 359
                    self.match(milestone_2Parser.OP6)
                    self.state = 360
                    self.optInd()
                    self.state = 361
                    self.ampExpr() 
                self.state = 367
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,16,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AmpExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def plusExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.PlusExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.PlusExprContext,i)


        def OP7(self, i:int=None):
            if i is None:
                return self.getTokens(milestone_2Parser.OP7)
            else:
                return self.getToken(milestone_2Parser.OP7, i)

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.OptIndContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_ampExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAmpExpr" ):
                listener.enterAmpExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAmpExpr" ):
                listener.exitAmpExpr(self)




    def ampExpr(self):

        localctx = milestone_2Parser.AmpExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_ampExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 368
            self.plusExpr()
            self.state = 375
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,17,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 369
                    self.match(milestone_2Parser.OP7)
                    self.state = 370
                    self.optInd()
                    self.state = 371
                    self.plusExpr() 
                self.state = 377
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,17,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PlusExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mulExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.MulExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.MulExprContext,i)


        def OP8(self, i:int=None):
            if i is None:
                return self.getTokens(milestone_2Parser.OP8)
            else:
                return self.getToken(milestone_2Parser.OP8, i)

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.OptIndContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_plusExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlusExpr" ):
                listener.enterPlusExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlusExpr" ):
                listener.exitPlusExpr(self)




    def plusExpr(self):

        localctx = milestone_2Parser.PlusExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_plusExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 378
            self.mulExpr()
            self.state = 385
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,18,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 379
                    self.match(milestone_2Parser.OP8)
                    self.state = 380
                    self.optInd()
                    self.state = 381
                    self.mulExpr() 
                self.state = 387
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,18,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MulExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dollarExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.DollarExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.DollarExprContext,i)


        def OP9(self, i:int=None):
            if i is None:
                return self.getTokens(milestone_2Parser.OP9)
            else:
                return self.getToken(milestone_2Parser.OP9, i)

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.OptIndContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_mulExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMulExpr" ):
                listener.enterMulExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMulExpr" ):
                listener.exitMulExpr(self)




    def mulExpr(self):

        localctx = milestone_2Parser.MulExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_mulExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 388
            self.dollarExpr()
            self.state = 395
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,19,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 389
                    self.match(milestone_2Parser.OP9)
                    self.state = 390
                    self.optInd()
                    self.state = 391
                    self.dollarExpr() 
                self.state = 397
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,19,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DollarExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primary(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.PrimaryContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.PrimaryContext,i)


        def OP10(self, i:int=None):
            if i is None:
                return self.getTokens(milestone_2Parser.OP10)
            else:
                return self.getToken(milestone_2Parser.OP10, i)

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.OptIndContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_dollarExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDollarExpr" ):
                listener.enterDollarExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDollarExpr" ):
                listener.exitDollarExpr(self)




    def dollarExpr(self):

        localctx = milestone_2Parser.DollarExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_dollarExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 398
            self.primary()
            self.state = 405
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,20,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 399
                    self.match(milestone_2Parser.OP10)
                    self.state = 400
                    self.optInd()
                    self.state = 401
                    self.primary() 
                self.state = 407
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,20,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SymbolContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KEYW(self, i:int=None):
            if i is None:
                return self.getTokens(milestone_2Parser.KEYW)
            else:
                return self.getToken(milestone_2Parser.KEYW, i)

        def IDENT(self, i:int=None):
            if i is None:
                return self.getTokens(milestone_2Parser.IDENT)
            else:
                return self.getToken(milestone_2Parser.IDENT, i)

        def literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.LiteralContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.LiteralContext,i)


        def operator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.OperatorContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.OperatorContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_symbol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSymbol" ):
                listener.enterSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSymbol" ):
                listener.exitSymbol(self)




    def symbol(self):

        localctx = milestone_2Parser.SymbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_symbol)
        self._la = 0 # Token type
        try:
            self.state = 431
            token = self._input.LA(1)
            if token in [milestone_2Parser.T__3]:
                self.enterOuterAlt(localctx, 1)
                self.state = 408
                self.match(milestone_2Parser.T__3)
                self.state = 424 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 424
                    token = self._input.LA(1)
                    if token in [milestone_2Parser.KEYW]:
                        self.state = 409
                        self.match(milestone_2Parser.KEYW)

                    elif token in [milestone_2Parser.IDENT]:
                        self.state = 410
                        self.match(milestone_2Parser.IDENT)

                    elif token in [milestone_2Parser.TRIPLESTR_LIT, milestone_2Parser.STR_LIT, milestone_2Parser.CHAR_LIT, milestone_2Parser.RSTR_LIT, milestone_2Parser.NIL, milestone_2Parser.INT_LIT, milestone_2Parser.INT8_LIT, milestone_2Parser.INT16_LIT, milestone_2Parser.INT32_LIT, milestone_2Parser.INT64_LIT, milestone_2Parser.UINT_LIT, milestone_2Parser.UINT8_LIT, milestone_2Parser.UINT16_LIT, milestone_2Parser.UINT32_LIT, milestone_2Parser.UINT64_LIT, milestone_2Parser.FLOAT_LIT, milestone_2Parser.FLOAT32_LIT, milestone_2Parser.FLOAT64_LIT]:
                        self.state = 411
                        self.literal()

                    elif token in [milestone_2Parser.T__4, milestone_2Parser.OP9, milestone_2Parser.OP8, milestone_2Parser.OP7, milestone_2Parser.OP6, milestone_2Parser.OP5, milestone_2Parser.OP4, milestone_2Parser.OP3, milestone_2Parser.OP2, milestone_2Parser.OP1, milestone_2Parser.OP0, milestone_2Parser.OPEN_PAREN, milestone_2Parser.CLOSE_PAREN, milestone_2Parser.OPEN_BRACE, milestone_2Parser.CLOSE_BRACE, milestone_2Parser.OPEN_BRACK, milestone_2Parser.CLOSE_BRACK, milestone_2Parser.AND, milestone_2Parser.DIV, milestone_2Parser.IN, milestone_2Parser.IS, milestone_2Parser.ISNOT, milestone_2Parser.MOD, milestone_2Parser.NOT, milestone_2Parser.NOTIN, milestone_2Parser.OF, milestone_2Parser.OR, milestone_2Parser.SHL, milestone_2Parser.SHR, milestone_2Parser.STATIC, milestone_2Parser.XOR]:
                        self.state = 420 
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 420
                                token = self._input.LA(1)
                                if token in [milestone_2Parser.OP9, milestone_2Parser.OP8, milestone_2Parser.OP7, milestone_2Parser.OP6, milestone_2Parser.OP5, milestone_2Parser.OP4, milestone_2Parser.OP3, milestone_2Parser.OP2, milestone_2Parser.OP1, milestone_2Parser.OP0, milestone_2Parser.AND, milestone_2Parser.DIV, milestone_2Parser.IN, milestone_2Parser.IS, milestone_2Parser.ISNOT, milestone_2Parser.MOD, milestone_2Parser.NOT, milestone_2Parser.NOTIN, milestone_2Parser.OF, milestone_2Parser.OR, milestone_2Parser.SHL, milestone_2Parser.SHR, milestone_2Parser.STATIC, milestone_2Parser.XOR]:
                                    self.state = 412
                                    self.operator()

                                elif token in [milestone_2Parser.OPEN_PAREN]:
                                    self.state = 413
                                    self.match(milestone_2Parser.OPEN_PAREN)

                                elif token in [milestone_2Parser.CLOSE_PAREN]:
                                    self.state = 414
                                    self.match(milestone_2Parser.CLOSE_PAREN)

                                elif token in [milestone_2Parser.OPEN_BRACK]:
                                    self.state = 415
                                    self.match(milestone_2Parser.OPEN_BRACK)

                                elif token in [milestone_2Parser.CLOSE_BRACK]:
                                    self.state = 416
                                    self.match(milestone_2Parser.CLOSE_BRACK)

                                elif token in [milestone_2Parser.OPEN_BRACE]:
                                    self.state = 417
                                    self.match(milestone_2Parser.OPEN_BRACE)

                                elif token in [milestone_2Parser.CLOSE_BRACE]:
                                    self.state = 418
                                    self.match(milestone_2Parser.CLOSE_BRACE)

                                elif token in [milestone_2Parser.T__4]:
                                    self.state = 419
                                    self.match(milestone_2Parser.T__4)

                                else:
                                    raise NoViableAltException(self)


                            else:
                                raise NoViableAltException(self)
                            self.state = 422 
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,22,self._ctx)


                    else:
                        raise NoViableAltException(self)

                    self.state = 426 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << milestone_2Parser.T__4) | (1 << milestone_2Parser.OP9) | (1 << milestone_2Parser.OP8) | (1 << milestone_2Parser.OP7) | (1 << milestone_2Parser.OP6) | (1 << milestone_2Parser.OP5) | (1 << milestone_2Parser.OP4) | (1 << milestone_2Parser.OP3) | (1 << milestone_2Parser.OP2) | (1 << milestone_2Parser.OP1) | (1 << milestone_2Parser.OP0) | (1 << milestone_2Parser.IDENT) | (1 << milestone_2Parser.TRIPLESTR_LIT) | (1 << milestone_2Parser.STR_LIT) | (1 << milestone_2Parser.CHAR_LIT) | (1 << milestone_2Parser.RSTR_LIT) | (1 << milestone_2Parser.OPEN_PAREN) | (1 << milestone_2Parser.CLOSE_PAREN) | (1 << milestone_2Parser.OPEN_BRACE) | (1 << milestone_2Parser.CLOSE_BRACE) | (1 << milestone_2Parser.OPEN_BRACK) | (1 << milestone_2Parser.CLOSE_BRACK))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (milestone_2Parser.KEYW - 66)) | (1 << (milestone_2Parser.AND - 66)) | (1 << (milestone_2Parser.DIV - 66)) | (1 << (milestone_2Parser.IN - 66)) | (1 << (milestone_2Parser.IS - 66)) | (1 << (milestone_2Parser.ISNOT - 66)) | (1 << (milestone_2Parser.MOD - 66)) | (1 << (milestone_2Parser.NIL - 66)) | (1 << (milestone_2Parser.NOT - 66)) | (1 << (milestone_2Parser.NOTIN - 66)) | (1 << (milestone_2Parser.OF - 66)) | (1 << (milestone_2Parser.OR - 66)) | (1 << (milestone_2Parser.SHL - 66)) | (1 << (milestone_2Parser.SHR - 66)) | (1 << (milestone_2Parser.STATIC - 66)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (milestone_2Parser.XOR - 131)) | (1 << (milestone_2Parser.INT_LIT - 131)) | (1 << (milestone_2Parser.INT8_LIT - 131)) | (1 << (milestone_2Parser.INT16_LIT - 131)) | (1 << (milestone_2Parser.INT32_LIT - 131)) | (1 << (milestone_2Parser.INT64_LIT - 131)) | (1 << (milestone_2Parser.UINT_LIT - 131)) | (1 << (milestone_2Parser.UINT8_LIT - 131)) | (1 << (milestone_2Parser.UINT16_LIT - 131)) | (1 << (milestone_2Parser.UINT32_LIT - 131)) | (1 << (milestone_2Parser.UINT64_LIT - 131)) | (1 << (milestone_2Parser.FLOAT_LIT - 131)) | (1 << (milestone_2Parser.FLOAT32_LIT - 131)) | (1 << (milestone_2Parser.FLOAT64_LIT - 131)))) != 0)):
                        break

                self.state = 428
                self.match(milestone_2Parser.T__3)

            elif token in [milestone_2Parser.IDENT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 429
                self.match(milestone_2Parser.IDENT)

            elif token in [milestone_2Parser.KEYW]:
                self.enterOuterAlt(localctx, 3)
                self.state = 430
                self.match(milestone_2Parser.KEYW)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExprColonEqExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ExprContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_exprColonEqExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprColonEqExpr" ):
                listener.enterExprColonEqExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprColonEqExpr" ):
                listener.exitExprColonEqExpr(self)




    def exprColonEqExpr(self):

        localctx = milestone_2Parser.ExprColonEqExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_exprColonEqExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 433
            self.expr()
            self.state = 437
            token = self._input.LA(1)
            if token in [milestone_2Parser.COLON]:
                self.state = 434
                self.match(milestone_2Parser.COLON)
                pass
            elif token in [milestone_2Parser.T__4]:
                self.state = 435
                self.match(milestone_2Parser.T__4)
                self.state = 436
                self.expr()
                pass
            elif token in [milestone_2Parser.EOF, milestone_2Parser.T__0, milestone_2Parser.T__2, milestone_2Parser.T__3, milestone_2Parser.T__15, milestone_2Parser.OP9, milestone_2Parser.OP8, milestone_2Parser.OP7, milestone_2Parser.OP6, milestone_2Parser.OP5, milestone_2Parser.OP4, milestone_2Parser.OP3, milestone_2Parser.OP2, milestone_2Parser.OP1, milestone_2Parser.OP0, milestone_2Parser.IDENT, milestone_2Parser.TRIPLESTR_LIT, milestone_2Parser.STR_LIT, milestone_2Parser.CHAR_LIT, milestone_2Parser.RSTR_LIT, milestone_2Parser.GENERALIZED_STR_LIT, milestone_2Parser.GENERALIZED_TRIPLESTR_LIT, milestone_2Parser.OPEN_PAREN, milestone_2Parser.CLOSE_PAREN, milestone_2Parser.OPEN_BRACE, milestone_2Parser.OPEN_BRACK, milestone_2Parser.CLOSE_BRACK, milestone_2Parser.COMMA, milestone_2Parser.KEYW, milestone_2Parser.AND, milestone_2Parser.VARIABLE, milestone_2Parser.BIND, milestone_2Parser.BLOCK, milestone_2Parser.CASE, milestone_2Parser.CAST, milestone_2Parser.DISTINCT, milestone_2Parser.DIV, milestone_2Parser.ENUM, milestone_2Parser.FOR, milestone_2Parser.IF, milestone_2Parser.IN, milestone_2Parser.IS, milestone_2Parser.ISNOT, milestone_2Parser.ITERATOR, milestone_2Parser.MOD, milestone_2Parser.NIL, milestone_2Parser.NOT, milestone_2Parser.NOTIN, milestone_2Parser.OBJECT, milestone_2Parser.OF, milestone_2Parser.OR, milestone_2Parser.OUT, milestone_2Parser.PROC, milestone_2Parser.PTR, milestone_2Parser.REF, milestone_2Parser.SHL, milestone_2Parser.SHR, milestone_2Parser.STATIC, milestone_2Parser.TRY, milestone_2Parser.TUPLE, milestone_2Parser.WHEN, milestone_2Parser.XOR, milestone_2Parser.INT_LIT, milestone_2Parser.INT8_LIT, milestone_2Parser.INT16_LIT, milestone_2Parser.INT32_LIT, milestone_2Parser.INT64_LIT, milestone_2Parser.UINT_LIT, milestone_2Parser.UINT8_LIT, milestone_2Parser.UINT16_LIT, milestone_2Parser.UINT32_LIT, milestone_2Parser.UINT64_LIT, milestone_2Parser.FLOAT_LIT, milestone_2Parser.FLOAT32_LIT, milestone_2Parser.FLOAT64_LIT]:
                pass
            else:
                raise NoViableAltException(self)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExprListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ExprContext,i)


        def comma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.CommaContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.CommaContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_exprList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprList" ):
                listener.enterExprList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprList" ):
                listener.exitExprList(self)




    def exprList(self):

        localctx = milestone_2Parser.ExprListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_exprList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 439
            self.expr()
            self.state = 445
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==milestone_2Parser.COMMA:
                self.state = 440
                self.comma()
                self.state = 441
                self.expr()
                self.state = 447
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExprColonEqExprListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exprColonEqExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ExprColonEqExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ExprColonEqExprContext,i)


        def comma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.CommaContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.CommaContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_exprColonEqExprList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprColonEqExprList" ):
                listener.enterExprColonEqExprList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprColonEqExprList" ):
                listener.exitExprColonEqExprList(self)




    def exprColonEqExprList(self):

        localctx = milestone_2Parser.ExprColonEqExprListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_exprColonEqExprList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 448
            self.exprColonEqExpr()
            self.state = 454
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,28,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 449
                    self.comma()
                    self.state = 450
                    self.exprColonEqExpr() 
                self.state = 456
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,28,self._ctx)

            self.state = 458
            _la = self._input.LA(1)
            if _la==milestone_2Parser.COMMA:
                self.state = 457
                self.comma()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DotExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(milestone_2Parser.ExprContext,0)


        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def symbol(self):
            return self.getTypedRuleContext(milestone_2Parser.SymbolContext,0)


        def exprList(self):
            return self.getTypedRuleContext(milestone_2Parser.ExprListContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_dotExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotExpr" ):
                listener.enterDotExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotExpr" ):
                listener.exitDotExpr(self)




    def dotExpr(self):

        localctx = milestone_2Parser.DotExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_dotExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 460
            self.expr()
            self.state = 461
            self.match(milestone_2Parser.DOT)
            self.state = 462
            self.optInd()
            self.state = 468
            token = self._input.LA(1)
            if token in [milestone_2Parser.T__3, milestone_2Parser.IDENT, milestone_2Parser.KEYW]:
                self.state = 463
                self.symbol()

            elif token in [milestone_2Parser.T__5]:
                self.state = 464
                self.match(milestone_2Parser.T__5)
                self.state = 465
                self.exprList()
                self.state = 466
                self.match(milestone_2Parser.CLOSE_BRACK)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExplicitGenericInstantiationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exprList(self):
            return self.getTypedRuleContext(milestone_2Parser.ExprListContext,0)


        def exprColonEqExpr(self):
            return self.getTypedRuleContext(milestone_2Parser.ExprColonEqExprContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_explicitGenericInstantiation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicitGenericInstantiation" ):
                listener.enterExplicitGenericInstantiation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicitGenericInstantiation" ):
                listener.exitExplicitGenericInstantiation(self)




    def explicitGenericInstantiation(self):

        localctx = milestone_2Parser.ExplicitGenericInstantiationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_explicitGenericInstantiation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 470
            self.match(milestone_2Parser.T__5)
            self.state = 471
            self.exprList()
            self.state = 472
            self.match(milestone_2Parser.CLOSE_BRACK)
            self.state = 477
            _la = self._input.LA(1)
            if _la==milestone_2Parser.OPEN_PAREN:
                self.state = 473
                self.match(milestone_2Parser.OPEN_PAREN)
                self.state = 474
                self.exprColonEqExpr()
                self.state = 475
                self.match(milestone_2Parser.CLOSE_PAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QualifiedIdentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.SymbolContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.SymbolContext,i)


        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_qualifiedIdent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedIdent" ):
                listener.enterQualifiedIdent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedIdent" ):
                listener.exitQualifiedIdent(self)




    def qualifiedIdent(self):

        localctx = milestone_2Parser.QualifiedIdentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_qualifiedIdent)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 479
            self.symbol()
            self.state = 484
            _la = self._input.LA(1)
            if _la==milestone_2Parser.DOT:
                self.state = 480
                self.match(milestone_2Parser.DOT)
                self.state = 481
                self.optInd()
                self.state = 482
                self.symbol()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SetOrTableConstrContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exprColonEqExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ExprColonEqExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ExprColonEqExprContext,i)


        def comma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.CommaContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.CommaContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_setOrTableConstr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetOrTableConstr" ):
                listener.enterSetOrTableConstr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetOrTableConstr" ):
                listener.exitSetOrTableConstr(self)




    def setOrTableConstr(self):

        localctx = milestone_2Parser.SetOrTableConstrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_setOrTableConstr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 486
            self.match(milestone_2Parser.OPEN_BRACE)
            self.state = 496
            token = self._input.LA(1)
            if token in [milestone_2Parser.T__3, milestone_2Parser.T__15, milestone_2Parser.OP9, milestone_2Parser.OP8, milestone_2Parser.OP7, milestone_2Parser.OP6, milestone_2Parser.OP5, milestone_2Parser.OP4, milestone_2Parser.OP3, milestone_2Parser.OP2, milestone_2Parser.OP1, milestone_2Parser.OP0, milestone_2Parser.IDENT, milestone_2Parser.TRIPLESTR_LIT, milestone_2Parser.STR_LIT, milestone_2Parser.CHAR_LIT, milestone_2Parser.RSTR_LIT, milestone_2Parser.GENERALIZED_STR_LIT, milestone_2Parser.GENERALIZED_TRIPLESTR_LIT, milestone_2Parser.OPEN_PAREN, milestone_2Parser.OPEN_BRACE, milestone_2Parser.CLOSE_BRACE, milestone_2Parser.OPEN_BRACK, milestone_2Parser.KEYW, milestone_2Parser.AND, milestone_2Parser.VARIABLE, milestone_2Parser.BIND, milestone_2Parser.BLOCK, milestone_2Parser.CASE, milestone_2Parser.CAST, milestone_2Parser.DISTINCT, milestone_2Parser.DIV, milestone_2Parser.ENUM, milestone_2Parser.FOR, milestone_2Parser.IF, milestone_2Parser.IN, milestone_2Parser.IS, milestone_2Parser.ISNOT, milestone_2Parser.ITERATOR, milestone_2Parser.MOD, milestone_2Parser.NIL, milestone_2Parser.NOT, milestone_2Parser.NOTIN, milestone_2Parser.OBJECT, milestone_2Parser.OF, milestone_2Parser.OR, milestone_2Parser.OUT, milestone_2Parser.PROC, milestone_2Parser.PTR, milestone_2Parser.REF, milestone_2Parser.SHL, milestone_2Parser.SHR, milestone_2Parser.STATIC, milestone_2Parser.TRY, milestone_2Parser.TUPLE, milestone_2Parser.WHEN, milestone_2Parser.XOR, milestone_2Parser.INT_LIT, milestone_2Parser.INT8_LIT, milestone_2Parser.INT16_LIT, milestone_2Parser.INT32_LIT, milestone_2Parser.INT64_LIT, milestone_2Parser.UINT_LIT, milestone_2Parser.UINT8_LIT, milestone_2Parser.UINT16_LIT, milestone_2Parser.UINT32_LIT, milestone_2Parser.UINT64_LIT, milestone_2Parser.FLOAT_LIT, milestone_2Parser.FLOAT32_LIT, milestone_2Parser.FLOAT64_LIT]:
                self.state = 492
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << milestone_2Parser.T__3) | (1 << milestone_2Parser.T__15) | (1 << milestone_2Parser.OP9) | (1 << milestone_2Parser.OP8) | (1 << milestone_2Parser.OP7) | (1 << milestone_2Parser.OP6) | (1 << milestone_2Parser.OP5) | (1 << milestone_2Parser.OP4) | (1 << milestone_2Parser.OP3) | (1 << milestone_2Parser.OP2) | (1 << milestone_2Parser.OP1) | (1 << milestone_2Parser.OP0) | (1 << milestone_2Parser.IDENT) | (1 << milestone_2Parser.TRIPLESTR_LIT) | (1 << milestone_2Parser.STR_LIT) | (1 << milestone_2Parser.CHAR_LIT) | (1 << milestone_2Parser.RSTR_LIT) | (1 << milestone_2Parser.GENERALIZED_STR_LIT) | (1 << milestone_2Parser.GENERALIZED_TRIPLESTR_LIT) | (1 << milestone_2Parser.OPEN_PAREN) | (1 << milestone_2Parser.OPEN_BRACE) | (1 << milestone_2Parser.OPEN_BRACK))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (milestone_2Parser.KEYW - 66)) | (1 << (milestone_2Parser.AND - 66)) | (1 << (milestone_2Parser.VARIABLE - 66)) | (1 << (milestone_2Parser.BIND - 66)) | (1 << (milestone_2Parser.BLOCK - 66)) | (1 << (milestone_2Parser.CASE - 66)) | (1 << (milestone_2Parser.CAST - 66)) | (1 << (milestone_2Parser.DISTINCT - 66)) | (1 << (milestone_2Parser.DIV - 66)) | (1 << (milestone_2Parser.ENUM - 66)) | (1 << (milestone_2Parser.FOR - 66)) | (1 << (milestone_2Parser.IF - 66)) | (1 << (milestone_2Parser.IN - 66)) | (1 << (milestone_2Parser.IS - 66)) | (1 << (milestone_2Parser.ISNOT - 66)) | (1 << (milestone_2Parser.ITERATOR - 66)) | (1 << (milestone_2Parser.MOD - 66)) | (1 << (milestone_2Parser.NIL - 66)) | (1 << (milestone_2Parser.NOT - 66)) | (1 << (milestone_2Parser.NOTIN - 66)) | (1 << (milestone_2Parser.OBJECT - 66)) | (1 << (milestone_2Parser.OF - 66)) | (1 << (milestone_2Parser.OR - 66)) | (1 << (milestone_2Parser.OUT - 66)) | (1 << (milestone_2Parser.PROC - 66)) | (1 << (milestone_2Parser.PTR - 66)) | (1 << (milestone_2Parser.REF - 66)) | (1 << (milestone_2Parser.SHL - 66)) | (1 << (milestone_2Parser.SHR - 66)) | (1 << (milestone_2Parser.STATIC - 66)) | (1 << (milestone_2Parser.TRY - 66)) | (1 << (milestone_2Parser.TUPLE - 66)) | (1 << (milestone_2Parser.WHEN - 66)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (milestone_2Parser.XOR - 131)) | (1 << (milestone_2Parser.INT_LIT - 131)) | (1 << (milestone_2Parser.INT8_LIT - 131)) | (1 << (milestone_2Parser.INT16_LIT - 131)) | (1 << (milestone_2Parser.INT32_LIT - 131)) | (1 << (milestone_2Parser.INT64_LIT - 131)) | (1 << (milestone_2Parser.UINT_LIT - 131)) | (1 << (milestone_2Parser.UINT8_LIT - 131)) | (1 << (milestone_2Parser.UINT16_LIT - 131)) | (1 << (milestone_2Parser.UINT32_LIT - 131)) | (1 << (milestone_2Parser.UINT64_LIT - 131)) | (1 << (milestone_2Parser.FLOAT_LIT - 131)) | (1 << (milestone_2Parser.FLOAT32_LIT - 131)) | (1 << (milestone_2Parser.FLOAT64_LIT - 131)))) != 0):
                    self.state = 487
                    self.exprColonEqExpr()
                    self.state = 488
                    self.comma()
                    self.state = 494
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)


            elif token in [milestone_2Parser.COLON]:
                self.state = 495
                self.match(milestone_2Parser.COLON)

            else:
                raise NoViableAltException(self)

            self.state = 498
            self.match(milestone_2Parser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CastExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.OptIndContext,i)


        def typeDesc(self):
            return self.getTypedRuleContext(milestone_2Parser.TypeDescContext,0)


        def optPar(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.OptParContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.OptParContext,i)


        def expr(self):
            return self.getTypedRuleContext(milestone_2Parser.ExprContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_castExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCastExpr" ):
                listener.enterCastExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCastExpr" ):
                listener.exitCastExpr(self)




    def castExpr(self):

        localctx = milestone_2Parser.CastExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_castExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 500
            self.match(milestone_2Parser.CAST)
            self.state = 501
            self.match(milestone_2Parser.OPEN_BRACK)
            self.state = 502
            self.optInd()
            self.state = 503
            self.typeDesc()
            self.state = 504
            self.optPar()
            self.state = 505
            self.match(milestone_2Parser.CLOSE_BRACK)
            self.state = 506
            self.match(milestone_2Parser.OPEN_PAREN)
            self.state = 507
            self.optInd()
            self.state = 508
            self.expr()
            self.state = 509
            self.optPar()
            self.state = 510
            self.match(milestone_2Parser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParKeywContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return milestone_2Parser.RULE_parKeyw

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParKeyw" ):
                listener.enterParKeyw(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParKeyw" ):
                listener.exitParKeyw(self)




    def parKeyw(self):

        localctx = milestone_2Parser.ParKeywContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_parKeyw)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 512
            _la = self._input.LA(1)
            if not(((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & ((1 << (milestone_2Parser.VARIABLE - 68)) | (1 << (milestone_2Parser.BLOCK - 68)) | (1 << (milestone_2Parser.CASE - 68)) | (1 << (milestone_2Parser.CONST - 68)) | (1 << (milestone_2Parser.DISCARD - 68)) | (1 << (milestone_2Parser.EXCEPT - 68)) | (1 << (milestone_2Parser.FINALLY - 68)) | (1 << (milestone_2Parser.FOR - 68)) | (1 << (milestone_2Parser.IF - 68)) | (1 << (milestone_2Parser.INCLUDE - 68)) | (1 << (milestone_2Parser.LET - 68)) | (1 << (milestone_2Parser.MIXIN - 68)) | (1 << (milestone_2Parser.TRY - 68)) | (1 << (milestone_2Parser.WHEN - 68)) | (1 << (milestone_2Parser.WHILE - 68)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def optPar(self):
            return self.getTypedRuleContext(milestone_2Parser.OptParContext,0)


        def complexOrSimpleStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ComplexOrSimpleStmtContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ComplexOrSimpleStmtContext,i)


        def pragmaStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.PragmaStmtContext,0)


        def simpleExpr(self):
            return self.getTypedRuleContext(milestone_2Parser.SimpleExprContext,0)


        def expr(self):
            return self.getTypedRuleContext(milestone_2Parser.ExprContext,0)


        def exprColonEqExpr(self):
            return self.getTypedRuleContext(milestone_2Parser.ExprColonEqExprContext,0)


        def exprColonExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ExprColonExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ExprColonExprContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_par

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPar" ):
                listener.enterPar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPar" ):
                listener.exitPar(self)




    def par(self):

        localctx = milestone_2Parser.ParContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_par)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 514
            self.match(milestone_2Parser.OPEN_PAREN)
            self.state = 515
            self.optInd()
            self.state = 563
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
            if la_ == 1:
                self.state = 516
                self.complexOrSimpleStmt()
                self.state = 521
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==milestone_2Parser.SEMI_COLON:
                    self.state = 517
                    self.match(milestone_2Parser.SEMI_COLON)
                    self.state = 518
                    self.complexOrSimpleStmt()
                    self.state = 523
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 524
                self.match(milestone_2Parser.SEMI_COLON)
                self.state = 525
                self.complexOrSimpleStmt()
                self.state = 530
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==milestone_2Parser.SEMI_COLON:
                    self.state = 526
                    self.match(milestone_2Parser.SEMI_COLON)
                    self.state = 527
                    self.complexOrSimpleStmt()
                    self.state = 532
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 533
                self.pragmaStmt()
                pass

            elif la_ == 4:
                self.state = 534
                self.simpleExpr()
                self.state = 561
                token = self._input.LA(1)
                if token in [milestone_2Parser.T__4]:
                    self.state = 535
                    self.match(milestone_2Parser.T__4)
                    self.state = 536
                    self.expr()
                    self.state = 546
                    _la = self._input.LA(1)
                    if _la==milestone_2Parser.SEMI_COLON:
                        self.state = 537
                        self.match(milestone_2Parser.SEMI_COLON)
                        self.state = 538
                        self.complexOrSimpleStmt()
                        self.state = 543
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==milestone_2Parser.SEMI_COLON:
                            self.state = 539
                            self.match(milestone_2Parser.SEMI_COLON)
                            self.state = 540
                            self.complexOrSimpleStmt()
                            self.state = 545
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)




                elif token in [milestone_2Parser.COLON]:
                    self.state = 548
                    self.match(milestone_2Parser.COLON)
                    self.state = 549
                    self.expr()
                    self.state = 559
                    _la = self._input.LA(1)
                    if _la==milestone_2Parser.COMMA:
                        self.state = 550
                        self.match(milestone_2Parser.COMMA)
                        self.state = 551
                        self.exprColonEqExpr()
                        self.state = 556
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==milestone_2Parser.COMMA:
                            self.state = 552
                            self.match(milestone_2Parser.COMMA)
                            self.state = 553
                            self.exprColonExpr()
                            self.state = 558
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)




                else:
                    raise NoViableAltException(self)

                pass


            self.state = 565
            self.optPar()
            self.state = 566
            self.match(milestone_2Parser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT_LIT(self):
            return self.getToken(milestone_2Parser.INT_LIT, 0)

        def INT8_LIT(self):
            return self.getToken(milestone_2Parser.INT8_LIT, 0)

        def INT16_LIT(self):
            return self.getToken(milestone_2Parser.INT16_LIT, 0)

        def INT32_LIT(self):
            return self.getToken(milestone_2Parser.INT32_LIT, 0)

        def INT64_LIT(self):
            return self.getToken(milestone_2Parser.INT64_LIT, 0)

        def UINT_LIT(self):
            return self.getToken(milestone_2Parser.UINT_LIT, 0)

        def UINT8_LIT(self):
            return self.getToken(milestone_2Parser.UINT8_LIT, 0)

        def UINT16_LIT(self):
            return self.getToken(milestone_2Parser.UINT16_LIT, 0)

        def UINT32_LIT(self):
            return self.getToken(milestone_2Parser.UINT32_LIT, 0)

        def UINT64_LIT(self):
            return self.getToken(milestone_2Parser.UINT64_LIT, 0)

        def FLOAT_LIT(self):
            return self.getToken(milestone_2Parser.FLOAT_LIT, 0)

        def FLOAT32_LIT(self):
            return self.getToken(milestone_2Parser.FLOAT32_LIT, 0)

        def FLOAT64_LIT(self):
            return self.getToken(milestone_2Parser.FLOAT64_LIT, 0)

        def STR_LIT(self):
            return self.getToken(milestone_2Parser.STR_LIT, 0)

        def RSTR_LIT(self):
            return self.getToken(milestone_2Parser.RSTR_LIT, 0)

        def TRIPLESTR_LIT(self):
            return self.getToken(milestone_2Parser.TRIPLESTR_LIT, 0)

        def CHAR_LIT(self):
            return self.getToken(milestone_2Parser.CHAR_LIT, 0)

        def NIL(self):
            return self.getToken(milestone_2Parser.NIL, 0)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)




    def literal(self):

        localctx = milestone_2Parser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 568
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << milestone_2Parser.TRIPLESTR_LIT) | (1 << milestone_2Parser.STR_LIT) | (1 << milestone_2Parser.CHAR_LIT) | (1 << milestone_2Parser.RSTR_LIT))) != 0) or ((((_la - 109)) & ~0x3f) == 0 and ((1 << (_la - 109)) & ((1 << (milestone_2Parser.NIL - 109)) | (1 << (milestone_2Parser.INT_LIT - 109)) | (1 << (milestone_2Parser.INT8_LIT - 109)) | (1 << (milestone_2Parser.INT16_LIT - 109)) | (1 << (milestone_2Parser.INT32_LIT - 109)) | (1 << (milestone_2Parser.INT64_LIT - 109)) | (1 << (milestone_2Parser.UINT_LIT - 109)) | (1 << (milestone_2Parser.UINT8_LIT - 109)) | (1 << (milestone_2Parser.UINT16_LIT - 109)) | (1 << (milestone_2Parser.UINT32_LIT - 109)) | (1 << (milestone_2Parser.UINT64_LIT - 109)) | (1 << (milestone_2Parser.FLOAT_LIT - 109)) | (1 << (milestone_2Parser.FLOAT32_LIT - 109)) | (1 << (milestone_2Parser.FLOAT64_LIT - 109)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GeneralizedLitContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GENERALIZED_STR_LIT(self):
            return self.getToken(milestone_2Parser.GENERALIZED_STR_LIT, 0)

        def GENERALIZED_TRIPLESTR_LIT(self):
            return self.getToken(milestone_2Parser.GENERALIZED_TRIPLESTR_LIT, 0)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_generalizedLit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneralizedLit" ):
                listener.enterGeneralizedLit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneralizedLit" ):
                listener.exitGeneralizedLit(self)




    def generalizedLit(self):

        localctx = milestone_2Parser.GeneralizedLitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_generalizedLit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 570
            _la = self._input.LA(1)
            if not(_la==milestone_2Parser.GENERALIZED_STR_LIT or _la==milestone_2Parser.GENERALIZED_TRIPLESTR_LIT):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdentOrLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def generalizedLit(self):
            return self.getTypedRuleContext(milestone_2Parser.GeneralizedLitContext,0)


        def symbol(self):
            return self.getTypedRuleContext(milestone_2Parser.SymbolContext,0)


        def literal(self):
            return self.getTypedRuleContext(milestone_2Parser.LiteralContext,0)


        def par(self):
            return self.getTypedRuleContext(milestone_2Parser.ParContext,0)


        def arrayConstr(self):
            return self.getTypedRuleContext(milestone_2Parser.ArrayConstrContext,0)


        def setOrTableConstr(self):
            return self.getTypedRuleContext(milestone_2Parser.SetOrTableConstrContext,0)


        def castExpr(self):
            return self.getTypedRuleContext(milestone_2Parser.CastExprContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_identOrLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentOrLiteral" ):
                listener.enterIdentOrLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentOrLiteral" ):
                listener.exitIdentOrLiteral(self)




    def identOrLiteral(self):

        localctx = milestone_2Parser.IdentOrLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_identOrLiteral)
        try:
            self.state = 579
            token = self._input.LA(1)
            if token in [milestone_2Parser.GENERALIZED_STR_LIT, milestone_2Parser.GENERALIZED_TRIPLESTR_LIT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 572
                self.generalizedLit()

            elif token in [milestone_2Parser.T__3, milestone_2Parser.IDENT, milestone_2Parser.KEYW]:
                self.enterOuterAlt(localctx, 2)
                self.state = 573
                self.symbol()

            elif token in [milestone_2Parser.TRIPLESTR_LIT, milestone_2Parser.STR_LIT, milestone_2Parser.CHAR_LIT, milestone_2Parser.RSTR_LIT, milestone_2Parser.NIL, milestone_2Parser.INT_LIT, milestone_2Parser.INT8_LIT, milestone_2Parser.INT16_LIT, milestone_2Parser.INT32_LIT, milestone_2Parser.INT64_LIT, milestone_2Parser.UINT_LIT, milestone_2Parser.UINT8_LIT, milestone_2Parser.UINT16_LIT, milestone_2Parser.UINT32_LIT, milestone_2Parser.UINT64_LIT, milestone_2Parser.FLOAT_LIT, milestone_2Parser.FLOAT32_LIT, milestone_2Parser.FLOAT64_LIT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 574
                self.literal()

            elif token in [milestone_2Parser.OPEN_PAREN]:
                self.enterOuterAlt(localctx, 4)
                self.state = 575
                self.par()

            elif token in [milestone_2Parser.OPEN_BRACK]:
                self.enterOuterAlt(localctx, 5)
                self.state = 576
                self.arrayConstr()

            elif token in [milestone_2Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 577
                self.setOrTableConstr()

            elif token in [milestone_2Parser.CAST]:
                self.enterOuterAlt(localctx, 7)
                self.state = 578
                self.castExpr()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TupleConstrContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def optPar(self):
            return self.getTypedRuleContext(milestone_2Parser.OptParContext,0)


        def exprColonEqExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ExprColonEqExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ExprColonEqExprContext,i)


        def comma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.CommaContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.CommaContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_tupleConstr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTupleConstr" ):
                listener.enterTupleConstr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTupleConstr" ):
                listener.exitTupleConstr(self)




    def tupleConstr(self):

        localctx = milestone_2Parser.TupleConstrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_tupleConstr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 581
            self.match(milestone_2Parser.OPEN_PAREN)
            self.state = 582
            self.optInd()
            self.state = 589
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << milestone_2Parser.T__3) | (1 << milestone_2Parser.T__15) | (1 << milestone_2Parser.OP9) | (1 << milestone_2Parser.OP8) | (1 << milestone_2Parser.OP7) | (1 << milestone_2Parser.OP6) | (1 << milestone_2Parser.OP5) | (1 << milestone_2Parser.OP4) | (1 << milestone_2Parser.OP3) | (1 << milestone_2Parser.OP2) | (1 << milestone_2Parser.OP1) | (1 << milestone_2Parser.OP0) | (1 << milestone_2Parser.IDENT) | (1 << milestone_2Parser.TRIPLESTR_LIT) | (1 << milestone_2Parser.STR_LIT) | (1 << milestone_2Parser.CHAR_LIT) | (1 << milestone_2Parser.RSTR_LIT) | (1 << milestone_2Parser.GENERALIZED_STR_LIT) | (1 << milestone_2Parser.GENERALIZED_TRIPLESTR_LIT) | (1 << milestone_2Parser.OPEN_PAREN) | (1 << milestone_2Parser.OPEN_BRACE) | (1 << milestone_2Parser.OPEN_BRACK))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (milestone_2Parser.KEYW - 66)) | (1 << (milestone_2Parser.AND - 66)) | (1 << (milestone_2Parser.VARIABLE - 66)) | (1 << (milestone_2Parser.BIND - 66)) | (1 << (milestone_2Parser.BLOCK - 66)) | (1 << (milestone_2Parser.CASE - 66)) | (1 << (milestone_2Parser.CAST - 66)) | (1 << (milestone_2Parser.DISTINCT - 66)) | (1 << (milestone_2Parser.DIV - 66)) | (1 << (milestone_2Parser.ENUM - 66)) | (1 << (milestone_2Parser.FOR - 66)) | (1 << (milestone_2Parser.IF - 66)) | (1 << (milestone_2Parser.IN - 66)) | (1 << (milestone_2Parser.IS - 66)) | (1 << (milestone_2Parser.ISNOT - 66)) | (1 << (milestone_2Parser.ITERATOR - 66)) | (1 << (milestone_2Parser.MOD - 66)) | (1 << (milestone_2Parser.NIL - 66)) | (1 << (milestone_2Parser.NOT - 66)) | (1 << (milestone_2Parser.NOTIN - 66)) | (1 << (milestone_2Parser.OBJECT - 66)) | (1 << (milestone_2Parser.OF - 66)) | (1 << (milestone_2Parser.OR - 66)) | (1 << (milestone_2Parser.OUT - 66)) | (1 << (milestone_2Parser.PROC - 66)) | (1 << (milestone_2Parser.PTR - 66)) | (1 << (milestone_2Parser.REF - 66)) | (1 << (milestone_2Parser.SHL - 66)) | (1 << (milestone_2Parser.SHR - 66)) | (1 << (milestone_2Parser.STATIC - 66)) | (1 << (milestone_2Parser.TRY - 66)) | (1 << (milestone_2Parser.TUPLE - 66)) | (1 << (milestone_2Parser.WHEN - 66)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (milestone_2Parser.XOR - 131)) | (1 << (milestone_2Parser.INT_LIT - 131)) | (1 << (milestone_2Parser.INT8_LIT - 131)) | (1 << (milestone_2Parser.INT16_LIT - 131)) | (1 << (milestone_2Parser.INT32_LIT - 131)) | (1 << (milestone_2Parser.INT64_LIT - 131)) | (1 << (milestone_2Parser.UINT_LIT - 131)) | (1 << (milestone_2Parser.UINT8_LIT - 131)) | (1 << (milestone_2Parser.UINT16_LIT - 131)) | (1 << (milestone_2Parser.UINT32_LIT - 131)) | (1 << (milestone_2Parser.UINT64_LIT - 131)) | (1 << (milestone_2Parser.FLOAT_LIT - 131)) | (1 << (milestone_2Parser.FLOAT32_LIT - 131)) | (1 << (milestone_2Parser.FLOAT64_LIT - 131)))) != 0):
                self.state = 583
                self.exprColonEqExpr()
                self.state = 585
                _la = self._input.LA(1)
                if _la==milestone_2Parser.COMMA:
                    self.state = 584
                    self.comma()


                self.state = 591
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 592
            self.optPar()
            self.state = 593
            self.match(milestone_2Parser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArrayConstrContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def optPar(self):
            return self.getTypedRuleContext(milestone_2Parser.OptParContext,0)


        def exprColonEqExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ExprColonEqExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ExprColonEqExprContext,i)


        def comma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.CommaContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.CommaContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_arrayConstr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayConstr" ):
                listener.enterArrayConstr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayConstr" ):
                listener.exitArrayConstr(self)




    def arrayConstr(self):

        localctx = milestone_2Parser.ArrayConstrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_arrayConstr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 595
            self.match(milestone_2Parser.OPEN_BRACK)
            self.state = 596
            self.optInd()
            self.state = 603
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << milestone_2Parser.T__3) | (1 << milestone_2Parser.T__15) | (1 << milestone_2Parser.OP9) | (1 << milestone_2Parser.OP8) | (1 << milestone_2Parser.OP7) | (1 << milestone_2Parser.OP6) | (1 << milestone_2Parser.OP5) | (1 << milestone_2Parser.OP4) | (1 << milestone_2Parser.OP3) | (1 << milestone_2Parser.OP2) | (1 << milestone_2Parser.OP1) | (1 << milestone_2Parser.OP0) | (1 << milestone_2Parser.IDENT) | (1 << milestone_2Parser.TRIPLESTR_LIT) | (1 << milestone_2Parser.STR_LIT) | (1 << milestone_2Parser.CHAR_LIT) | (1 << milestone_2Parser.RSTR_LIT) | (1 << milestone_2Parser.GENERALIZED_STR_LIT) | (1 << milestone_2Parser.GENERALIZED_TRIPLESTR_LIT) | (1 << milestone_2Parser.OPEN_PAREN) | (1 << milestone_2Parser.OPEN_BRACE) | (1 << milestone_2Parser.OPEN_BRACK))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (milestone_2Parser.KEYW - 66)) | (1 << (milestone_2Parser.AND - 66)) | (1 << (milestone_2Parser.VARIABLE - 66)) | (1 << (milestone_2Parser.BIND - 66)) | (1 << (milestone_2Parser.BLOCK - 66)) | (1 << (milestone_2Parser.CASE - 66)) | (1 << (milestone_2Parser.CAST - 66)) | (1 << (milestone_2Parser.DISTINCT - 66)) | (1 << (milestone_2Parser.DIV - 66)) | (1 << (milestone_2Parser.ENUM - 66)) | (1 << (milestone_2Parser.FOR - 66)) | (1 << (milestone_2Parser.IF - 66)) | (1 << (milestone_2Parser.IN - 66)) | (1 << (milestone_2Parser.IS - 66)) | (1 << (milestone_2Parser.ISNOT - 66)) | (1 << (milestone_2Parser.ITERATOR - 66)) | (1 << (milestone_2Parser.MOD - 66)) | (1 << (milestone_2Parser.NIL - 66)) | (1 << (milestone_2Parser.NOT - 66)) | (1 << (milestone_2Parser.NOTIN - 66)) | (1 << (milestone_2Parser.OBJECT - 66)) | (1 << (milestone_2Parser.OF - 66)) | (1 << (milestone_2Parser.OR - 66)) | (1 << (milestone_2Parser.OUT - 66)) | (1 << (milestone_2Parser.PROC - 66)) | (1 << (milestone_2Parser.PTR - 66)) | (1 << (milestone_2Parser.REF - 66)) | (1 << (milestone_2Parser.SHL - 66)) | (1 << (milestone_2Parser.SHR - 66)) | (1 << (milestone_2Parser.STATIC - 66)) | (1 << (milestone_2Parser.TRY - 66)) | (1 << (milestone_2Parser.TUPLE - 66)) | (1 << (milestone_2Parser.WHEN - 66)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (milestone_2Parser.XOR - 131)) | (1 << (milestone_2Parser.INT_LIT - 131)) | (1 << (milestone_2Parser.INT8_LIT - 131)) | (1 << (milestone_2Parser.INT16_LIT - 131)) | (1 << (milestone_2Parser.INT32_LIT - 131)) | (1 << (milestone_2Parser.INT64_LIT - 131)) | (1 << (milestone_2Parser.UINT_LIT - 131)) | (1 << (milestone_2Parser.UINT8_LIT - 131)) | (1 << (milestone_2Parser.UINT16_LIT - 131)) | (1 << (milestone_2Parser.UINT32_LIT - 131)) | (1 << (milestone_2Parser.UINT64_LIT - 131)) | (1 << (milestone_2Parser.FLOAT_LIT - 131)) | (1 << (milestone_2Parser.FLOAT32_LIT - 131)) | (1 << (milestone_2Parser.FLOAT64_LIT - 131)))) != 0):
                self.state = 597
                self.exprColonEqExpr()
                self.state = 599
                _la = self._input.LA(1)
                if _la==milestone_2Parser.COMMA:
                    self.state = 598
                    self.comma()


                self.state = 605
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 606
            self.optPar()
            self.state = 607
            self.match(milestone_2Parser.CLOSE_BRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrimarySuffixContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exprColonEqExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ExprColonEqExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ExprColonEqExprContext,i)


        def doBlocks(self):
            return self.getTypedRuleContext(milestone_2Parser.DoBlocksContext,0)


        def comma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.CommaContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.CommaContext,i)


        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def symbol(self):
            return self.getTypedRuleContext(milestone_2Parser.SymbolContext,0)


        def generalizedLit(self):
            return self.getTypedRuleContext(milestone_2Parser.GeneralizedLitContext,0)


        def indexExprList(self):
            return self.getTypedRuleContext(milestone_2Parser.IndexExprListContext,0)


        def optPar(self):
            return self.getTypedRuleContext(milestone_2Parser.OptParContext,0)


        def expr(self):
            return self.getTypedRuleContext(milestone_2Parser.ExprContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_primarySuffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimarySuffix" ):
                listener.enterPrimarySuffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimarySuffix" ):
                listener.exitPrimarySuffix(self)




    def primarySuffix(self):

        localctx = milestone_2Parser.PrimarySuffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_primarySuffix)
        self._la = 0 # Token type
        try:
            self.state = 643
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 609
                self.match(milestone_2Parser.OPEN_PAREN)
                self.state = 616
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << milestone_2Parser.T__3) | (1 << milestone_2Parser.T__15) | (1 << milestone_2Parser.OP9) | (1 << milestone_2Parser.OP8) | (1 << milestone_2Parser.OP7) | (1 << milestone_2Parser.OP6) | (1 << milestone_2Parser.OP5) | (1 << milestone_2Parser.OP4) | (1 << milestone_2Parser.OP3) | (1 << milestone_2Parser.OP2) | (1 << milestone_2Parser.OP1) | (1 << milestone_2Parser.OP0) | (1 << milestone_2Parser.IDENT) | (1 << milestone_2Parser.TRIPLESTR_LIT) | (1 << milestone_2Parser.STR_LIT) | (1 << milestone_2Parser.CHAR_LIT) | (1 << milestone_2Parser.RSTR_LIT) | (1 << milestone_2Parser.GENERALIZED_STR_LIT) | (1 << milestone_2Parser.GENERALIZED_TRIPLESTR_LIT) | (1 << milestone_2Parser.OPEN_PAREN) | (1 << milestone_2Parser.OPEN_BRACE) | (1 << milestone_2Parser.OPEN_BRACK))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (milestone_2Parser.KEYW - 66)) | (1 << (milestone_2Parser.AND - 66)) | (1 << (milestone_2Parser.VARIABLE - 66)) | (1 << (milestone_2Parser.BIND - 66)) | (1 << (milestone_2Parser.BLOCK - 66)) | (1 << (milestone_2Parser.CASE - 66)) | (1 << (milestone_2Parser.CAST - 66)) | (1 << (milestone_2Parser.DISTINCT - 66)) | (1 << (milestone_2Parser.DIV - 66)) | (1 << (milestone_2Parser.ENUM - 66)) | (1 << (milestone_2Parser.FOR - 66)) | (1 << (milestone_2Parser.IF - 66)) | (1 << (milestone_2Parser.IN - 66)) | (1 << (milestone_2Parser.IS - 66)) | (1 << (milestone_2Parser.ISNOT - 66)) | (1 << (milestone_2Parser.ITERATOR - 66)) | (1 << (milestone_2Parser.MOD - 66)) | (1 << (milestone_2Parser.NIL - 66)) | (1 << (milestone_2Parser.NOT - 66)) | (1 << (milestone_2Parser.NOTIN - 66)) | (1 << (milestone_2Parser.OBJECT - 66)) | (1 << (milestone_2Parser.OF - 66)) | (1 << (milestone_2Parser.OR - 66)) | (1 << (milestone_2Parser.OUT - 66)) | (1 << (milestone_2Parser.PROC - 66)) | (1 << (milestone_2Parser.PTR - 66)) | (1 << (milestone_2Parser.REF - 66)) | (1 << (milestone_2Parser.SHL - 66)) | (1 << (milestone_2Parser.SHR - 66)) | (1 << (milestone_2Parser.STATIC - 66)) | (1 << (milestone_2Parser.TRY - 66)) | (1 << (milestone_2Parser.TUPLE - 66)) | (1 << (milestone_2Parser.WHEN - 66)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (milestone_2Parser.XOR - 131)) | (1 << (milestone_2Parser.INT_LIT - 131)) | (1 << (milestone_2Parser.INT8_LIT - 131)) | (1 << (milestone_2Parser.INT16_LIT - 131)) | (1 << (milestone_2Parser.INT32_LIT - 131)) | (1 << (milestone_2Parser.INT64_LIT - 131)) | (1 << (milestone_2Parser.UINT_LIT - 131)) | (1 << (milestone_2Parser.UINT8_LIT - 131)) | (1 << (milestone_2Parser.UINT16_LIT - 131)) | (1 << (milestone_2Parser.UINT32_LIT - 131)) | (1 << (milestone_2Parser.UINT64_LIT - 131)) | (1 << (milestone_2Parser.FLOAT_LIT - 131)) | (1 << (milestone_2Parser.FLOAT32_LIT - 131)) | (1 << (milestone_2Parser.FLOAT64_LIT - 131)))) != 0):
                    self.state = 610
                    self.exprColonEqExpr()
                    self.state = 612
                    _la = self._input.LA(1)
                    if _la==milestone_2Parser.COMMA:
                        self.state = 611
                        self.comma()


                    self.state = 618
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 619
                self.match(milestone_2Parser.CLOSE_PAREN)
                self.state = 621
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
                if la_ == 1:
                    self.state = 620
                    self.doBlocks()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 623
                self.doBlocks()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 624
                self.match(milestone_2Parser.DOT)
                self.state = 625
                self.optInd()
                self.state = 626
                self.symbol()
                self.state = 628
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
                if la_ == 1:
                    self.state = 627
                    self.generalizedLit()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 630
                self.match(milestone_2Parser.OPEN_BRACK)
                self.state = 631
                self.optInd()
                self.state = 632
                self.indexExprList()
                self.state = 633
                self.optPar()
                self.state = 634
                self.match(milestone_2Parser.CLOSE_BRACK)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 636
                self.match(milestone_2Parser.OPEN_BRACE)
                self.state = 637
                self.optInd()
                self.state = 638
                self.indexExprList()
                self.state = 639
                self.optPar()
                self.state = 640
                self.match(milestone_2Parser.CLOSE_BRACE)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 642
                self.expr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IndexExprListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def indexExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.IndexExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.IndexExprContext,i)


        def comma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.CommaContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.CommaContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_indexExprList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexExprList" ):
                listener.enterIndexExprList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexExprList" ):
                listener.exitIndexExprList(self)




    def indexExprList(self):

        localctx = milestone_2Parser.IndexExprListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_indexExprList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 645
            self.indexExpr()
            self.state = 651
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==milestone_2Parser.COMMA:
                self.state = 646
                self.comma()
                self.state = 647
                self.indexExpr()
                self.state = 653
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IndexExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(milestone_2Parser.ExprContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_indexExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexExpr" ):
                listener.enterIndexExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexExpr" ):
                listener.exitIndexExpr(self)




    def indexExpr(self):

        localctx = milestone_2Parser.IndexExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_indexExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 654
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MacroColonContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.StmtContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.StmtContext,i)


        def exprList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ExprListContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ExprListContext,i)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ExprContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_macroColon

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroColon" ):
                listener.enterMacroColon(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroColon" ):
                listener.exitMacroColon(self)




    def macroColon(self):

        localctx = milestone_2Parser.MacroColonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_macroColon)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 656
            self.match(milestone_2Parser.COLON)
            self.state = 658
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                self.state = 657
                self.stmt()


            self.state = 684
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,56,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 682
                    self._errHandler.sync(self);
                    la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
                    if la_ == 1:
                        self.state = 660
                        self.match(milestone_2Parser.T__0)
                        self.state = 661
                        self.match(milestone_2Parser.OF)
                        self.state = 662
                        self.exprList()
                        self.state = 663
                        self.match(milestone_2Parser.COLON)
                        self.state = 664
                        self.stmt()
                        pass

                    elif la_ == 2:
                        self.state = 666
                        self.match(milestone_2Parser.T__0)
                        self.state = 667
                        self.match(milestone_2Parser.ELIF)
                        self.state = 668
                        self.expr()
                        self.state = 669
                        self.match(milestone_2Parser.COLON)
                        self.state = 670
                        self.stmt()
                        pass

                    elif la_ == 3:
                        self.state = 672
                        self.match(milestone_2Parser.T__0)
                        self.state = 673
                        self.match(milestone_2Parser.EXCEPT)
                        self.state = 674
                        self.exprList()
                        self.state = 675
                        self.match(milestone_2Parser.COLON)
                        self.state = 676
                        self.stmt()
                        pass

                    elif la_ == 4:
                        self.state = 678
                        self.match(milestone_2Parser.T__0)
                        self.state = 679
                        self.match(milestone_2Parser.ELSE)
                        self.state = 680
                        self.match(milestone_2Parser.COLON)
                        self.state = 681
                        self.stmt()
                        pass

             
                self.state = 686
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,56,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ModuleNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(milestone_2Parser.IDENTIFIER)
            else:
                return self.getToken(milestone_2Parser.IDENTIFIER, i)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_moduleName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleName" ):
                listener.enterModuleName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleName" ):
                listener.exitModuleName(self)




    def moduleName(self):

        localctx = milestone_2Parser.ModuleNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_moduleName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 687
            self.match(milestone_2Parser.IDENTIFIER)
            self.state = 692
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,57,self._ctx)
            while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1+1:
                    self.state = 688
                    self.match(milestone_2Parser.DOT)
                    self.state = 689
                    self.match(milestone_2Parser.IDENTIFIER) 
                self.state = 694
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,57,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExportStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.OptIndContext,i)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ExprContext,i)


        def comma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.CommaContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.CommaContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_exportStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExportStmt" ):
                listener.enterExportStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExportStmt" ):
                listener.exitExportStmt(self)




    def exportStmt(self):

        localctx = milestone_2Parser.ExportStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_exportStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 695
            self.match(milestone_2Parser.IMPORT)
            self.state = 696
            self.optInd()
            self.state = 697
            self.expr()
            self.state = 717
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
            if la_ == 1:
                self.state = 703
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,58,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 698
                        self.comma()
                        self.state = 699
                        self.expr() 
                    self.state = 705
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,58,self._ctx)

                pass

            elif la_ == 2:
                self.state = 706
                self.match(milestone_2Parser.EXCEPT)
                self.state = 707
                self.optInd()

                self.state = 708
                self.expr()
                self.state = 714
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,59,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 709
                        self.comma()
                        self.state = 710
                        self.expr() 
                    self.state = 716
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,59,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return milestone_2Parser.RULE_opr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpr" ):
                listener.enterOpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpr" ):
                listener.exitOpr(self)




    def opr(self):

        localctx = milestone_2Parser.OprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_opr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 719
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << milestone_2Parser.T__6) | (1 << milestone_2Parser.T__7) | (1 << milestone_2Parser.T__8) | (1 << milestone_2Parser.T__9) | (1 << milestone_2Parser.T__10) | (1 << milestone_2Parser.T__11))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExprColonExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return milestone_2Parser.RULE_exprColonExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprColonExpr" ):
                listener.enterExprColonExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprColonExpr" ):
                listener.exitExprColonExpr(self)




    def exprColonExpr(self):

        localctx = milestone_2Parser.ExprColonExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_exprColonExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 721
            self.match(milestone_2Parser.IDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DoBlocksContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def doBlock(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.DoBlockContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.DoBlockContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_doBlocks

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoBlocks" ):
                listener.enterDoBlocks(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoBlocks" ):
                listener.exitDoBlocks(self)




    def doBlocks(self):

        localctx = milestone_2Parser.DoBlocksContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_doBlocks)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 723
            self.doBlock()
            self.state = 728
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,61,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 724
                    self.match(milestone_2Parser.T__0)
                    self.state = 725
                    self.doBlock() 
                self.state = 730
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,61,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CaseExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def caseStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.CaseStmtContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_caseExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseExpr" ):
                listener.enterCaseExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseExpr" ):
                listener.exitCaseExpr(self)




    def caseExpr(self):

        localctx = milestone_2Parser.CaseExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_caseExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 731
            self.caseStmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CondExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ExprContext,i)


        def colcom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ColcomContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ColcomContext,i)


        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.OptIndContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_condExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondExpr" ):
                listener.enterCondExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondExpr" ):
                listener.exitCondExpr(self)




    def condExpr(self):

        localctx = milestone_2Parser.CondExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_condExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 733
            self.expr()
            self.state = 734
            self.colcom()
            self.state = 735
            self.expr()
            self.state = 736
            self.optInd()
            self.state = 745
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==milestone_2Parser.ELIF:
                self.state = 737
                self.match(milestone_2Parser.ELIF)
                self.state = 738
                self.expr()
                self.state = 739
                self.colcom()
                self.state = 740
                self.expr()
                self.state = 741
                self.optInd()
                self.state = 747
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 748
            self.match(milestone_2Parser.ELSE)
            self.state = 749
            self.colcom()
            self.state = 750
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IfExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def condExpr(self):
            return self.getTypedRuleContext(milestone_2Parser.CondExprContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_ifExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfExpr" ):
                listener.enterIfExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfExpr" ):
                listener.exitIfExpr(self)




    def ifExpr(self):

        localctx = milestone_2Parser.IfExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_ifExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 752
            self.match(milestone_2Parser.IF)
            self.state = 753
            self.condExpr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WhenExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def condExpr(self):
            return self.getTypedRuleContext(milestone_2Parser.CondExprContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_whenExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenExpr" ):
                listener.enterWhenExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenExpr" ):
                listener.exitWhenExpr(self)




    def whenExpr(self):

        localctx = milestone_2Parser.WhenExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_whenExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 755
            self.match(milestone_2Parser.WHEN)
            self.state = 756
            self.condExpr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PragmaContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def optPar(self):
            return self.getTypedRuleContext(milestone_2Parser.OptParContext,0)


        def exprColonExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ExprColonExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ExprColonExprContext,i)


        def comma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.CommaContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.CommaContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_pragma

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragma" ):
                listener.enterPragma(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragma" ):
                listener.exitPragma(self)




    def pragma(self):

        localctx = milestone_2Parser.PragmaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_pragma)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 758
            self.match(milestone_2Parser.T__12)
            self.state = 759
            self.optInd()
            self.state = 766
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==milestone_2Parser.IDENT:
                self.state = 760
                self.exprColonExpr()
                self.state = 762
                _la = self._input.LA(1)
                if _la==milestone_2Parser.COMMA:
                    self.state = 761
                    self.comma()


                self.state = 768
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 769
            self.optPar()
            self.state = 770
            _la = self._input.LA(1)
            if not(_la==milestone_2Parser.T__13 or _la==milestone_2Parser.CLOSE_BRACE):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdentVisContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(milestone_2Parser.SymbolContext,0)


        def opr(self):
            return self.getTypedRuleContext(milestone_2Parser.OprContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_identVis

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentVis" ):
                listener.enterIdentVis(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentVis" ):
                listener.exitIdentVis(self)




    def identVis(self):

        localctx = milestone_2Parser.IdentVisContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_identVis)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 772
            self.symbol()
            self.state = 774
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << milestone_2Parser.T__6) | (1 << milestone_2Parser.T__7) | (1 << milestone_2Parser.T__8) | (1 << milestone_2Parser.T__9) | (1 << milestone_2Parser.T__10) | (1 << milestone_2Parser.T__11))) != 0):
                self.state = 773
                self.opr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdentVisDotContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.SymbolContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.SymbolContext,i)


        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def opr(self):
            return self.getTypedRuleContext(milestone_2Parser.OprContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_identVisDot

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentVisDot" ):
                listener.enterIdentVisDot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentVisDot" ):
                listener.exitIdentVisDot(self)




    def identVisDot(self):

        localctx = milestone_2Parser.IdentVisDotContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_identVisDot)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 776
            self.symbol()
            self.state = 777
            self.match(milestone_2Parser.DOT)
            self.state = 778
            self.optInd()
            self.state = 779
            self.symbol()
            self.state = 781
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << milestone_2Parser.T__6) | (1 << milestone_2Parser.T__7) | (1 << milestone_2Parser.T__8) | (1 << milestone_2Parser.T__9) | (1 << milestone_2Parser.T__10) | (1 << milestone_2Parser.T__11))) != 0):
                self.state = 780
                self.opr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdentWithPragmaContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identVis(self):
            return self.getTypedRuleContext(milestone_2Parser.IdentVisContext,0)


        def pragma(self):
            return self.getTypedRuleContext(milestone_2Parser.PragmaContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_identWithPragma

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentWithPragma" ):
                listener.enterIdentWithPragma(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentWithPragma" ):
                listener.exitIdentWithPragma(self)




    def identWithPragma(self):

        localctx = milestone_2Parser.IdentWithPragmaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_identWithPragma)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 783
            self.identVis()
            self.state = 785
            _la = self._input.LA(1)
            if _la==milestone_2Parser.T__12:
                self.state = 784
                self.pragma()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdentWithPragmaDotContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identVisDot(self):
            return self.getTypedRuleContext(milestone_2Parser.IdentVisDotContext,0)


        def pragma(self):
            return self.getTypedRuleContext(milestone_2Parser.PragmaContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_identWithPragmaDot

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentWithPragmaDot" ):
                listener.enterIdentWithPragmaDot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentWithPragmaDot" ):
                listener.exitIdentWithPragmaDot(self)




    def identWithPragmaDot(self):

        localctx = milestone_2Parser.IdentWithPragmaDotContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_identWithPragmaDot)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 787
            self.identVisDot()
            self.state = 789
            _la = self._input.LA(1)
            if _la==milestone_2Parser.T__12:
                self.state = 788
                self.pragma()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclColonEqualsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identWithPragma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.IdentWithPragmaContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.IdentWithPragmaContext,i)


        def comma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.CommaContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.CommaContext,i)


        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.OptIndContext,i)


        def typeDesc(self):
            return self.getTypedRuleContext(milestone_2Parser.TypeDescContext,0)


        def expr(self):
            return self.getTypedRuleContext(milestone_2Parser.ExprContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_declColonEquals

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclColonEquals" ):
                listener.enterDeclColonEquals(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclColonEquals" ):
                listener.exitDeclColonEquals(self)




    def declColonEquals(self):

        localctx = milestone_2Parser.DeclColonEqualsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_declColonEquals)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 791
            self.identWithPragma()
            self.state = 797
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,69,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 792
                    self.comma()
                    self.state = 793
                    self.identWithPragma() 
                self.state = 799
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,69,self._ctx)

            self.state = 801
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                self.state = 800
                self.comma()


            self.state = 807
            _la = self._input.LA(1)
            if _la==milestone_2Parser.COLON:
                self.state = 803
                self.match(milestone_2Parser.COLON)
                self.state = 804
                self.optInd()
                self.state = 805
                self.typeDesc()


            self.state = 813
            _la = self._input.LA(1)
            if _la==milestone_2Parser.T__4:
                self.state = 809
                self.match(milestone_2Parser.T__4)
                self.state = 810
                self.optInd()
                self.state = 811
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdentColonEqualsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENT(self, i:int=None):
            if i is None:
                return self.getTokens(milestone_2Parser.IDENT)
            else:
                return self.getToken(milestone_2Parser.IDENT, i)

        def comma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.CommaContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.CommaContext,i)


        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.OptIndContext,i)


        def typeDesc(self):
            return self.getTypedRuleContext(milestone_2Parser.TypeDescContext,0)


        def expr(self):
            return self.getTypedRuleContext(milestone_2Parser.ExprContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_identColonEquals

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentColonEquals" ):
                listener.enterIdentColonEquals(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentColonEquals" ):
                listener.exitIdentColonEquals(self)




    def identColonEquals(self):

        localctx = milestone_2Parser.IdentColonEqualsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_identColonEquals)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 815
            self.match(milestone_2Parser.IDENT)
            self.state = 821
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,73,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 816
                    self.comma()
                    self.state = 817
                    self.match(milestone_2Parser.IDENT) 
                self.state = 823
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,73,self._ctx)

            self.state = 825
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
            if la_ == 1:
                self.state = 824
                self.comma()


            self.state = 831
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
            if la_ == 1:
                self.state = 827
                self.match(milestone_2Parser.COLON)
                self.state = 828
                self.optInd()
                self.state = 829
                self.typeDesc()


            self.state = 837
            _la = self._input.LA(1)
            if _la==milestone_2Parser.T__4:
                self.state = 833
                self.match(milestone_2Parser.T__4)
                self.state = 834
                self.optInd()
                self.state = 835
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InlTupleDeclContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def optPar(self):
            return self.getTypedRuleContext(milestone_2Parser.OptParContext,0)


        def identColonEquals(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.IdentColonEqualsContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.IdentColonEqualsContext,i)


        def comma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.CommaContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.CommaContext,i)


        def semicolon(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.SemicolonContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.SemicolonContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_inlTupleDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInlTupleDecl" ):
                listener.enterInlTupleDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInlTupleDecl" ):
                listener.exitInlTupleDecl(self)




    def inlTupleDecl(self):

        localctx = milestone_2Parser.InlTupleDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_inlTupleDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 839
            self.match(milestone_2Parser.TUPLE)
            self.state = 840
            self.match(milestone_2Parser.OPEN_BRACK)
            self.state = 841
            self.optInd()
            self.state = 850
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==milestone_2Parser.IDENT:
                self.state = 842
                self.identColonEquals()
                self.state = 846
                _la = self._input.LA(1)
                if _la==milestone_2Parser.COMMA:
                    self.state = 843
                    self.comma()
                    self.state = 844
                    self.semicolon()


                self.state = 852
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 853
            self.optPar()
            self.state = 854
            self.match(milestone_2Parser.CLOSE_BRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExtTupleDeclContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMENT(self):
            return self.getToken(milestone_2Parser.COMMENT, 0)

        def identColonEquals(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.IdentColonEqualsContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.IdentColonEqualsContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_extTupleDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtTupleDecl" ):
                listener.enterExtTupleDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtTupleDecl" ):
                listener.exitExtTupleDecl(self)




    def extTupleDecl(self):

        localctx = milestone_2Parser.ExtTupleDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_extTupleDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 856
            self.match(milestone_2Parser.TUPLE)
            self.state = 858
            _la = self._input.LA(1)
            if _la==milestone_2Parser.COMMENT:
                self.state = 857
                self.match(milestone_2Parser.COMMENT)


            self.state = 869
            _la = self._input.LA(1)
            if _la==milestone_2Parser.T__2:
                self.state = 860
                self.match(milestone_2Parser.T__2)
                self.state = 861
                self.identColonEquals()
                self.state = 866
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==milestone_2Parser.T__0:
                    self.state = 862
                    self.match(milestone_2Parser.T__0)
                    self.state = 863
                    self.identColonEquals()
                    self.state = 868
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TupleClassContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return milestone_2Parser.RULE_tupleClass

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTupleClass" ):
                listener.enterTupleClass(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTupleClass" ):
                listener.exitTupleClass(self)




    def tupleClass(self):

        localctx = milestone_2Parser.TupleClassContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_tupleClass)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 871
            self.match(milestone_2Parser.TUPLE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParamListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declColonEquals(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.DeclColonEqualsContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.DeclColonEqualsContext,i)


        def comma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.CommaContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.CommaContext,i)


        def semicolon(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.SemicolonContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.SemicolonContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_paramList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParamList" ):
                listener.enterParamList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParamList" ):
                listener.exitParamList(self)




    def paramList(self):

        localctx = milestone_2Parser.ParamListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_paramList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 873
            self.match(milestone_2Parser.OPEN_PAREN)
            self.state = 886
            _la = self._input.LA(1)
            if ((((_la - 4)) & ~0x3f) == 0 and ((1 << (_la - 4)) & ((1 << (milestone_2Parser.T__3 - 4)) | (1 << (milestone_2Parser.IDENT - 4)) | (1 << (milestone_2Parser.KEYW - 4)))) != 0):
                self.state = 874
                self.declColonEquals()
                self.state = 883
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==milestone_2Parser.COMMA:
                    self.state = 875
                    self.comma()
                    self.state = 876
                    self.match(milestone_2Parser.DIV_OPERATOR)
                    self.state = 877
                    self.semicolon()
                    self.state = 879
                    self.declColonEquals()
                    self.state = 885
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 888
            self.match(milestone_2Parser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParamListArrowContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def paramList(self):
            return self.getTypedRuleContext(milestone_2Parser.ParamListContext,0)


        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def typeDesc(self):
            return self.getTypedRuleContext(milestone_2Parser.TypeDescContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_paramListArrow

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParamListArrow" ):
                listener.enterParamListArrow(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParamListArrow" ):
                listener.exitParamListArrow(self)




    def paramListArrow(self):

        localctx = milestone_2Parser.ParamListArrowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_paramListArrow)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 891
            _la = self._input.LA(1)
            if _la==milestone_2Parser.OPEN_PAREN:
                self.state = 890
                self.paramList()


            self.state = 897
            _la = self._input.LA(1)
            if _la==milestone_2Parser.T__14:
                self.state = 893
                self.match(milestone_2Parser.T__14)
                self.state = 894
                self.optInd()
                self.state = 895
                self.typeDesc()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParamListColonContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def paramList(self):
            return self.getTypedRuleContext(milestone_2Parser.ParamListContext,0)


        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def typeDesc(self):
            return self.getTypedRuleContext(milestone_2Parser.TypeDescContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_paramListColon

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParamListColon" ):
                listener.enterParamListColon(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParamListColon" ):
                listener.exitParamListColon(self)




    def paramListColon(self):

        localctx = milestone_2Parser.ParamListColonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_paramListColon)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 900
            _la = self._input.LA(1)
            if _la==milestone_2Parser.OPEN_PAREN:
                self.state = 899
                self.paramList()


            self.state = 906
            _la = self._input.LA(1)
            if _la==milestone_2Parser.COLON:
                self.state = 902
                self.match(milestone_2Parser.COLON)
                self.state = 903
                self.optInd()
                self.state = 904
                self.typeDesc()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DoBlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def paramListArrow(self):
            return self.getTypedRuleContext(milestone_2Parser.ParamListArrowContext,0)


        def colcom(self):
            return self.getTypedRuleContext(milestone_2Parser.ColcomContext,0)


        def stmt(self):
            return self.getTypedRuleContext(milestone_2Parser.StmtContext,0)


        def pragma(self):
            return self.getTypedRuleContext(milestone_2Parser.PragmaContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_doBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoBlock" ):
                listener.enterDoBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoBlock" ):
                listener.exitDoBlock(self)




    def doBlock(self):

        localctx = milestone_2Parser.DoBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_doBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 908
            self.match(milestone_2Parser.DO)
            self.state = 909
            self.paramListArrow()
            self.state = 911
            _la = self._input.LA(1)
            if _la==milestone_2Parser.T__12:
                self.state = 910
                self.pragma()


            self.state = 913
            self.colcom()
            self.state = 914
            self.stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProcExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def paramListColon(self):
            return self.getTypedRuleContext(milestone_2Parser.ParamListColonContext,0)


        def pragma(self):
            return self.getTypedRuleContext(milestone_2Parser.PragmaContext,0)


        def stmt(self):
            return self.getTypedRuleContext(milestone_2Parser.StmtContext,0)


        def COMMENT(self):
            return self.getToken(milestone_2Parser.COMMENT, 0)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_procExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcExpr" ):
                listener.enterProcExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcExpr" ):
                listener.exitProcExpr(self)




    def procExpr(self):

        localctx = milestone_2Parser.ProcExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_procExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 916
            self.match(milestone_2Parser.PROC)
            self.state = 917
            self.paramListColon()
            self.state = 919
            _la = self._input.LA(1)
            if _la==milestone_2Parser.T__12:
                self.state = 918
                self.pragma()


            self.state = 926
            _la = self._input.LA(1)
            if _la==milestone_2Parser.T__4:
                self.state = 921
                self.match(milestone_2Parser.T__4)
                self.state = 923
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
                if la_ == 1:
                    self.state = 922
                    self.match(milestone_2Parser.COMMENT)


                self.state = 925
                self.stmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DistinctContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def typeDesc(self):
            return self.getTypedRuleContext(milestone_2Parser.TypeDescContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_distinct

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDistinct" ):
                listener.enterDistinct(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDistinct" ):
                listener.exitDistinct(self)




    def distinct(self):

        localctx = milestone_2Parser.DistinctContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_distinct)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 928
            self.match(milestone_2Parser.DISTINCT)
            self.state = 929
            self.optInd()
            self.state = 930
            self.typeDesc()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ForStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(milestone_2Parser.ExprContext,0)


        def colcom(self):
            return self.getTypedRuleContext(milestone_2Parser.ColcomContext,0)


        def stmt(self):
            return self.getTypedRuleContext(milestone_2Parser.StmtContext,0)


        def identWithPragma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.IdentWithPragmaContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.IdentWithPragmaContext,i)


        def comma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.CommaContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.CommaContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_forStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForStmt" ):
                listener.enterForStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForStmt" ):
                listener.exitForStmt(self)




    def forStmt(self):

        localctx = milestone_2Parser.ForStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_forStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 932
            self.match(milestone_2Parser.FOR)

            self.state = 933
            self.identWithPragma()
            self.state = 939
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==milestone_2Parser.COMMA:
                self.state = 934
                self.comma()
                self.state = 935
                self.identWithPragma()
                self.state = 941
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 942
            self.match(milestone_2Parser.IN)
            self.state = 943
            self.expr()
            self.state = 944
            self.colcom()
            self.state = 945
            self.stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ForExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def forStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.ForStmtContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_forExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForExpr" ):
                listener.enterForExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForExpr" ):
                listener.exitForExpr(self)




    def forExpr(self):

        localctx = milestone_2Parser.ForExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_forExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 947
            self.forStmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def blockExpr(self):
            return self.getTypedRuleContext(milestone_2Parser.BlockExprContext,0)


        def ifExpr(self):
            return self.getTypedRuleContext(milestone_2Parser.IfExprContext,0)


        def whenExpr(self):
            return self.getTypedRuleContext(milestone_2Parser.WhenExprContext,0)


        def caseExpr(self):
            return self.getTypedRuleContext(milestone_2Parser.CaseExprContext,0)


        def forExpr(self):
            return self.getTypedRuleContext(milestone_2Parser.ForExprContext,0)


        def tryExpr(self):
            return self.getTypedRuleContext(milestone_2Parser.TryExprContext,0)


        def simpleExpr(self):
            return self.getTypedRuleContext(milestone_2Parser.SimpleExprContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)




    def expr(self):

        localctx = milestone_2Parser.ExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_expr)
        try:
            self.state = 958
            token = self._input.LA(1)
            if token in [milestone_2Parser.BLOCK, milestone_2Parser.CASE, milestone_2Parser.FOR, milestone_2Parser.IF, milestone_2Parser.TRY, milestone_2Parser.WHEN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 955
                token = self._input.LA(1)
                if token in [milestone_2Parser.BLOCK]:
                    self.state = 949
                    self.blockExpr()

                elif token in [milestone_2Parser.IF]:
                    self.state = 950
                    self.ifExpr()

                elif token in [milestone_2Parser.WHEN]:
                    self.state = 951
                    self.whenExpr()

                elif token in [milestone_2Parser.CASE]:
                    self.state = 952
                    self.caseExpr()

                elif token in [milestone_2Parser.FOR]:
                    self.state = 953
                    self.forExpr()

                elif token in [milestone_2Parser.TRY]:
                    self.state = 954
                    self.tryExpr()

                else:
                    raise NoViableAltException(self)


            elif token in [milestone_2Parser.T__3, milestone_2Parser.T__15, milestone_2Parser.OP9, milestone_2Parser.OP8, milestone_2Parser.OP7, milestone_2Parser.OP6, milestone_2Parser.OP5, milestone_2Parser.OP4, milestone_2Parser.OP3, milestone_2Parser.OP2, milestone_2Parser.OP1, milestone_2Parser.OP0, milestone_2Parser.IDENT, milestone_2Parser.TRIPLESTR_LIT, milestone_2Parser.STR_LIT, milestone_2Parser.CHAR_LIT, milestone_2Parser.RSTR_LIT, milestone_2Parser.GENERALIZED_STR_LIT, milestone_2Parser.GENERALIZED_TRIPLESTR_LIT, milestone_2Parser.OPEN_PAREN, milestone_2Parser.OPEN_BRACE, milestone_2Parser.OPEN_BRACK, milestone_2Parser.KEYW, milestone_2Parser.AND, milestone_2Parser.VARIABLE, milestone_2Parser.BIND, milestone_2Parser.CAST, milestone_2Parser.DISTINCT, milestone_2Parser.DIV, milestone_2Parser.ENUM, milestone_2Parser.IN, milestone_2Parser.IS, milestone_2Parser.ISNOT, milestone_2Parser.ITERATOR, milestone_2Parser.MOD, milestone_2Parser.NIL, milestone_2Parser.NOT, milestone_2Parser.NOTIN, milestone_2Parser.OBJECT, milestone_2Parser.OF, milestone_2Parser.OR, milestone_2Parser.OUT, milestone_2Parser.PROC, milestone_2Parser.PTR, milestone_2Parser.REF, milestone_2Parser.SHL, milestone_2Parser.SHR, milestone_2Parser.STATIC, milestone_2Parser.TUPLE, milestone_2Parser.XOR, milestone_2Parser.INT_LIT, milestone_2Parser.INT8_LIT, milestone_2Parser.INT16_LIT, milestone_2Parser.INT32_LIT, milestone_2Parser.INT64_LIT, milestone_2Parser.UINT_LIT, milestone_2Parser.UINT8_LIT, milestone_2Parser.UINT16_LIT, milestone_2Parser.UINT32_LIT, milestone_2Parser.UINT64_LIT, milestone_2Parser.FLOAT_LIT, milestone_2Parser.FLOAT32_LIT, milestone_2Parser.FLOAT64_LIT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 957
                self.simpleExpr()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeKeywContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return milestone_2Parser.RULE_typeKeyw

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeKeyw" ):
                listener.enterTypeKeyw(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeKeyw" ):
                listener.exitTypeKeyw(self)




    def typeKeyw(self):

        localctx = milestone_2Parser.TypeKeywContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_typeKeyw)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 960
            _la = self._input.LA(1)
            if not(_la==milestone_2Parser.T__15 or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & ((1 << (milestone_2Parser.VARIABLE - 68)) | (1 << (milestone_2Parser.DISTINCT - 68)) | (1 << (milestone_2Parser.ENUM - 68)) | (1 << (milestone_2Parser.ITERATOR - 68)) | (1 << (milestone_2Parser.OBJECT - 68)) | (1 << (milestone_2Parser.OUT - 68)) | (1 << (milestone_2Parser.PROC - 68)) | (1 << (milestone_2Parser.PTR - 68)) | (1 << (milestone_2Parser.REF - 68)) | (1 << (milestone_2Parser.TUPLE - 68)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrimaryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeKeyw(self):
            return self.getTypedRuleContext(milestone_2Parser.TypeKeywContext,0)


        def typeDesc(self):
            return self.getTypedRuleContext(milestone_2Parser.TypeDescContext,0)


        def identOrLiteral(self):
            return self.getTypedRuleContext(milestone_2Parser.IdentOrLiteralContext,0)


        def prefixOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.PrefixOperatorContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.PrefixOperatorContext,i)


        def primarySuffix(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.PrimarySuffixContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.PrimarySuffixContext,i)


        def primary(self):
            return self.getTypedRuleContext(milestone_2Parser.PrimaryContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_primary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary" ):
                listener.enterPrimary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary" ):
                listener.exitPrimary(self)




    def primary(self):

        localctx = milestone_2Parser.PrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_primary)
        self._la = 0 # Token type
        try:
            self.state = 980
            token = self._input.LA(1)
            if token in [milestone_2Parser.T__15, milestone_2Parser.VARIABLE, milestone_2Parser.DISTINCT, milestone_2Parser.ENUM, milestone_2Parser.ITERATOR, milestone_2Parser.OBJECT, milestone_2Parser.OUT, milestone_2Parser.PROC, milestone_2Parser.PTR, milestone_2Parser.REF, milestone_2Parser.TUPLE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 962
                self.typeKeyw()
                self.state = 963
                self.typeDesc()

            elif token in [milestone_2Parser.T__3, milestone_2Parser.OP9, milestone_2Parser.OP8, milestone_2Parser.OP7, milestone_2Parser.OP6, milestone_2Parser.OP5, milestone_2Parser.OP4, milestone_2Parser.OP3, milestone_2Parser.OP2, milestone_2Parser.OP1, milestone_2Parser.OP0, milestone_2Parser.IDENT, milestone_2Parser.TRIPLESTR_LIT, milestone_2Parser.STR_LIT, milestone_2Parser.CHAR_LIT, milestone_2Parser.RSTR_LIT, milestone_2Parser.GENERALIZED_STR_LIT, milestone_2Parser.GENERALIZED_TRIPLESTR_LIT, milestone_2Parser.OPEN_PAREN, milestone_2Parser.OPEN_BRACE, milestone_2Parser.OPEN_BRACK, milestone_2Parser.KEYW, milestone_2Parser.AND, milestone_2Parser.CAST, milestone_2Parser.DIV, milestone_2Parser.IN, milestone_2Parser.IS, milestone_2Parser.ISNOT, milestone_2Parser.MOD, milestone_2Parser.NIL, milestone_2Parser.NOT, milestone_2Parser.NOTIN, milestone_2Parser.OF, milestone_2Parser.OR, milestone_2Parser.SHL, milestone_2Parser.SHR, milestone_2Parser.STATIC, milestone_2Parser.XOR, milestone_2Parser.INT_LIT, milestone_2Parser.INT8_LIT, milestone_2Parser.INT16_LIT, milestone_2Parser.INT32_LIT, milestone_2Parser.INT64_LIT, milestone_2Parser.UINT_LIT, milestone_2Parser.UINT8_LIT, milestone_2Parser.UINT16_LIT, milestone_2Parser.UINT32_LIT, milestone_2Parser.UINT64_LIT, milestone_2Parser.FLOAT_LIT, milestone_2Parser.FLOAT32_LIT, milestone_2Parser.FLOAT64_LIT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 968
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 19)) & ~0x3f) == 0 and ((1 << (_la - 19)) & ((1 << (milestone_2Parser.OP9 - 19)) | (1 << (milestone_2Parser.OP8 - 19)) | (1 << (milestone_2Parser.OP7 - 19)) | (1 << (milestone_2Parser.OP6 - 19)) | (1 << (milestone_2Parser.OP5 - 19)) | (1 << (milestone_2Parser.OP4 - 19)) | (1 << (milestone_2Parser.OP3 - 19)) | (1 << (milestone_2Parser.OP2 - 19)) | (1 << (milestone_2Parser.OP1 - 19)) | (1 << (milestone_2Parser.OP0 - 19)) | (1 << (milestone_2Parser.AND - 19)))) != 0) or ((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & ((1 << (milestone_2Parser.DIV - 84)) | (1 << (milestone_2Parser.IN - 84)) | (1 << (milestone_2Parser.IS - 84)) | (1 << (milestone_2Parser.ISNOT - 84)) | (1 << (milestone_2Parser.MOD - 84)) | (1 << (milestone_2Parser.NOT - 84)) | (1 << (milestone_2Parser.NOTIN - 84)) | (1 << (milestone_2Parser.OF - 84)) | (1 << (milestone_2Parser.OR - 84)) | (1 << (milestone_2Parser.SHL - 84)) | (1 << (milestone_2Parser.SHR - 84)) | (1 << (milestone_2Parser.STATIC - 84)) | (1 << (milestone_2Parser.XOR - 84)))) != 0):
                    self.state = 965
                    self.prefixOperator()
                    self.state = 970
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 971
                self.identOrLiteral()
                self.state = 975
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,96,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 972
                        self.primarySuffix() 
                    self.state = 977
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,96,self._ctx)


            elif token in [milestone_2Parser.BIND]:
                self.enterOuterAlt(localctx, 3)
                self.state = 978
                self.match(milestone_2Parser.BIND)
                self.state = 979
                self.primary()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeDescContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleExpr(self):
            return self.getTypedRuleContext(milestone_2Parser.SimpleExprContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_typeDesc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeDesc" ):
                listener.enterTypeDesc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeDesc" ):
                listener.exitTypeDesc(self)




    def typeDesc(self):

        localctx = milestone_2Parser.TypeDescContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_typeDesc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 982
            self.simpleExpr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeDefAuxContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleExpr(self):
            return self.getTypedRuleContext(milestone_2Parser.SimpleExprContext,0)


        def typeClass(self):
            return self.getTypedRuleContext(milestone_2Parser.TypeClassContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_typeDefAux

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeDefAux" ):
                listener.enterTypeDefAux(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeDefAux" ):
                listener.exitTypeDefAux(self)




    def typeDefAux(self):

        localctx = milestone_2Parser.TypeDefAuxContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_typeDefAux)
        try:
            self.state = 987
            token = self._input.LA(1)
            if token in [milestone_2Parser.T__3, milestone_2Parser.T__15, milestone_2Parser.OP9, milestone_2Parser.OP8, milestone_2Parser.OP7, milestone_2Parser.OP6, milestone_2Parser.OP5, milestone_2Parser.OP4, milestone_2Parser.OP3, milestone_2Parser.OP2, milestone_2Parser.OP1, milestone_2Parser.OP0, milestone_2Parser.IDENT, milestone_2Parser.TRIPLESTR_LIT, milestone_2Parser.STR_LIT, milestone_2Parser.CHAR_LIT, milestone_2Parser.RSTR_LIT, milestone_2Parser.GENERALIZED_STR_LIT, milestone_2Parser.GENERALIZED_TRIPLESTR_LIT, milestone_2Parser.OPEN_PAREN, milestone_2Parser.OPEN_BRACE, milestone_2Parser.OPEN_BRACK, milestone_2Parser.KEYW, milestone_2Parser.AND, milestone_2Parser.VARIABLE, milestone_2Parser.BIND, milestone_2Parser.CAST, milestone_2Parser.DISTINCT, milestone_2Parser.DIV, milestone_2Parser.ENUM, milestone_2Parser.IN, milestone_2Parser.IS, milestone_2Parser.ISNOT, milestone_2Parser.ITERATOR, milestone_2Parser.MOD, milestone_2Parser.NIL, milestone_2Parser.NOT, milestone_2Parser.NOTIN, milestone_2Parser.OBJECT, milestone_2Parser.OF, milestone_2Parser.OR, milestone_2Parser.OUT, milestone_2Parser.PROC, milestone_2Parser.PTR, milestone_2Parser.REF, milestone_2Parser.SHL, milestone_2Parser.SHR, milestone_2Parser.STATIC, milestone_2Parser.TUPLE, milestone_2Parser.XOR, milestone_2Parser.INT_LIT, milestone_2Parser.INT8_LIT, milestone_2Parser.INT16_LIT, milestone_2Parser.INT32_LIT, milestone_2Parser.INT64_LIT, milestone_2Parser.UINT_LIT, milestone_2Parser.UINT8_LIT, milestone_2Parser.UINT16_LIT, milestone_2Parser.UINT32_LIT, milestone_2Parser.UINT64_LIT, milestone_2Parser.FLOAT_LIT, milestone_2Parser.FLOAT32_LIT, milestone_2Parser.FLOAT64_LIT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 984
                self.simpleExpr()

            elif token in [milestone_2Parser.CONCEPT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 985
                self.match(milestone_2Parser.CONCEPT)
                self.state = 986
                self.typeClass()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PostExprBlocksContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.StmtContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.StmtContext,i)


        def doBlock(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.DoBlockContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.DoBlockContext,i)


        def exprList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ExprListContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ExprListContext,i)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ExprContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_postExprBlocks

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostExprBlocks" ):
                listener.enterPostExprBlocks(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostExprBlocks" ):
                listener.exitPostExprBlocks(self)




    def postExprBlocks(self):

        localctx = milestone_2Parser.PostExprBlocksContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_postExprBlocks)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 989
            self.match(milestone_2Parser.COLON)
            self.state = 991
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << milestone_2Parser.T__2) | (1 << milestone_2Parser.T__3) | (1 << milestone_2Parser.T__12) | (1 << milestone_2Parser.T__15) | (1 << milestone_2Parser.OP9) | (1 << milestone_2Parser.OP8) | (1 << milestone_2Parser.OP7) | (1 << milestone_2Parser.OP6) | (1 << milestone_2Parser.OP5) | (1 << milestone_2Parser.OP4) | (1 << milestone_2Parser.OP3) | (1 << milestone_2Parser.OP2) | (1 << milestone_2Parser.OP1) | (1 << milestone_2Parser.OP0) | (1 << milestone_2Parser.IDENT) | (1 << milestone_2Parser.COMMENT) | (1 << milestone_2Parser.TRIPLESTR_LIT) | (1 << milestone_2Parser.STR_LIT) | (1 << milestone_2Parser.CHAR_LIT) | (1 << milestone_2Parser.RSTR_LIT) | (1 << milestone_2Parser.GENERALIZED_STR_LIT) | (1 << milestone_2Parser.GENERALIZED_TRIPLESTR_LIT) | (1 << milestone_2Parser.OPEN_PAREN) | (1 << milestone_2Parser.OPEN_BRACE) | (1 << milestone_2Parser.OPEN_BRACK))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (milestone_2Parser.KEYW - 66)) | (1 << (milestone_2Parser.AND - 66)) | (1 << (milestone_2Parser.VARIABLE - 66)) | (1 << (milestone_2Parser.BIND - 66)) | (1 << (milestone_2Parser.BREAK - 66)) | (1 << (milestone_2Parser.CAST - 66)) | (1 << (milestone_2Parser.DISCARD - 66)) | (1 << (milestone_2Parser.DISTINCT - 66)) | (1 << (milestone_2Parser.DIV - 66)) | (1 << (milestone_2Parser.ENUM - 66)) | (1 << (milestone_2Parser.FROM - 66)) | (1 << (milestone_2Parser.IMPORT - 66)) | (1 << (milestone_2Parser.IN - 66)) | (1 << (milestone_2Parser.INCLUDE - 66)) | (1 << (milestone_2Parser.IS - 66)) | (1 << (milestone_2Parser.ISNOT - 66)) | (1 << (milestone_2Parser.ITERATOR - 66)) | (1 << (milestone_2Parser.MOD - 66)) | (1 << (milestone_2Parser.NIL - 66)) | (1 << (milestone_2Parser.NOT - 66)) | (1 << (milestone_2Parser.NOTIN - 66)) | (1 << (milestone_2Parser.OBJECT - 66)) | (1 << (milestone_2Parser.OF - 66)) | (1 << (milestone_2Parser.OR - 66)) | (1 << (milestone_2Parser.OUT - 66)) | (1 << (milestone_2Parser.PROC - 66)) | (1 << (milestone_2Parser.PTR - 66)) | (1 << (milestone_2Parser.RAISE - 66)) | (1 << (milestone_2Parser.REF - 66)) | (1 << (milestone_2Parser.RETURN - 66)) | (1 << (milestone_2Parser.SHL - 66)) | (1 << (milestone_2Parser.SHR - 66)) | (1 << (milestone_2Parser.STATIC - 66)) | (1 << (milestone_2Parser.TUPLE - 66)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (milestone_2Parser.XOR - 131)) | (1 << (milestone_2Parser.YIELD - 131)) | (1 << (milestone_2Parser.INT_LIT - 131)) | (1 << (milestone_2Parser.INT8_LIT - 131)) | (1 << (milestone_2Parser.INT16_LIT - 131)) | (1 << (milestone_2Parser.INT32_LIT - 131)) | (1 << (milestone_2Parser.INT64_LIT - 131)) | (1 << (milestone_2Parser.UINT_LIT - 131)) | (1 << (milestone_2Parser.UINT8_LIT - 131)) | (1 << (milestone_2Parser.UINT16_LIT - 131)) | (1 << (milestone_2Parser.UINT32_LIT - 131)) | (1 << (milestone_2Parser.UINT64_LIT - 131)) | (1 << (milestone_2Parser.FLOAT_LIT - 131)) | (1 << (milestone_2Parser.FLOAT32_LIT - 131)) | (1 << (milestone_2Parser.FLOAT64_LIT - 131)))) != 0):
                self.state = 990
                self.stmt()


            self.state = 1019
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==milestone_2Parser.T__0:
                self.state = 1017
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
                if la_ == 1:
                    self.state = 993
                    self.match(milestone_2Parser.T__0)
                    self.state = 994
                    self.doBlock()
                    pass

                elif la_ == 2:
                    self.state = 995
                    self.match(milestone_2Parser.T__0)
                    self.state = 996
                    self.match(milestone_2Parser.OF)
                    self.state = 997
                    self.exprList()
                    self.state = 998
                    self.match(milestone_2Parser.COLON)
                    self.state = 999
                    self.stmt()
                    pass

                elif la_ == 3:
                    self.state = 1001
                    self.match(milestone_2Parser.T__0)
                    self.state = 1002
                    self.match(milestone_2Parser.ELIF)
                    self.state = 1003
                    self.expr()
                    self.state = 1004
                    self.match(milestone_2Parser.COLON)
                    self.state = 1005
                    self.stmt()
                    pass

                elif la_ == 4:
                    self.state = 1007
                    self.match(milestone_2Parser.T__0)
                    self.state = 1008
                    self.match(milestone_2Parser.EXCEPT)
                    self.state = 1009
                    self.exprList()
                    self.state = 1010
                    self.match(milestone_2Parser.COLON)
                    self.state = 1011
                    self.stmt()
                    pass

                elif la_ == 5:
                    self.state = 1013
                    self.match(milestone_2Parser.T__0)
                    self.state = 1014
                    self.match(milestone_2Parser.ELSE)
                    self.state = 1015
                    self.match(milestone_2Parser.COLON)
                    self.state = 1016
                    self.stmt()
                    pass


                self.state = 1021
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExprStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleExpr(self):
            return self.getTypedRuleContext(milestone_2Parser.SimpleExprContext,0)


        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ExprContext,i)


        def doBlocks(self):
            return self.getTypedRuleContext(milestone_2Parser.DoBlocksContext,0)


        def macroColon(self):
            return self.getTypedRuleContext(milestone_2Parser.MacroColonContext,0)


        def colonBody(self):
            return self.getTypedRuleContext(milestone_2Parser.ColonBodyContext,0)


        def comma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.CommaContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.CommaContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_exprStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprStmt" ):
                listener.enterExprStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprStmt" ):
                listener.exitExprStmt(self)




    def exprStmt(self):

        localctx = milestone_2Parser.ExprStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_exprStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1022
            self.simpleExpr()
            self.state = 1043
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
            if la_ == 1:
                self.state = 1023
                self.match(milestone_2Parser.T__4)
                self.state = 1024
                self.optInd()
                self.state = 1025
                self.expr()
                self.state = 1027
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
                if la_ == 1:
                    self.state = 1026
                    self.colonBody()



            elif la_ == 2:
                self.state = 1041
                token = self._input.LA(1)
                if token in [milestone_2Parser.T__3, milestone_2Parser.T__15, milestone_2Parser.OP9, milestone_2Parser.OP8, milestone_2Parser.OP7, milestone_2Parser.OP6, milestone_2Parser.OP5, milestone_2Parser.OP4, milestone_2Parser.OP3, milestone_2Parser.OP2, milestone_2Parser.OP1, milestone_2Parser.OP0, milestone_2Parser.IDENT, milestone_2Parser.TRIPLESTR_LIT, milestone_2Parser.STR_LIT, milestone_2Parser.CHAR_LIT, milestone_2Parser.RSTR_LIT, milestone_2Parser.GENERALIZED_STR_LIT, milestone_2Parser.GENERALIZED_TRIPLESTR_LIT, milestone_2Parser.OPEN_PAREN, milestone_2Parser.OPEN_BRACE, milestone_2Parser.OPEN_BRACK, milestone_2Parser.KEYW, milestone_2Parser.AND, milestone_2Parser.VARIABLE, milestone_2Parser.BIND, milestone_2Parser.BLOCK, milestone_2Parser.CASE, milestone_2Parser.CAST, milestone_2Parser.DISTINCT, milestone_2Parser.DIV, milestone_2Parser.ENUM, milestone_2Parser.FOR, milestone_2Parser.IF, milestone_2Parser.IN, milestone_2Parser.IS, milestone_2Parser.ISNOT, milestone_2Parser.ITERATOR, milestone_2Parser.MOD, milestone_2Parser.NIL, milestone_2Parser.NOT, milestone_2Parser.NOTIN, milestone_2Parser.OBJECT, milestone_2Parser.OF, milestone_2Parser.OR, milestone_2Parser.OUT, milestone_2Parser.PROC, milestone_2Parser.PTR, milestone_2Parser.REF, milestone_2Parser.SHL, milestone_2Parser.SHR, milestone_2Parser.STATIC, milestone_2Parser.TRY, milestone_2Parser.TUPLE, milestone_2Parser.WHEN, milestone_2Parser.XOR, milestone_2Parser.INT_LIT, milestone_2Parser.INT8_LIT, milestone_2Parser.INT16_LIT, milestone_2Parser.INT32_LIT, milestone_2Parser.INT64_LIT, milestone_2Parser.UINT_LIT, milestone_2Parser.UINT8_LIT, milestone_2Parser.UINT16_LIT, milestone_2Parser.UINT32_LIT, milestone_2Parser.UINT64_LIT, milestone_2Parser.FLOAT_LIT, milestone_2Parser.FLOAT32_LIT, milestone_2Parser.FLOAT64_LIT]:
                    self.state = 1029
                    self.expr()
                    self.state = 1035
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==milestone_2Parser.COMMA:
                        self.state = 1030
                        self.comma()
                        self.state = 1031
                        self.expr()
                        self.state = 1037
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1038
                    self.doBlocks()

                elif token in [milestone_2Parser.COLON]:
                    self.state = 1040
                    self.macroColon()

                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ImportStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.OptIndContext,i)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ExprContext,i)


        def comma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.CommaContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.CommaContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_importStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportStmt" ):
                listener.enterImportStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportStmt" ):
                listener.exitImportStmt(self)




    def importStmt(self):

        localctx = milestone_2Parser.ImportStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_importStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1045
            self.match(milestone_2Parser.IMPORT)
            self.state = 1046
            self.optInd()
            self.state = 1047
            self.expr()
            self.state = 1067
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
            if la_ == 1:
                self.state = 1053
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,106,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1048
                        self.comma()
                        self.state = 1049
                        self.expr() 
                    self.state = 1055
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,106,self._ctx)

                pass

            elif la_ == 2:
                self.state = 1056
                self.match(milestone_2Parser.EXCEPT)
                self.state = 1057
                self.optInd()

                self.state = 1058
                self.expr()
                self.state = 1064
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,107,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1059
                        self.comma()
                        self.state = 1060
                        self.expr() 
                    self.state = 1066
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,107,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IncludeStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ExprContext,i)


        def comma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.CommaContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.CommaContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_includeStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIncludeStmt" ):
                listener.enterIncludeStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIncludeStmt" ):
                listener.exitIncludeStmt(self)




    def includeStmt(self):

        localctx = milestone_2Parser.IncludeStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_includeStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1069
            self.match(milestone_2Parser.INCLUDE)
            self.state = 1070
            self.optInd()
            self.state = 1071
            self.expr()
            self.state = 1077
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,109,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1072
                    self.comma()
                    self.state = 1073
                    self.expr() 
                self.state = 1079
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,109,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FromStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def moduleName(self):
            return self.getTypedRuleContext(milestone_2Parser.ModuleNameContext,0)


        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ExprContext,i)


        def comma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.CommaContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.CommaContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_fromStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFromStmt" ):
                listener.enterFromStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFromStmt" ):
                listener.exitFromStmt(self)




    def fromStmt(self):

        localctx = milestone_2Parser.FromStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_fromStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1080
            self.match(milestone_2Parser.FROM)
            self.state = 1081
            self.moduleName()
            self.state = 1082
            self.match(milestone_2Parser.IMPORT)
            self.state = 1083
            self.optInd()
            self.state = 1084
            self.expr()
            self.state = 1090
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,110,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1085
                    self.comma()
                    self.state = 1086
                    self.expr() 
                self.state = 1092
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,110,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReturnStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def expr(self):
            return self.getTypedRuleContext(milestone_2Parser.ExprContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_returnStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStmt" ):
                listener.enterReturnStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStmt" ):
                listener.exitReturnStmt(self)




    def returnStmt(self):

        localctx = milestone_2Parser.ReturnStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_returnStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1093
            self.match(milestone_2Parser.RETURN)
            self.state = 1094
            self.optInd()
            self.state = 1096
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
            if la_ == 1:
                self.state = 1095
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RaiseStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def expr(self):
            return self.getTypedRuleContext(milestone_2Parser.ExprContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_raiseStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRaiseStmt" ):
                listener.enterRaiseStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRaiseStmt" ):
                listener.exitRaiseStmt(self)




    def raiseStmt(self):

        localctx = milestone_2Parser.RaiseStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_raiseStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1098
            self.match(milestone_2Parser.RAISE)
            self.state = 1099
            self.optInd()
            self.state = 1101
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
            if la_ == 1:
                self.state = 1100
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class YieldStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def expr(self):
            return self.getTypedRuleContext(milestone_2Parser.ExprContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_yieldStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYieldStmt" ):
                listener.enterYieldStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYieldStmt" ):
                listener.exitYieldStmt(self)




    def yieldStmt(self):

        localctx = milestone_2Parser.YieldStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_yieldStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1103
            self.match(milestone_2Parser.YIELD)
            self.state = 1104
            self.optInd()
            self.state = 1106
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
            if la_ == 1:
                self.state = 1105
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DiscardStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def expr(self):
            return self.getTypedRuleContext(milestone_2Parser.ExprContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_discardStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiscardStmt" ):
                listener.enterDiscardStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiscardStmt" ):
                listener.exitDiscardStmt(self)




    def discardStmt(self):

        localctx = milestone_2Parser.DiscardStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_discardStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1108
            self.match(milestone_2Parser.DISCARD)
            self.state = 1109
            self.optInd()
            self.state = 1111
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
            if la_ == 1:
                self.state = 1110
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BreakStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def expr(self):
            return self.getTypedRuleContext(milestone_2Parser.ExprContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_breakStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreakStmt" ):
                listener.enterBreakStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreakStmt" ):
                listener.exitBreakStmt(self)




    def breakStmt(self):

        localctx = milestone_2Parser.BreakStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_breakStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1113
            self.match(milestone_2Parser.BREAK)
            self.state = 1114
            self.optInd()
            self.state = 1116
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,115,self._ctx)
            if la_ == 1:
                self.state = 1115
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ContinueStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def expr(self):
            return self.getTypedRuleContext(milestone_2Parser.ExprContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_continueStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinueStmt" ):
                listener.enterContinueStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinueStmt" ):
                listener.exitContinueStmt(self)




    def continueStmt(self):

        localctx = milestone_2Parser.ContinueStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_continueStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1118
            self.match(milestone_2Parser.BREAK)
            self.state = 1119
            self.optInd()
            self.state = 1121
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
            if la_ == 1:
                self.state = 1120
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CondStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ExprContext,i)


        def colcom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ColcomContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ColcomContext,i)


        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.StmtContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.StmtContext,i)


        def COMMENT(self):
            return self.getToken(milestone_2Parser.COMMENT, 0)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_condStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondStmt" ):
                listener.enterCondStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondStmt" ):
                listener.exitCondStmt(self)




    def condStmt(self):

        localctx = milestone_2Parser.CondStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_condStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1123
            self.expr()
            self.state = 1124
            self.colcom()
            self.state = 1125
            self.stmt()
            self.state = 1127
            _la = self._input.LA(1)
            if _la==milestone_2Parser.COMMENT:
                self.state = 1126
                self.match(milestone_2Parser.COMMENT)


            self.state = 1137
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,118,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1129
                    self.match(milestone_2Parser.T__0)
                    self.state = 1130
                    self.match(milestone_2Parser.ELIF)
                    self.state = 1131
                    self.expr()
                    self.state = 1132
                    self.colcom()
                    self.state = 1133
                    self.stmt() 
                self.state = 1139
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,118,self._ctx)

            self.state = 1145
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
            if la_ == 1:
                self.state = 1140
                self.match(milestone_2Parser.T__0)
                self.state = 1141
                self.match(milestone_2Parser.ELSE)
                self.state = 1142
                self.colcom()
                self.state = 1143
                self.stmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IfStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def condStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.CondStmtContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_ifStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStmt" ):
                listener.enterIfStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStmt" ):
                listener.exitIfStmt(self)




    def ifStmt(self):

        localctx = milestone_2Parser.IfStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_ifStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1147
            self.match(milestone_2Parser.IF)
            self.state = 1148
            self.condStmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WhenStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def condStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.CondStmtContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_whenStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenStmt" ):
                listener.enterWhenStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenStmt" ):
                listener.exitWhenStmt(self)




    def whenStmt(self):

        localctx = milestone_2Parser.WhenStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_whenStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1150
            self.match(milestone_2Parser.WHEN)
            self.state = 1151
            self.condStmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WhileStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(milestone_2Parser.ExprContext,0)


        def colcom(self):
            return self.getTypedRuleContext(milestone_2Parser.ColcomContext,0)


        def stmt(self):
            return self.getTypedRuleContext(milestone_2Parser.StmtContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_whileStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStmt" ):
                listener.enterWhileStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStmt" ):
                listener.exitWhileStmt(self)




    def whileStmt(self):

        localctx = milestone_2Parser.WhileStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_whileStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1153
            self.match(milestone_2Parser.WHILE)
            self.state = 1154
            self.expr()
            self.state = 1155
            self.colcom()
            self.state = 1156
            self.stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OfBranchContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exprList(self):
            return self.getTypedRuleContext(milestone_2Parser.ExprListContext,0)


        def colcom(self):
            return self.getTypedRuleContext(milestone_2Parser.ColcomContext,0)


        def stmt(self):
            return self.getTypedRuleContext(milestone_2Parser.StmtContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_ofBranch

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOfBranch" ):
                listener.enterOfBranch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOfBranch" ):
                listener.exitOfBranch(self)




    def ofBranch(self):

        localctx = milestone_2Parser.OfBranchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_ofBranch)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1158
            self.match(milestone_2Parser.OF)
            self.state = 1159
            self.exprList()
            self.state = 1160
            self.colcom()
            self.state = 1161
            self.stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OfBranchesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ofBranch(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.OfBranchContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.OfBranchContext,i)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ExprContext,i)


        def colcom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ColcomContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ColcomContext,i)


        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.StmtContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.StmtContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_ofBranches

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOfBranches" ):
                listener.enterOfBranches(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOfBranches" ):
                listener.exitOfBranches(self)




    def ofBranches(self):

        localctx = milestone_2Parser.OfBranchesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_ofBranches)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1163
            self.ofBranch()
            self.state = 1168
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,120,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1164
                    self.match(milestone_2Parser.T__0)
                    self.state = 1165
                    self.ofBranch() 
                self.state = 1170
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,120,self._ctx)

            self.state = 1179
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,121,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1171
                    self.match(milestone_2Parser.T__0)
                    self.state = 1172
                    self.match(milestone_2Parser.ELIF)
                    self.state = 1173
                    self.expr()
                    self.state = 1174
                    self.colcom()
                    self.state = 1175
                    self.stmt() 
                self.state = 1181
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,121,self._ctx)

            self.state = 1187
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
            if la_ == 1:
                self.state = 1182
                self.match(milestone_2Parser.T__0)
                self.state = 1183
                self.match(milestone_2Parser.ELSE)
                self.state = 1184
                self.colcom()
                self.state = 1185
                self.stmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CaseStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(milestone_2Parser.ExprContext,0)


        def ofBranches(self):
            return self.getTypedRuleContext(milestone_2Parser.OfBranchesContext,0)


        def COMMENT(self):
            return self.getToken(milestone_2Parser.COMMENT, 0)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_caseStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseStmt" ):
                listener.enterCaseStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseStmt" ):
                listener.exitCaseStmt(self)




    def caseStmt(self):

        localctx = milestone_2Parser.CaseStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_caseStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1189
            self.match(milestone_2Parser.CASE)
            self.state = 1190
            self.expr()
            self.state = 1192
            _la = self._input.LA(1)
            if _la==milestone_2Parser.COLON:
                self.state = 1191
                self.match(milestone_2Parser.COLON)


            self.state = 1195
            _la = self._input.LA(1)
            if _la==milestone_2Parser.COMMENT:
                self.state = 1194
                self.match(milestone_2Parser.COMMENT)


            self.state = 1203
            token = self._input.LA(1)
            if token in [milestone_2Parser.T__2]:
                self.state = 1197
                self.match(milestone_2Parser.T__2)
                self.state = 1198
                self.ofBranches()
                self.state = 1199
                self.match(milestone_2Parser.T__16)

            elif token in [milestone_2Parser.T__0]:
                self.state = 1201
                self.match(milestone_2Parser.T__0)
                self.state = 1202
                self.ofBranches()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TryStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colcom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ColcomContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ColcomContext,i)


        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.StmtContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.StmtContext,i)


        def exprList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ExprListContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ExprListContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_tryStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryStmt" ):
                listener.enterTryStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryStmt" ):
                listener.exitTryStmt(self)




    def tryStmt(self):

        localctx = milestone_2Parser.TryStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_tryStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1205
            self.match(milestone_2Parser.TRY)
            self.state = 1206
            self.colcom()
            self.state = 1207
            self.stmt()
            self.state = 1218
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,127,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1209
                    _la = self._input.LA(1)
                    if _la==milestone_2Parser.T__0:
                        self.state = 1208
                        self.match(milestone_2Parser.T__0)


                    self.state = 1211
                    self.match(milestone_2Parser.EXCEPT)
                    self.state = 1212
                    self.exprList()
                    self.state = 1213
                    self.colcom()
                    self.state = 1214
                    self.stmt() 
                self.state = 1220
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,127,self._ctx)

            self.state = 1228
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,129,self._ctx)
            if la_ == 1:
                self.state = 1222
                _la = self._input.LA(1)
                if _la==milestone_2Parser.T__0:
                    self.state = 1221
                    self.match(milestone_2Parser.T__0)


                self.state = 1224
                self.match(milestone_2Parser.FINALLY)
                self.state = 1225
                self.colcom()
                self.state = 1226
                self.stmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TryExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colcom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ColcomContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ColcomContext,i)


        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.StmtContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.StmtContext,i)


        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.OptIndContext,i)


        def exprList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ExprListContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ExprListContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_tryExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryExpr" ):
                listener.enterTryExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryExpr" ):
                listener.exitTryExpr(self)




    def tryExpr(self):

        localctx = milestone_2Parser.TryExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_tryExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1230
            self.match(milestone_2Parser.TRY)
            self.state = 1231
            self.colcom()
            self.state = 1232
            self.stmt()
            self.state = 1241
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,130,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1233
                    self.optInd()
                    self.state = 1234
                    self.match(milestone_2Parser.EXCEPT)
                    self.state = 1235
                    self.exprList()
                    self.state = 1236
                    self.colcom()
                    self.state = 1237
                    self.stmt() 
                self.state = 1243
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,130,self._ctx)

            self.state = 1249
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,131,self._ctx)
            if la_ == 1:
                self.state = 1244
                self.optInd()
                self.state = 1245
                self.match(milestone_2Parser.FINALLY)
                self.state = 1246
                self.colcom()
                self.state = 1247
                self.stmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExceptBlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colcom(self):
            return self.getTypedRuleContext(milestone_2Parser.ColcomContext,0)


        def stmt(self):
            return self.getTypedRuleContext(milestone_2Parser.StmtContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_exceptBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExceptBlock" ):
                listener.enterExceptBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExceptBlock" ):
                listener.exitExceptBlock(self)




    def exceptBlock(self):

        localctx = milestone_2Parser.ExceptBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_exceptBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1251
            self.match(milestone_2Parser.EXCEPT)
            self.state = 1252
            self.colcom()
            self.state = 1253
            self.stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BlockStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colcom(self):
            return self.getTypedRuleContext(milestone_2Parser.ColcomContext,0)


        def stmt(self):
            return self.getTypedRuleContext(milestone_2Parser.StmtContext,0)


        def symbol(self):
            return self.getTypedRuleContext(milestone_2Parser.SymbolContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_blockStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockStmt" ):
                listener.enterBlockStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockStmt" ):
                listener.exitBlockStmt(self)




    def blockStmt(self):

        localctx = milestone_2Parser.BlockStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_blockStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1255
            self.match(milestone_2Parser.BLOCK)
            self.state = 1257
            _la = self._input.LA(1)
            if ((((_la - 4)) & ~0x3f) == 0 and ((1 << (_la - 4)) & ((1 << (milestone_2Parser.T__3 - 4)) | (1 << (milestone_2Parser.IDENT - 4)) | (1 << (milestone_2Parser.KEYW - 4)))) != 0):
                self.state = 1256
                self.symbol()


            self.state = 1259
            self.colcom()
            self.state = 1260
            self.stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BlockExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colcom(self):
            return self.getTypedRuleContext(milestone_2Parser.ColcomContext,0)


        def stmt(self):
            return self.getTypedRuleContext(milestone_2Parser.StmtContext,0)


        def symbol(self):
            return self.getTypedRuleContext(milestone_2Parser.SymbolContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_blockExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockExpr" ):
                listener.enterBlockExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockExpr" ):
                listener.exitBlockExpr(self)




    def blockExpr(self):

        localctx = milestone_2Parser.BlockExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_blockExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1262
            self.match(milestone_2Parser.BLOCK)
            self.state = 1264
            _la = self._input.LA(1)
            if ((((_la - 4)) & ~0x3f) == 0 and ((1 << (_la - 4)) & ((1 << (milestone_2Parser.T__3 - 4)) | (1 << (milestone_2Parser.IDENT - 4)) | (1 << (milestone_2Parser.KEYW - 4)))) != 0):
                self.state = 1263
                self.symbol()


            self.state = 1266
            self.colcom()
            self.state = 1267
            self.stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StaticStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colcom(self):
            return self.getTypedRuleContext(milestone_2Parser.ColcomContext,0)


        def stmt(self):
            return self.getTypedRuleContext(milestone_2Parser.StmtContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_staticStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStaticStmt" ):
                listener.enterStaticStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStaticStmt" ):
                listener.exitStaticStmt(self)




    def staticStmt(self):

        localctx = milestone_2Parser.StaticStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_staticStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1269
            self.match(milestone_2Parser.STATIC)
            self.state = 1270
            self.colcom()
            self.state = 1271
            self.stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeferStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colcom(self):
            return self.getTypedRuleContext(milestone_2Parser.ColcomContext,0)


        def stmt(self):
            return self.getTypedRuleContext(milestone_2Parser.StmtContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_deferStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeferStmt" ):
                listener.enterDeferStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeferStmt" ):
                listener.exitDeferStmt(self)




    def deferStmt(self):

        localctx = milestone_2Parser.DeferStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_deferStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1273
            self.match(milestone_2Parser.DEFER)
            self.state = 1274
            self.colcom()
            self.state = 1275
            self.stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AsmStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STR_LIT(self):
            return self.getToken(milestone_2Parser.STR_LIT, 0)

        def RSTR_LIT(self):
            return self.getToken(milestone_2Parser.RSTR_LIT, 0)

        def TRIPLESTR_LIT(self):
            return self.getToken(milestone_2Parser.TRIPLESTR_LIT, 0)

        def pragma(self):
            return self.getTypedRuleContext(milestone_2Parser.PragmaContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_asmStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAsmStmt" ):
                listener.enterAsmStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAsmStmt" ):
                listener.exitAsmStmt(self)




    def asmStmt(self):

        localctx = milestone_2Parser.AsmStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_asmStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1277
            self.match(milestone_2Parser.ASM)
            self.state = 1279
            _la = self._input.LA(1)
            if _la==milestone_2Parser.T__12:
                self.state = 1278
                self.pragma()


            self.state = 1281
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << milestone_2Parser.TRIPLESTR_LIT) | (1 << milestone_2Parser.STR_LIT) | (1 << milestone_2Parser.RSTR_LIT))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GenericParamContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.SymbolContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.SymbolContext,i)


        def comma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.CommaContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.CommaContext,i)


        def colon(self):
            return self.getTypedRuleContext(milestone_2Parser.ColonContext,0)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ExprContext,i)


        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_genericParam

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericParam" ):
                listener.enterGenericParam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericParam" ):
                listener.exitGenericParam(self)




    def genericParam(self):

        localctx = milestone_2Parser.GenericParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_genericParam)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1283
            self.symbol()
            self.state = 1289
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,135,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1284
                    self.comma()
                    self.state = 1285
                    self.symbol() 
                self.state = 1291
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,135,self._ctx)

            self.state = 1295
            _la = self._input.LA(1)
            if _la==milestone_2Parser.COLON:
                self.state = 1292
                self.colon()
                self.state = 1293
                self.expr()


            self.state = 1301
            _la = self._input.LA(1)
            if _la==milestone_2Parser.T__4:
                self.state = 1297
                self.match(milestone_2Parser.T__4)
                self.state = 1298
                self.optInd()
                self.state = 1299
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GenericParamListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def optPar(self):
            return self.getTypedRuleContext(milestone_2Parser.OptParContext,0)


        def genericParam(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.GenericParamContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.GenericParamContext,i)


        def comma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.CommaContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.CommaContext,i)


        def semicolon(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.SemicolonContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.SemicolonContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_genericParamList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericParamList" ):
                listener.enterGenericParamList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericParamList" ):
                listener.exitGenericParamList(self)




    def genericParamList(self):

        localctx = milestone_2Parser.GenericParamListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_genericParamList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1303
            self.match(milestone_2Parser.OPEN_BRACK)
            self.state = 1304
            self.optInd()
            self.state = 1317
            _la = self._input.LA(1)
            if ((((_la - 4)) & ~0x3f) == 0 and ((1 << (_la - 4)) & ((1 << (milestone_2Parser.T__3 - 4)) | (1 << (milestone_2Parser.IDENT - 4)) | (1 << (milestone_2Parser.KEYW - 4)))) != 0):
                self.state = 1305
                self.genericParam()
                self.state = 1314
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==milestone_2Parser.COMMA or _la==milestone_2Parser.SEMI_COLON:
                    self.state = 1308
                    token = self._input.LA(1)
                    if token in [milestone_2Parser.COMMA]:
                        self.state = 1306
                        self.comma()

                    elif token in [milestone_2Parser.SEMI_COLON]:
                        self.state = 1307
                        self.semicolon()

                    else:
                        raise NoViableAltException(self)

                    self.state = 1310
                    self.genericParam()
                    self.state = 1316
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1319
            self.optPar()
            self.state = 1320
            self.match(milestone_2Parser.CLOSE_BRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PatternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stmt(self):
            return self.getTypedRuleContext(milestone_2Parser.StmtContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPattern" ):
                listener.enterPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPattern" ):
                listener.exitPattern(self)




    def pattern(self):

        localctx = milestone_2Parser.PatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1322
            self.match(milestone_2Parser.OPEN_BRACE)
            self.state = 1323
            self.stmt()
            self.state = 1324
            self.match(milestone_2Parser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IndAndCommentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMENT(self):
            return self.getToken(milestone_2Parser.COMMENT, 0)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_indAndComment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndAndComment" ):
                listener.enterIndAndComment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndAndComment" ):
                listener.exitIndAndComment(self)




    def indAndComment(self):

        localctx = milestone_2Parser.IndAndCommentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_indAndComment)
        self._la = 0 # Token type
        try:
            self.state = 1333
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,143,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1328
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,141,self._ctx)
                if la_ == 1:
                    self.state = 1326
                    self.match(milestone_2Parser.T__2)
                    self.state = 1327
                    self.match(milestone_2Parser.COMMENT)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1331
                _la = self._input.LA(1)
                if _la==milestone_2Parser.COMMENT:
                    self.state = 1330
                    self.match(milestone_2Parser.COMMENT)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RoutineContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def identVis(self):
            return self.getTypedRuleContext(milestone_2Parser.IdentVisContext,0)


        def paramListColon(self):
            return self.getTypedRuleContext(milestone_2Parser.ParamListColonContext,0)


        def indAndComment(self):
            return self.getTypedRuleContext(milestone_2Parser.IndAndCommentContext,0)


        def pattern(self):
            return self.getTypedRuleContext(milestone_2Parser.PatternContext,0)


        def genericParamList(self):
            return self.getTypedRuleContext(milestone_2Parser.GenericParamListContext,0)


        def pragma(self):
            return self.getTypedRuleContext(milestone_2Parser.PragmaContext,0)


        def stmt(self):
            return self.getTypedRuleContext(milestone_2Parser.StmtContext,0)


        def COMMENT(self):
            return self.getToken(milestone_2Parser.COMMENT, 0)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_routine

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoutine" ):
                listener.enterRoutine(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoutine" ):
                listener.exitRoutine(self)




    def routine(self):

        localctx = milestone_2Parser.RoutineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_routine)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1335
            self.optInd()
            self.state = 1336
            self.identVis()
            self.state = 1338
            _la = self._input.LA(1)
            if _la==milestone_2Parser.OPEN_BRACE:
                self.state = 1337
                self.pattern()


            self.state = 1341
            _la = self._input.LA(1)
            if _la==milestone_2Parser.OPEN_BRACK:
                self.state = 1340
                self.genericParamList()


            self.state = 1343
            self.paramListColon()
            self.state = 1345
            _la = self._input.LA(1)
            if _la==milestone_2Parser.T__12:
                self.state = 1344
                self.pragma()


            self.state = 1352
            _la = self._input.LA(1)
            if _la==milestone_2Parser.T__4:
                self.state = 1347
                self.match(milestone_2Parser.T__4)
                self.state = 1349
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,147,self._ctx)
                if la_ == 1:
                    self.state = 1348
                    self.match(milestone_2Parser.COMMENT)


                self.state = 1351
                self.stmt()


            self.state = 1354
            self.indAndComment()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CommentStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMENT(self):
            return self.getToken(milestone_2Parser.COMMENT, 0)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_commentStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommentStmt" ):
                listener.enterCommentStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommentStmt" ):
                listener.exitCommentStmt(self)




    def commentStmt(self):

        localctx = milestone_2Parser.CommentStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_commentStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1356
            self.match(milestone_2Parser.COMMENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SectionTypeDefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeDef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.TypeDefContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.TypeDefContext,i)


        def COMMENT(self, i:int=None):
            if i is None:
                return self.getTokens(milestone_2Parser.COMMENT)
            else:
                return self.getToken(milestone_2Parser.COMMENT, i)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_sectionTypeDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSectionTypeDef" ):
                listener.enterSectionTypeDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSectionTypeDef" ):
                listener.exitSectionTypeDef(self)




    def sectionTypeDef(self):

        localctx = milestone_2Parser.SectionTypeDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_sectionTypeDef)
        self._la = 0 # Token type
        try:
            self.state = 1378
            token = self._input.LA(1)
            if token in [milestone_2Parser.T__3, milestone_2Parser.IDENT, milestone_2Parser.COMMENT, milestone_2Parser.KEYW]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1359
                _la = self._input.LA(1)
                if _la==milestone_2Parser.COMMENT:
                    self.state = 1358
                    self.match(milestone_2Parser.COMMENT)


                self.state = 1361
                self.typeDef()

            elif token in [milestone_2Parser.T__2]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1362
                self.match(milestone_2Parser.T__2)
                self.state = 1365
                token = self._input.LA(1)
                if token in [milestone_2Parser.T__3, milestone_2Parser.IDENT, milestone_2Parser.KEYW]:
                    self.state = 1363
                    self.typeDef()

                elif token in [milestone_2Parser.COMMENT]:
                    self.state = 1364
                    self.match(milestone_2Parser.COMMENT)

                else:
                    raise NoViableAltException(self)

                self.state = 1374
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==milestone_2Parser.T__0:
                    self.state = 1367
                    self.match(milestone_2Parser.T__0)
                    self.state = 1370
                    token = self._input.LA(1)
                    if token in [milestone_2Parser.T__3, milestone_2Parser.IDENT, milestone_2Parser.KEYW]:
                        self.state = 1368
                        self.typeDef()

                    elif token in [milestone_2Parser.COMMENT]:
                        self.state = 1369
                        self.match(milestone_2Parser.COMMENT)

                    else:
                        raise NoViableAltException(self)

                    self.state = 1376
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1377
                self.match(milestone_2Parser.T__16)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SectionConstantContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ConstantContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ConstantContext,i)


        def COMMENT(self, i:int=None):
            if i is None:
                return self.getTokens(milestone_2Parser.COMMENT)
            else:
                return self.getToken(milestone_2Parser.COMMENT, i)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_sectionConstant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSectionConstant" ):
                listener.enterSectionConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSectionConstant" ):
                listener.exitSectionConstant(self)




    def sectionConstant(self):

        localctx = milestone_2Parser.SectionConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_sectionConstant)
        self._la = 0 # Token type
        try:
            self.state = 1400
            token = self._input.LA(1)
            if token in [milestone_2Parser.T__3, milestone_2Parser.IDENT, milestone_2Parser.COMMENT, milestone_2Parser.KEYW]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1381
                _la = self._input.LA(1)
                if _la==milestone_2Parser.COMMENT:
                    self.state = 1380
                    self.match(milestone_2Parser.COMMENT)


                self.state = 1383
                self.constant()

            elif token in [milestone_2Parser.T__2]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1384
                self.match(milestone_2Parser.T__2)
                self.state = 1387
                token = self._input.LA(1)
                if token in [milestone_2Parser.T__3, milestone_2Parser.IDENT, milestone_2Parser.KEYW]:
                    self.state = 1385
                    self.constant()

                elif token in [milestone_2Parser.COMMENT]:
                    self.state = 1386
                    self.match(milestone_2Parser.COMMENT)

                else:
                    raise NoViableAltException(self)

                self.state = 1396
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==milestone_2Parser.T__0:
                    self.state = 1389
                    self.match(milestone_2Parser.T__0)
                    self.state = 1392
                    token = self._input.LA(1)
                    if token in [milestone_2Parser.T__3, milestone_2Parser.IDENT, milestone_2Parser.KEYW]:
                        self.state = 1390
                        self.constant()

                    elif token in [milestone_2Parser.COMMENT]:
                        self.state = 1391
                        self.match(milestone_2Parser.COMMENT)

                    else:
                        raise NoViableAltException(self)

                    self.state = 1398
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1399
                self.match(milestone_2Parser.T__16)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SectionVariableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.VariableContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.VariableContext,i)


        def COMMENT(self, i:int=None):
            if i is None:
                return self.getTokens(milestone_2Parser.COMMENT)
            else:
                return self.getToken(milestone_2Parser.COMMENT, i)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_sectionVariable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSectionVariable" ):
                listener.enterSectionVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSectionVariable" ):
                listener.exitSectionVariable(self)




    def sectionVariable(self):

        localctx = milestone_2Parser.SectionVariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_sectionVariable)
        self._la = 0 # Token type
        try:
            self.state = 1422
            token = self._input.LA(1)
            if token in [milestone_2Parser.IDENT, milestone_2Parser.COMMENT, milestone_2Parser.OPEN_PAREN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1403
                _la = self._input.LA(1)
                if _la==milestone_2Parser.COMMENT:
                    self.state = 1402
                    self.match(milestone_2Parser.COMMENT)


                self.state = 1405
                self.variable()

            elif token in [milestone_2Parser.T__2]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1406
                self.match(milestone_2Parser.T__2)
                self.state = 1409
                token = self._input.LA(1)
                if token in [milestone_2Parser.IDENT, milestone_2Parser.OPEN_PAREN]:
                    self.state = 1407
                    self.variable()

                elif token in [milestone_2Parser.COMMENT]:
                    self.state = 1408
                    self.match(milestone_2Parser.COMMENT)

                else:
                    raise NoViableAltException(self)

                self.state = 1418
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==milestone_2Parser.T__0:
                    self.state = 1411
                    self.match(milestone_2Parser.T__0)
                    self.state = 1414
                    token = self._input.LA(1)
                    if token in [milestone_2Parser.IDENT, milestone_2Parser.OPEN_PAREN]:
                        self.state = 1412
                        self.variable()

                    elif token in [milestone_2Parser.COMMENT]:
                        self.state = 1413
                        self.match(milestone_2Parser.COMMENT)

                    else:
                        raise NoViableAltException(self)

                    self.state = 1420
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1421
                self.match(milestone_2Parser.T__16)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstantContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identWithPragma(self):
            return self.getTypedRuleContext(milestone_2Parser.IdentWithPragmaContext,0)


        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def expr(self):
            return self.getTypedRuleContext(milestone_2Parser.ExprContext,0)


        def indAndComment(self):
            return self.getTypedRuleContext(milestone_2Parser.IndAndCommentContext,0)


        def colon(self):
            return self.getTypedRuleContext(milestone_2Parser.ColonContext,0)


        def typeDesc(self):
            return self.getTypedRuleContext(milestone_2Parser.TypeDescContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_constant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant" ):
                listener.enterConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant" ):
                listener.exitConstant(self)




    def constant(self):

        localctx = milestone_2Parser.ConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_constant)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1424
            self.identWithPragma()
            self.state = 1428
            _la = self._input.LA(1)
            if _la==milestone_2Parser.COLON:
                self.state = 1425
                self.colon()
                self.state = 1426
                self.typeDesc()


            self.state = 1430
            self.match(milestone_2Parser.T__4)
            self.state = 1431
            self.optInd()
            self.state = 1432
            self.expr()
            self.state = 1433
            self.indAndComment()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.OptIndContext,i)


        def symbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.SymbolContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.SymbolContext,i)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ExprContext,i)


        def comma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.CommaContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.CommaContext,i)


        def COMMENT(self, i:int=None):
            if i is None:
                return self.getTokens(milestone_2Parser.COMMENT)
            else:
                return self.getToken(milestone_2Parser.COMMENT, i)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_enum

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnum" ):
                listener.enterEnum(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnum" ):
                listener.exitEnum(self)




    def enum(self):

        localctx = milestone_2Parser.EnumContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_enum)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1435
            self.match(milestone_2Parser.ENUM)
            self.state = 1436
            self.optInd()
            self.state = 1450 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1437
                self.symbol()
                self.state = 1438
                self.optInd()
                self.state = 1445
                _la = self._input.LA(1)
                if _la==milestone_2Parser.T__4:
                    self.state = 1439
                    self.match(milestone_2Parser.T__4)
                    self.state = 1440
                    self.optInd()
                    self.state = 1441
                    self.expr()
                    self.state = 1443
                    _la = self._input.LA(1)
                    if _la==milestone_2Parser.COMMENT:
                        self.state = 1442
                        self.match(milestone_2Parser.COMMENT)




                self.state = 1448
                _la = self._input.LA(1)
                if _la==milestone_2Parser.COMMA:
                    self.state = 1447
                    self.comma()


                self.state = 1452 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 4)) & ~0x3f) == 0 and ((1 << (_la - 4)) & ((1 << (milestone_2Parser.T__3 - 4)) | (1 << (milestone_2Parser.IDENT - 4)) | (1 << (milestone_2Parser.KEYW - 4)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ObjectWhenContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ExprContext,i)


        def colcom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ColcomContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ColcomContext,i)


        def objectPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ObjectPartContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ObjectPartContext,i)


        def COMMENT(self, i:int=None):
            if i is None:
                return self.getTokens(milestone_2Parser.COMMENT)
            else:
                return self.getToken(milestone_2Parser.COMMENT, i)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_objectWhen

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectWhen" ):
                listener.enterObjectWhen(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectWhen" ):
                listener.exitObjectWhen(self)




    def objectWhen(self):

        localctx = milestone_2Parser.ObjectWhenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_objectWhen)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1454
            self.match(milestone_2Parser.WHEN)
            self.state = 1455
            self.expr()
            self.state = 1456
            self.colcom()
            self.state = 1457
            self.objectPart()
            self.state = 1459
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,169,self._ctx)
            if la_ == 1:
                self.state = 1458
                self.match(milestone_2Parser.COMMENT)


            self.state = 1470
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,171,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1461
                    self.match(milestone_2Parser.ELIF)
                    self.state = 1462
                    self.expr()
                    self.state = 1463
                    self.colcom()
                    self.state = 1464
                    self.objectPart()
                    self.state = 1466
                    self._errHandler.sync(self);
                    la_ = self._interp.adaptivePredict(self._input,170,self._ctx)
                    if la_ == 1:
                        self.state = 1465
                        self.match(milestone_2Parser.COMMENT)

             
                self.state = 1472
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,171,self._ctx)

            self.state = 1479
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,173,self._ctx)
            if la_ == 1:
                self.state = 1473
                self.match(milestone_2Parser.ELSE)
                self.state = 1474
                self.colcom()
                self.state = 1475
                self.objectPart()
                self.state = 1477
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,172,self._ctx)
                if la_ == 1:
                    self.state = 1476
                    self.match(milestone_2Parser.COMMENT)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ObjectBranchContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exprList(self):
            return self.getTypedRuleContext(milestone_2Parser.ExprListContext,0)


        def colcom(self):
            return self.getTypedRuleContext(milestone_2Parser.ColcomContext,0)


        def objectPart(self):
            return self.getTypedRuleContext(milestone_2Parser.ObjectPartContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_objectBranch

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectBranch" ):
                listener.enterObjectBranch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectBranch" ):
                listener.exitObjectBranch(self)




    def objectBranch(self):

        localctx = milestone_2Parser.ObjectBranchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_objectBranch)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1481
            self.match(milestone_2Parser.OF)
            self.state = 1482
            self.exprList()
            self.state = 1483
            self.colcom()
            self.state = 1484
            self.objectPart()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ObjectBranchesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def objectBranch(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ObjectBranchContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ObjectBranchContext,i)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ExprContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ExprContext,i)


        def colcom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ColcomContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ColcomContext,i)


        def objectPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ObjectPartContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ObjectPartContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_objectBranches

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectBranches" ):
                listener.enterObjectBranches(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectBranches" ):
                listener.exitObjectBranches(self)




    def objectBranches(self):

        localctx = milestone_2Parser.ObjectBranchesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_objectBranches)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1486
            self.objectBranch()
            self.state = 1491
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,174,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1487
                    self.match(milestone_2Parser.T__0)
                    self.state = 1488
                    self.objectBranch() 
                self.state = 1493
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,174,self._ctx)

            self.state = 1502
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,175,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1494
                    self.match(milestone_2Parser.T__0)
                    self.state = 1495
                    self.match(milestone_2Parser.ELIF)
                    self.state = 1496
                    self.expr()
                    self.state = 1497
                    self.colcom()
                    self.state = 1498
                    self.objectPart() 
                self.state = 1504
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,175,self._ctx)

            self.state = 1510
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,176,self._ctx)
            if la_ == 1:
                self.state = 1505
                self.match(milestone_2Parser.T__0)
                self.state = 1506
                self.match(milestone_2Parser.ELSE)
                self.state = 1507
                self.colcom()
                self.state = 1508
                self.objectPart()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ObjectCaseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identWithPragma(self):
            return self.getTypedRuleContext(milestone_2Parser.IdentWithPragmaContext,0)


        def typeDesc(self):
            return self.getTypedRuleContext(milestone_2Parser.TypeDescContext,0)


        def objectBranches(self):
            return self.getTypedRuleContext(milestone_2Parser.ObjectBranchesContext,0)


        def COMMENT(self):
            return self.getToken(milestone_2Parser.COMMENT, 0)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_objectCase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectCase" ):
                listener.enterObjectCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectCase" ):
                listener.exitObjectCase(self)




    def objectCase(self):

        localctx = milestone_2Parser.ObjectCaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_objectCase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1512
            self.match(milestone_2Parser.CASE)
            self.state = 1513
            self.identWithPragma()
            self.state = 1514
            self.match(milestone_2Parser.COLON)
            self.state = 1515
            self.typeDesc()
            self.state = 1517
            _la = self._input.LA(1)
            if _la==milestone_2Parser.COLON:
                self.state = 1516
                self.match(milestone_2Parser.COLON)


            self.state = 1520
            _la = self._input.LA(1)
            if _la==milestone_2Parser.COMMENT:
                self.state = 1519
                self.match(milestone_2Parser.COMMENT)


            self.state = 1528
            token = self._input.LA(1)
            if token in [milestone_2Parser.T__2]:
                self.state = 1522
                self.match(milestone_2Parser.T__2)
                self.state = 1523
                self.objectBranches()
                self.state = 1524
                self.match(milestone_2Parser.T__16)

            elif token in [milestone_2Parser.T__0]:
                self.state = 1526
                self.match(milestone_2Parser.T__0)
                self.state = 1527
                self.objectBranches()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ObjectPartContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def objectPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ObjectPartContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ObjectPartContext,i)


        def objectWhen(self):
            return self.getTypedRuleContext(milestone_2Parser.ObjectWhenContext,0)


        def objectCase(self):
            return self.getTypedRuleContext(milestone_2Parser.ObjectCaseContext,0)


        def declColonEquals(self):
            return self.getTypedRuleContext(milestone_2Parser.DeclColonEqualsContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_objectPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectPart" ):
                listener.enterObjectPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectPart" ):
                listener.exitObjectPart(self)




    def objectPart(self):

        localctx = milestone_2Parser.ObjectPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_objectPart)
        self._la = 0 # Token type
        try:
            self.state = 1546
            token = self._input.LA(1)
            if token in [milestone_2Parser.T__2]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1530
                self.match(milestone_2Parser.T__2)
                self.state = 1531
                self.objectPart()
                self.state = 1536
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==milestone_2Parser.T__0:
                    self.state = 1532
                    self.match(milestone_2Parser.T__0)
                    self.state = 1533
                    self.objectPart()
                    self.state = 1538
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1539
                self.match(milestone_2Parser.T__16)

            elif token in [milestone_2Parser.WHEN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1541
                self.objectWhen()

            elif token in [milestone_2Parser.CASE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1542
                self.objectCase()

            elif token in [milestone_2Parser.NIL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1543
                self.match(milestone_2Parser.NIL)

            elif token in [milestone_2Parser.DISCARD]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1544
                self.match(milestone_2Parser.DISCARD)

            elif token in [milestone_2Parser.T__3, milestone_2Parser.IDENT, milestone_2Parser.KEYW]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1545
                self.declColonEquals()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ObjectXContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def objectPart(self):
            return self.getTypedRuleContext(milestone_2Parser.ObjectPartContext,0)


        def pragma(self):
            return self.getTypedRuleContext(milestone_2Parser.PragmaContext,0)


        def typeDesc(self):
            return self.getTypedRuleContext(milestone_2Parser.TypeDescContext,0)


        def COMMENT(self):
            return self.getToken(milestone_2Parser.COMMENT, 0)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_objectX

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectX" ):
                listener.enterObjectX(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectX" ):
                listener.exitObjectX(self)




    def objectX(self):

        localctx = milestone_2Parser.ObjectXContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_objectX)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1548
            self.match(milestone_2Parser.OBJECT)
            self.state = 1550
            _la = self._input.LA(1)
            if _la==milestone_2Parser.T__12:
                self.state = 1549
                self.pragma()


            self.state = 1554
            _la = self._input.LA(1)
            if _la==milestone_2Parser.OF:
                self.state = 1552
                self.match(milestone_2Parser.OF)
                self.state = 1553
                self.typeDesc()


            self.state = 1557
            _la = self._input.LA(1)
            if _la==milestone_2Parser.COMMENT:
                self.state = 1556
                self.match(milestone_2Parser.COMMENT)


            self.state = 1559
            self.objectPart()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeClassParamContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(milestone_2Parser.SymbolContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_typeClassParam

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeClassParam" ):
                listener.enterTypeClassParam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeClassParam" ):
                listener.exitTypeClassParam(self)




    def typeClassParam(self):

        localctx = milestone_2Parser.TypeClassParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_typeClassParam)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1562
            _la = self._input.LA(1)
            if _la==milestone_2Parser.VARIABLE or _la==milestone_2Parser.OUT:
                self.state = 1561
                _la = self._input.LA(1)
                if not(_la==milestone_2Parser.VARIABLE or _la==milestone_2Parser.OUT):
                    self._errHandler.recoverInline(self)
                else:
                    self.consume()


            self.state = 1564
            self.symbol()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeClassContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeClassParam(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.TypeClassParamContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.TypeClassParamContext,i)


        def pragma(self):
            return self.getTypedRuleContext(milestone_2Parser.PragmaContext,0)


        def typeDesc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.TypeDescContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.TypeDescContext,i)


        def stmt(self):
            return self.getTypedRuleContext(milestone_2Parser.StmtContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_typeClass

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeClass" ):
                listener.enterTypeClass(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeClass" ):
                listener.exitTypeClass(self)




    def typeClass(self):

        localctx = milestone_2Parser.TypeClassContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_typeClass)
        self._la = 0 # Token type
        try:
            self.state = 1593
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,192,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1574
                _la = self._input.LA(1)
                if _la==milestone_2Parser.T__3 or _la==milestone_2Parser.IDENT or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (milestone_2Parser.KEYW - 66)) | (1 << (milestone_2Parser.VARIABLE - 66)) | (1 << (milestone_2Parser.OUT - 66)))) != 0):
                    self.state = 1566
                    self.typeClassParam()
                    self.state = 1571
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==milestone_2Parser.COMMA:
                        self.state = 1567
                        self.match(milestone_2Parser.COMMA)
                        self.state = 1568
                        self.typeClassParam()
                        self.state = 1573
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1577
                _la = self._input.LA(1)
                if _la==milestone_2Parser.T__12:
                    self.state = 1576
                    self.pragma()


                self.state = 1590
                _la = self._input.LA(1)
                if _la==milestone_2Parser.OF:
                    self.state = 1579
                    self.match(milestone_2Parser.OF)
                    self.state = 1588
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << milestone_2Parser.T__3) | (1 << milestone_2Parser.T__15) | (1 << milestone_2Parser.OP9) | (1 << milestone_2Parser.OP8) | (1 << milestone_2Parser.OP7) | (1 << milestone_2Parser.OP6) | (1 << milestone_2Parser.OP5) | (1 << milestone_2Parser.OP4) | (1 << milestone_2Parser.OP3) | (1 << milestone_2Parser.OP2) | (1 << milestone_2Parser.OP1) | (1 << milestone_2Parser.OP0) | (1 << milestone_2Parser.IDENT) | (1 << milestone_2Parser.TRIPLESTR_LIT) | (1 << milestone_2Parser.STR_LIT) | (1 << milestone_2Parser.CHAR_LIT) | (1 << milestone_2Parser.RSTR_LIT) | (1 << milestone_2Parser.GENERALIZED_STR_LIT) | (1 << milestone_2Parser.GENERALIZED_TRIPLESTR_LIT) | (1 << milestone_2Parser.OPEN_PAREN) | (1 << milestone_2Parser.OPEN_BRACE) | (1 << milestone_2Parser.OPEN_BRACK))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (milestone_2Parser.KEYW - 66)) | (1 << (milestone_2Parser.AND - 66)) | (1 << (milestone_2Parser.VARIABLE - 66)) | (1 << (milestone_2Parser.BIND - 66)) | (1 << (milestone_2Parser.CAST - 66)) | (1 << (milestone_2Parser.DISTINCT - 66)) | (1 << (milestone_2Parser.DIV - 66)) | (1 << (milestone_2Parser.ENUM - 66)) | (1 << (milestone_2Parser.IN - 66)) | (1 << (milestone_2Parser.IS - 66)) | (1 << (milestone_2Parser.ISNOT - 66)) | (1 << (milestone_2Parser.ITERATOR - 66)) | (1 << (milestone_2Parser.MOD - 66)) | (1 << (milestone_2Parser.NIL - 66)) | (1 << (milestone_2Parser.NOT - 66)) | (1 << (milestone_2Parser.NOTIN - 66)) | (1 << (milestone_2Parser.OBJECT - 66)) | (1 << (milestone_2Parser.OF - 66)) | (1 << (milestone_2Parser.OR - 66)) | (1 << (milestone_2Parser.OUT - 66)) | (1 << (milestone_2Parser.PROC - 66)) | (1 << (milestone_2Parser.PTR - 66)) | (1 << (milestone_2Parser.REF - 66)) | (1 << (milestone_2Parser.SHL - 66)) | (1 << (milestone_2Parser.SHR - 66)) | (1 << (milestone_2Parser.STATIC - 66)) | (1 << (milestone_2Parser.TUPLE - 66)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (milestone_2Parser.XOR - 131)) | (1 << (milestone_2Parser.INT_LIT - 131)) | (1 << (milestone_2Parser.INT8_LIT - 131)) | (1 << (milestone_2Parser.INT16_LIT - 131)) | (1 << (milestone_2Parser.INT32_LIT - 131)) | (1 << (milestone_2Parser.INT64_LIT - 131)) | (1 << (milestone_2Parser.UINT_LIT - 131)) | (1 << (milestone_2Parser.UINT8_LIT - 131)) | (1 << (milestone_2Parser.UINT16_LIT - 131)) | (1 << (milestone_2Parser.UINT32_LIT - 131)) | (1 << (milestone_2Parser.UINT64_LIT - 131)) | (1 << (milestone_2Parser.FLOAT_LIT - 131)) | (1 << (milestone_2Parser.FLOAT32_LIT - 131)) | (1 << (milestone_2Parser.FLOAT64_LIT - 131)))) != 0):
                        self.state = 1580
                        self.typeDesc()
                        self.state = 1585
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==milestone_2Parser.COMMA:
                            self.state = 1581
                            self.match(milestone_2Parser.COMMA)
                            self.state = 1582
                            self.typeDesc()
                            self.state = 1587
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)





                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1592
                self.stmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeDefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identWithPragmaDot(self):
            return self.getTypedRuleContext(milestone_2Parser.IdentWithPragmaDotContext,0)


        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def typeDefAux(self):
            return self.getTypedRuleContext(milestone_2Parser.TypeDefAuxContext,0)


        def genericParamList(self):
            return self.getTypedRuleContext(milestone_2Parser.GenericParamListContext,0)


        def indAndComment(self):
            return self.getTypedRuleContext(milestone_2Parser.IndAndCommentContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_typeDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeDef" ):
                listener.enterTypeDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeDef" ):
                listener.exitTypeDef(self)




    def typeDef(self):

        localctx = milestone_2Parser.TypeDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_typeDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1595
            self.identWithPragmaDot()
            self.state = 1597
            _la = self._input.LA(1)
            if _la==milestone_2Parser.OPEN_BRACK:
                self.state = 1596
                self.genericParamList()


            self.state = 1599
            self.match(milestone_2Parser.T__4)
            self.state = 1600
            self.optInd()
            self.state = 1601
            self.typeDefAux()
            self.state = 1603
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,194,self._ctx)
            if la_ == 1:
                self.state = 1602
                self.indAndComment()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VarTupleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.OptIndContext,i)


        def identWithPragma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.IdentWithPragmaContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.IdentWithPragmaContext,i)


        def optPar(self):
            return self.getTypedRuleContext(milestone_2Parser.OptParContext,0)


        def expr(self):
            return self.getTypedRuleContext(milestone_2Parser.ExprContext,0)


        def comma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.CommaContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.CommaContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_varTuple

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarTuple" ):
                listener.enterVarTuple(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarTuple" ):
                listener.exitVarTuple(self)




    def varTuple(self):

        localctx = milestone_2Parser.VarTupleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_varTuple)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1605
            self.match(milestone_2Parser.OPEN_PAREN)
            self.state = 1606
            self.optInd()
            self.state = 1607
            self.identWithPragma()
            self.state = 1613
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==milestone_2Parser.COMMA:
                self.state = 1608
                self.comma()
                self.state = 1609
                self.identWithPragma()
                self.state = 1615
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1616
            self.optPar()
            self.state = 1617
            self.match(milestone_2Parser.CLOSE_PAREN)
            self.state = 1618
            self.match(milestone_2Parser.T__4)
            self.state = 1619
            self.optInd()
            self.state = 1620
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ColonBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colcom(self):
            return self.getTypedRuleContext(milestone_2Parser.ColcomContext,0)


        def stmt(self):
            return self.getTypedRuleContext(milestone_2Parser.StmtContext,0)


        def doBlocks(self):
            return self.getTypedRuleContext(milestone_2Parser.DoBlocksContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_colonBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColonBody" ):
                listener.enterColonBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColonBody" ):
                listener.exitColonBody(self)




    def colonBody(self):

        localctx = milestone_2Parser.ColonBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_colonBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1622
            self.colcom()
            self.state = 1623
            self.stmt()
            self.state = 1625
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,196,self._ctx)
            if la_ == 1:
                self.state = 1624
                self.doBlocks()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VariableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def indAndComment(self):
            return self.getTypedRuleContext(milestone_2Parser.IndAndCommentContext,0)


        def varTuple(self):
            return self.getTypedRuleContext(milestone_2Parser.VarTupleContext,0)


        def identColonEquals(self):
            return self.getTypedRuleContext(milestone_2Parser.IdentColonEqualsContext,0)


        def colonBody(self):
            return self.getTypedRuleContext(milestone_2Parser.ColonBodyContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_variable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable" ):
                listener.enterVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable" ):
                listener.exitVariable(self)




    def variable(self):

        localctx = milestone_2Parser.VariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_variable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1629
            token = self._input.LA(1)
            if token in [milestone_2Parser.OPEN_PAREN]:
                self.state = 1627
                self.varTuple()

            elif token in [milestone_2Parser.IDENT]:
                self.state = 1628
                self.identColonEquals()

            else:
                raise NoViableAltException(self)

            self.state = 1632
            _la = self._input.LA(1)
            if _la==milestone_2Parser.COLON:
                self.state = 1631
                self.colonBody()


            self.state = 1634
            self.indAndComment()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BindStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def qualifiedIdent(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.QualifiedIdentContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.QualifiedIdentContext,i)


        def comma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.CommaContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.CommaContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_bindStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBindStmt" ):
                listener.enterBindStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBindStmt" ):
                listener.exitBindStmt(self)




    def bindStmt(self):

        localctx = milestone_2Parser.BindStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_bindStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1636
            self.match(milestone_2Parser.BIND)
            self.state = 1637
            self.optInd()
            self.state = 1638
            self.qualifiedIdent()
            self.state = 1644
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==milestone_2Parser.COMMA:
                self.state = 1639
                self.comma()
                self.state = 1640
                self.qualifiedIdent()
                self.state = 1646
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MixinStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optInd(self):
            return self.getTypedRuleContext(milestone_2Parser.OptIndContext,0)


        def qualifiedIdent(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.QualifiedIdentContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.QualifiedIdentContext,i)


        def comma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.CommaContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.CommaContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_mixinStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMixinStmt" ):
                listener.enterMixinStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMixinStmt" ):
                listener.exitMixinStmt(self)




    def mixinStmt(self):

        localctx = milestone_2Parser.MixinStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_mixinStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1647
            self.match(milestone_2Parser.MIXIN)
            self.state = 1648
            self.optInd()
            self.state = 1649
            self.qualifiedIdent()
            self.state = 1655
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==milestone_2Parser.COMMA:
                self.state = 1650
                self.comma()
                self.state = 1651
                self.qualifiedIdent()
                self.state = 1657
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PragmaStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pragma(self):
            return self.getTypedRuleContext(milestone_2Parser.PragmaContext,0)


        def stmt(self):
            return self.getTypedRuleContext(milestone_2Parser.StmtContext,0)


        def COMMENT(self):
            return self.getToken(milestone_2Parser.COMMENT, 0)

        def getRuleIndex(self):
            return milestone_2Parser.RULE_pragmaStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragmaStmt" ):
                listener.enterPragmaStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragmaStmt" ):
                listener.exitPragmaStmt(self)




    def pragmaStmt(self):

        localctx = milestone_2Parser.PragmaStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_pragmaStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1658
            self.pragma()
            self.state = 1664
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,202,self._ctx)
            if la_ == 1:
                self.state = 1659
                self.match(milestone_2Parser.COLON)
                self.state = 1661
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,201,self._ctx)
                if la_ == 1:
                    self.state = 1660
                    self.match(milestone_2Parser.COMMENT)


                self.state = 1663
                self.stmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SimpleStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exprStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.ExprStmtContext,0)


        def COMMENT(self):
            return self.getToken(milestone_2Parser.COMMENT, 0)

        def returnStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.ReturnStmtContext,0)


        def raiseStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.RaiseStmtContext,0)


        def yieldStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.YieldStmtContext,0)


        def discardStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.DiscardStmtContext,0)


        def breakStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.BreakStmtContext,0)


        def continueStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.ContinueStmtContext,0)


        def pragmaStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.PragmaStmtContext,0)


        def importStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.ImportStmtContext,0)


        def exportStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.ExportStmtContext,0)


        def fromStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.FromStmtContext,0)


        def includeStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.IncludeStmtContext,0)


        def commentStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.CommentStmtContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_simpleStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleStmt" ):
                listener.enterSimpleStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleStmt" ):
                listener.exitSimpleStmt(self)




    def simpleStmt(self):

        localctx = milestone_2Parser.SimpleStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_simpleStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1681
            token = self._input.LA(1)
            if token in [milestone_2Parser.T__12, milestone_2Parser.COMMENT, milestone_2Parser.BREAK, milestone_2Parser.DISCARD, milestone_2Parser.FROM, milestone_2Parser.IMPORT, milestone_2Parser.INCLUDE, milestone_2Parser.RAISE, milestone_2Parser.RETURN, milestone_2Parser.YIELD]:
                self.state = 1678
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,203,self._ctx)
                if la_ == 1:
                    self.state = 1666
                    self.returnStmt()
                    pass

                elif la_ == 2:
                    self.state = 1667
                    self.raiseStmt()
                    pass

                elif la_ == 3:
                    self.state = 1668
                    self.yieldStmt()
                    pass

                elif la_ == 4:
                    self.state = 1669
                    self.discardStmt()
                    pass

                elif la_ == 5:
                    self.state = 1670
                    self.breakStmt()
                    pass

                elif la_ == 6:
                    self.state = 1671
                    self.continueStmt()
                    pass

                elif la_ == 7:
                    self.state = 1672
                    self.pragmaStmt()
                    pass

                elif la_ == 8:
                    self.state = 1673
                    self.importStmt()
                    pass

                elif la_ == 9:
                    self.state = 1674
                    self.exportStmt()
                    pass

                elif la_ == 10:
                    self.state = 1675
                    self.fromStmt()
                    pass

                elif la_ == 11:
                    self.state = 1676
                    self.includeStmt()
                    pass

                elif la_ == 12:
                    self.state = 1677
                    self.commentStmt()
                    pass



            elif token in [milestone_2Parser.T__3, milestone_2Parser.T__15, milestone_2Parser.OP9, milestone_2Parser.OP8, milestone_2Parser.OP7, milestone_2Parser.OP6, milestone_2Parser.OP5, milestone_2Parser.OP4, milestone_2Parser.OP3, milestone_2Parser.OP2, milestone_2Parser.OP1, milestone_2Parser.OP0, milestone_2Parser.IDENT, milestone_2Parser.TRIPLESTR_LIT, milestone_2Parser.STR_LIT, milestone_2Parser.CHAR_LIT, milestone_2Parser.RSTR_LIT, milestone_2Parser.GENERALIZED_STR_LIT, milestone_2Parser.GENERALIZED_TRIPLESTR_LIT, milestone_2Parser.OPEN_PAREN, milestone_2Parser.OPEN_BRACE, milestone_2Parser.OPEN_BRACK, milestone_2Parser.KEYW, milestone_2Parser.AND, milestone_2Parser.VARIABLE, milestone_2Parser.BIND, milestone_2Parser.CAST, milestone_2Parser.DISTINCT, milestone_2Parser.DIV, milestone_2Parser.ENUM, milestone_2Parser.IN, milestone_2Parser.IS, milestone_2Parser.ISNOT, milestone_2Parser.ITERATOR, milestone_2Parser.MOD, milestone_2Parser.NIL, milestone_2Parser.NOT, milestone_2Parser.NOTIN, milestone_2Parser.OBJECT, milestone_2Parser.OF, milestone_2Parser.OR, milestone_2Parser.OUT, milestone_2Parser.PROC, milestone_2Parser.PTR, milestone_2Parser.REF, milestone_2Parser.SHL, milestone_2Parser.SHR, milestone_2Parser.STATIC, milestone_2Parser.TUPLE, milestone_2Parser.XOR, milestone_2Parser.INT_LIT, milestone_2Parser.INT8_LIT, milestone_2Parser.INT16_LIT, milestone_2Parser.INT32_LIT, milestone_2Parser.INT64_LIT, milestone_2Parser.UINT_LIT, milestone_2Parser.UINT8_LIT, milestone_2Parser.UINT16_LIT, milestone_2Parser.UINT32_LIT, milestone_2Parser.UINT64_LIT, milestone_2Parser.FLOAT_LIT, milestone_2Parser.FLOAT32_LIT, milestone_2Parser.FLOAT64_LIT]:
                self.state = 1680
                self.exprStmt()

            else:
                raise NoViableAltException(self)

            self.state = 1684
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,205,self._ctx)
            if la_ == 1:
                self.state = 1683
                self.match(milestone_2Parser.COMMENT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ComplexOrSimpleStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ifStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.IfStmtContext,0)


        def whenStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.WhenStmtContext,0)


        def whileStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.WhileStmtContext,0)


        def tryStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.TryStmtContext,0)


        def forStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.ForStmtContext,0)


        def blockStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.BlockStmtContext,0)


        def staticStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.StaticStmtContext,0)


        def deferStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.DeferStmtContext,0)


        def asmStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.AsmStmtContext,0)


        def routine(self):
            return self.getTypedRuleContext(milestone_2Parser.RoutineContext,0)


        def sectionTypeDef(self):
            return self.getTypedRuleContext(milestone_2Parser.SectionTypeDefContext,0)


        def sectionConstant(self):
            return self.getTypedRuleContext(milestone_2Parser.SectionConstantContext,0)


        def sectionVariable(self):
            return self.getTypedRuleContext(milestone_2Parser.SectionVariableContext,0)


        def bindStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.BindStmtContext,0)


        def mixinStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.MixinStmtContext,0)


        def simpleStmt(self):
            return self.getTypedRuleContext(milestone_2Parser.SimpleStmtContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_complexOrSimpleStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComplexOrSimpleStmt" ):
                listener.enterComplexOrSimpleStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComplexOrSimpleStmt" ):
                listener.exitComplexOrSimpleStmt(self)




    def complexOrSimpleStmt(self):

        localctx = milestone_2Parser.ComplexOrSimpleStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_complexOrSimpleStmt)
        self._la = 0 # Token type
        try:
            self.state = 1718
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,207,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1715
                token = self._input.LA(1)
                if token in [milestone_2Parser.IF]:
                    self.state = 1686
                    self.ifStmt()

                elif token in [milestone_2Parser.WHEN]:
                    self.state = 1687
                    self.whenStmt()

                elif token in [milestone_2Parser.WHILE]:
                    self.state = 1688
                    self.whileStmt()

                elif token in [milestone_2Parser.TRY]:
                    self.state = 1689
                    self.tryStmt()

                elif token in [milestone_2Parser.FOR]:
                    self.state = 1690
                    self.forStmt()

                elif token in [milestone_2Parser.BLOCK]:
                    self.state = 1691
                    self.blockStmt()

                elif token in [milestone_2Parser.STATIC]:
                    self.state = 1692
                    self.staticStmt()

                elif token in [milestone_2Parser.DEFER]:
                    self.state = 1693
                    self.deferStmt()

                elif token in [milestone_2Parser.ASM]:
                    self.state = 1694
                    self.asmStmt()

                elif token in [milestone_2Parser.PROC]:
                    self.state = 1695
                    self.match(milestone_2Parser.PROC)
                    self.state = 1696
                    self.routine()

                elif token in [milestone_2Parser.METHOD]:
                    self.state = 1697
                    self.match(milestone_2Parser.METHOD)
                    self.state = 1698
                    self.routine()

                elif token in [milestone_2Parser.ITERATOR]:
                    self.state = 1699
                    self.match(milestone_2Parser.ITERATOR)
                    self.state = 1700
                    self.routine()

                elif token in [milestone_2Parser.MACRO]:
                    self.state = 1701
                    self.match(milestone_2Parser.MACRO)
                    self.state = 1702
                    self.routine()

                elif token in [milestone_2Parser.TEMPLATE]:
                    self.state = 1703
                    self.match(milestone_2Parser.TEMPLATE)
                    self.state = 1704
                    self.routine()

                elif token in [milestone_2Parser.CONVERTER]:
                    self.state = 1705
                    self.match(milestone_2Parser.CONVERTER)
                    self.state = 1706
                    self.routine()

                elif token in [milestone_2Parser.TYPE]:
                    self.state = 1707
                    self.match(milestone_2Parser.TYPE)
                    self.state = 1708
                    self.sectionTypeDef()

                elif token in [milestone_2Parser.CONST]:
                    self.state = 1709
                    self.match(milestone_2Parser.CONST)
                    self.state = 1710
                    self.sectionConstant()

                elif token in [milestone_2Parser.VARIABLE, milestone_2Parser.LET, milestone_2Parser.USING]:
                    self.state = 1711
                    _la = self._input.LA(1)
                    if not(((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & ((1 << (milestone_2Parser.VARIABLE - 68)) | (1 << (milestone_2Parser.LET - 68)) | (1 << (milestone_2Parser.USING - 68)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self.consume()
                    self.state = 1712
                    self.sectionVariable()

                elif token in [milestone_2Parser.BIND]:
                    self.state = 1713
                    self.bindStmt()

                elif token in [milestone_2Parser.MIXIN]:
                    self.state = 1714
                    self.mixinStmt()

                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1717
                self.simpleStmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def complexOrSimpleStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.ComplexOrSimpleStmtContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.ComplexOrSimpleStmtContext,i)


        def simpleStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(milestone_2Parser.SimpleStmtContext)
            else:
                return self.getTypedRuleContext(milestone_2Parser.SimpleStmtContext,i)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStmt" ):
                listener.enterStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStmt" ):
                listener.exitStmt(self)




    def stmt(self):

        localctx = milestone_2Parser.StmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_stmt)
        self._la = 0 # Token type
        try:
            self.state = 1739
            token = self._input.LA(1)
            if token in [milestone_2Parser.T__2]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1720
                self.match(milestone_2Parser.T__2)
                self.state = 1721
                self.complexOrSimpleStmt()
                self.state = 1726
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==milestone_2Parser.T__0 or _la==milestone_2Parser.SEMI_COLON:
                    self.state = 1722
                    _la = self._input.LA(1)
                    if not(_la==milestone_2Parser.T__0 or _la==milestone_2Parser.SEMI_COLON):
                        self._errHandler.recoverInline(self)
                    else:
                        self.consume()
                    self.state = 1723
                    self.complexOrSimpleStmt()
                    self.state = 1728
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1729
                self.match(milestone_2Parser.T__16)

            elif token in [milestone_2Parser.T__3, milestone_2Parser.T__12, milestone_2Parser.T__15, milestone_2Parser.OP9, milestone_2Parser.OP8, milestone_2Parser.OP7, milestone_2Parser.OP6, milestone_2Parser.OP5, milestone_2Parser.OP4, milestone_2Parser.OP3, milestone_2Parser.OP2, milestone_2Parser.OP1, milestone_2Parser.OP0, milestone_2Parser.IDENT, milestone_2Parser.COMMENT, milestone_2Parser.TRIPLESTR_LIT, milestone_2Parser.STR_LIT, milestone_2Parser.CHAR_LIT, milestone_2Parser.RSTR_LIT, milestone_2Parser.GENERALIZED_STR_LIT, milestone_2Parser.GENERALIZED_TRIPLESTR_LIT, milestone_2Parser.OPEN_PAREN, milestone_2Parser.OPEN_BRACE, milestone_2Parser.OPEN_BRACK, milestone_2Parser.KEYW, milestone_2Parser.AND, milestone_2Parser.VARIABLE, milestone_2Parser.BIND, milestone_2Parser.BREAK, milestone_2Parser.CAST, milestone_2Parser.DISCARD, milestone_2Parser.DISTINCT, milestone_2Parser.DIV, milestone_2Parser.ENUM, milestone_2Parser.FROM, milestone_2Parser.IMPORT, milestone_2Parser.IN, milestone_2Parser.INCLUDE, milestone_2Parser.IS, milestone_2Parser.ISNOT, milestone_2Parser.ITERATOR, milestone_2Parser.MOD, milestone_2Parser.NIL, milestone_2Parser.NOT, milestone_2Parser.NOTIN, milestone_2Parser.OBJECT, milestone_2Parser.OF, milestone_2Parser.OR, milestone_2Parser.OUT, milestone_2Parser.PROC, milestone_2Parser.PTR, milestone_2Parser.RAISE, milestone_2Parser.REF, milestone_2Parser.RETURN, milestone_2Parser.SHL, milestone_2Parser.SHR, milestone_2Parser.STATIC, milestone_2Parser.TUPLE, milestone_2Parser.XOR, milestone_2Parser.YIELD, milestone_2Parser.INT_LIT, milestone_2Parser.INT8_LIT, milestone_2Parser.INT16_LIT, milestone_2Parser.INT32_LIT, milestone_2Parser.INT64_LIT, milestone_2Parser.UINT_LIT, milestone_2Parser.UINT8_LIT, milestone_2Parser.UINT16_LIT, milestone_2Parser.UINT32_LIT, milestone_2Parser.UINT64_LIT, milestone_2Parser.FLOAT_LIT, milestone_2Parser.FLOAT32_LIT, milestone_2Parser.FLOAT64_LIT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1731
                self.simpleStmt()
                self.state = 1736
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,209,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1732
                        self.match(milestone_2Parser.SEMI_COLON)
                        self.state = 1733
                        self.simpleStmt() 
                    self.state = 1738
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,209,self._ctx)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StartContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def module(self):
            return self.getTypedRuleContext(milestone_2Parser.ModuleContext,0)


        def getRuleIndex(self):
            return milestone_2Parser.RULE_start

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStart" ):
                listener.enterStart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStart" ):
                listener.exitStart(self)




    def start(self):

        localctx = milestone_2Parser.StartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_start)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1741
            self.module()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





